/**

\page HydroImport Importing snapshots

\section HydroIntro Introduction

Analytical or quasi-analytical models often fall short in describing the geometric complexity of the real world. More
realistic numerical models can be produced by computer programs that simulate the (magneto-)hydrodynamical evolution of
an astrophysical system over time. Such codes usually output a series of \em snapshots. The data provided in each
snapshot define the state of the simulated system at a particular time in its evolution, including the spatial
distribution and other relevant properties of the dynamical components, such as for example the stars and the
interstellar medium in a galaxy.

Because of the nonlocal and nonlinear behavior of radiation transport, predicting the observable properties of these
hydrodynamical models requires a full, three-dimensional radiative transfer simulation in all but the most trivial
cases. Assuming that the radiation crossing times are much shorter than the dynamical time scales, and that radiation
pressure is negligible, the radiative transfer and hydrodynamical simulations can be completely uncoupled. In other
words, the radiative transfer simulation can then be performed as a \em post-processing step based solely on the
information contained in a particular snapshot. The post-processing procedure extracts the spatial distribution of the
radiation sources (e.g., stars) and the obscuring medium (e.g., dust), plus the corresponding properties, from the
hydrodynamical snapshot data, and then performs a radiative transfer simulation on the resulting setup.

The radiation sources and the obscuring medium are obviously handled differently during a \c SKIRT simulation, implying
different needs for the corresponding data structures. The most frequent demand on the data structure representing the
radiation sources is to randomly sample a photon packet launch position (from the spatial luminosity distribution) and
wavelength (from the spectral energy distribution at that position). This operation usually occurs millions or even
billions of times during a simulation, and thus should execute fairly quickly. On the other hand, the key operation for
the obscuring medium is to determine its density at a given location, or its mass in a given volume. These functions
are needed while constructing the spatial grid, i.e. for deciding where to subdivide cells in adaptive grids, and for
calculating the medium mass in each cell of the final dust grid. Although this is an intensive process, it is limited
to the setup phase of the simulation, because, once constructed, the spatial grid includes all information required for
tracing photon packets through its domain.

Hydrodynamical simulation codes historically employ one of two schemes: a Lagrangian formulation based on moving
particles (smoothed particle hydrodynamics or SPH), for example Gadget and Gasoline; or a Eulerian approach based on a
non-moving spatial grid, often an adaptive grid with multiple refinement levels (AMR), for example RAMSES, Enzo, and
AMR-VAC. Recent codes including AREPO, TESS, and Shadowfax introduce a new scheme that employs a moving mesh based on a
Voronoi tessellation of the spatial domain. This new scheme is claimed to combine the best features of SPH and the
traditional Eulerian approach, and it is becoming increasingly popular.

In this note we discuss SKIRT's mechanisms for importing radiation sources and obscuring media from snapshots produced
by each of these three schemes. The discussion is organized in sections as follows:
 - \ref HydroSnapshot
 - \ref HydroSources
 - \ref HydroMedia
 - \ref HydroConclusions


\section HydroSnapshot Snapshots

\subsection HydroSnapshotFile Snapshot file formats

All snapshot data must be provided to \c SKIRT for import in a predefined column text format. In other words, an
external procedure (usually a Python script) is needed to extract the appropriate information from the native snapshot
data format and output the result as an ASCII column text file. While this seems harsh, it is almost never an issue in
practice. In most cases, one needs to perform some additional processing anyway, such as locating the proper data
files, performing a coordinate transformation, limiting the imported data to a given aperture, calculating indirectly
derived properties, etc. Furthermore, the alternative would be to implement a variety of data formats and point \c
SKIRT to the relevant data through a potentially very complex configuration mechanism that would never be as flexible
as the Python language.

There are three supported snapshot paradigmns (particle, adaptive mesh, and Voronoi mesh), each with their own format
for describing the spatial geometry. In addition to describing the spatial geometry, the input file must contain the
properties required by the component (e.g. source, medium or geometry) being imported. The number and type of such
properties depends on the component's type and on its configured options. This results in the following formats:

 - Particle (SPH): the input file has a line for each particle, listing its position and smoothing length
   plus the component-specific properties.
 - Adaptive mesh (AMR): the input file has lines defining the nonleaf/leaf structure of the mesh,
   plus a line for each leaf cell with its component-specific properties.
 - Voronoi mesh: the input file has a line for each generating site, listing its position plus the
   component-specific properties.

In all cases, columns must be in the fixed order prescribed by the \c SKIRT component controlling import of the file
(see \ref HydroSnapshotClass, \ref HydroSources, and \ref HydroMedia). Values are either in the default units
prescribed by that \c SKIRT component, or in the units defined through header lines in the data file being imported
(see the documentation of the TextInFile class). In the latter case, any of the ski file units corresponding to the
imported quantity can be used (see \ref UserParamFileUnits).

\subsection HydroSnapshotClass Snapshot classes

The heart of the \c SKIRT snapshot import mechanism is implemented by the classes in the following hierarchy:

\dot
digraph snapshothierarchy {
    rankdir=BT;
    node [shape=rect, fontname=Helvetica, fontsize=10];
    edge [arrowhead=empty];

    Snapshot [label="Snapshot" URL="\ref Snapshot"];
      ParticleSnapshot [label="ParticleSnapshot" URL="\ref ParticleSnapshot"];
      AdaptiveMeshSnapshot [label="AdaptiveMeshSnapshot" URL="\ref AdaptiveMeshSnapshot"];
      VoronoiMeshSnapshot [label="VoronoiMeshSnapshot" URL="\ref VoronoiMeshSnapshot"];

    ParticleSnapshot -> Snapshot;
    AdaptiveMeshSnapshot -> Snapshot;
    VoronoiMeshSnapshot -> Snapshot;
}
\enddot

Snapshot is an abstract base class for representing snapshot data imported from a column text file. It can be used to
define the properties of primary sources or transfer media. This base class offers facilities to handle the input
options, such as determining which columns are to be imported from the text file, and defines a common interface for
all snapshot types, for example to obtain the density at a given position. The actual implementation is provided in a
derived class for each snapshot type (ParticleSnapshot, AdaptiveMeshSnapshot, and VoronoiMeshSnapshot).

The Snapshot classes are \em not exposed to the user through the configuration file. Instead, they are invoked under
the hood by the various components that \em are configured as part of the simulation. Three distinct class hierarchies
actually make use of the Snapshot classes:

    Source                  Medium                  Geometry
      ImportedSource          ImportedMedium          ImportedGeometry
        ParticleSource          ParticleMedium          ParticleGeometry       --> ParticleSnapshot
        AdaptiveMeshSource      AdaptiveMeshMedium      AdaptiveMeshGeometry   --> AdaptiveMeshSnapshot
        VoronoiMeshSource       VoronoiMeshMedium       VoronoiMeshGeometry    --> VoronoiMeshSnapshot

Each of these class hierarchies implements the appropriate layer of functionality on top of the Snapshot classes.
For example, sources can launch photo packets, media can quickly find the material density at a given location,
and geometries offer a density distribution normalized to unity.


\section HydroSources Sources

A \c SKIRT simulation always includes one or more components describing the radiation sources in the model (see the
SourceSystem and Source classes). Each source component defines (a) the spatial density distribution of the sources and
(b) the spectral energy distribution (%SED) at each location. In the context of post-processing hydrodynamical
simulations, there are three distinct ways of accomplishing this:

- The imported snapshot defines the spatial density distribution and provides additional properties for each smoothed
particle or grid cell from which an appropriate %SED can be determined. For this purpose, \c SKIRT includes several
parameterized %SED families. For example, the Bruzual-Charlot family (the BruzualCharlotSEDFamily class) represents
young and evolved stellar populations. The Mappings III %SED family (the MappingsSEDFamily class) represents
star-forming regions. New families can be added with minimal programming effort, provided the data for the %SED
templates is available in tabulated form.

- The imported snapshot defines just the spatial density distribution, and a particular %SED (constant throughout the
spatial domain) is configured from the %SED components built into \c SKIRT (subclasses of the SED class).

- The radiation sources are completely defined within \c SKIRT by configuring a built-in geometry (subclasses of the
Geometry class) and %SED (subclasses of the SED class). In case a hydrodynamical simulation does not include any
sources, this option can be used to complete the model by adding, for example, a central source to a dust disk, or
background radiation to the dust in a molecular cloud.

One can even combine these options by using multiple source components, for example, for adding an active galactic
nucleus to a spiral galaxy snapshot.

\subsection HydroSourcesSph Particle sources

A particle snapshot consists of a set of smoothed particles (or rather anchor points in a co-moving grid), each
characterized by a suite of properties. Formally, the spatial luminosity distribution in a particle snapshot is defined
by a list of \f$N\f$ particles and an assumed smoothing kernel \f$W(r,h)\f$, with each smoothed particle characterized
by a position \f$\mathbf{r}_j\f$, a smoothing length \f$h_j\f$, and a luminosity contribution \f$L_j\f$. The total
luminosity density at an arbitrary position \f$\mathbf{r}\f$ is then given by \f[ \Sigma(\mathbf{r}) = \sum_{j=1}^N L_j
\, W(|\mathbf{r}-\mathbf{r}_j|,h_j) \f]

The ParticleSource class allows configuring one of several (spherically symmetric) smoothing kernels, including the
frequently-used cubic spline kernel (the CubicSplineSmoothingKernel class) and a scaled Gaussian smoothing kernel (the
ScaledGaussianSmoothingKernel class). If needed, implementing a new smoothing kernel should be fairly straightforward.

For launching photon packets, \c SKIRT needs to generate random positions sampled from the radiation source's density
distribution. This is rather straightforward thanks to the composition method. The first step is the choice of a random
particle, based on a discrete distribution where each particle is weighted by its relative luminosity contribution. The
second step is generating a random position according to the luminosity distribution of the chosen particle, using the
configured smoothing kernel.

\subsubsection HydroSourcesSphSnapsed Spatial distribution and SED from snapshot

We first consider the case where both the spatial distribution and the %SED at each location are determined from the
SPH snapshot. The ParticleSource class expects a text file with a single line for each particle. The first four columns
specify the \f$x\f$, \f$y\f$ and \f$z\f$ coordinates and the smoothing length \f$h\f$ for the particle. The number and
interpretation of the subsequent columns depends on the %SED family configured for this ParticleSource instance. For
example, for the Bruzual-Charlot %SED family (BruzualCharlotSEDFamily), the remaining three columns provide the
properties of the stellar population represented by the particle. The first extra column specifies the initial mass of
the stellar population, i.e. the particle's mass \f$M_\mathrm{init}\f$ at the time it was born. The second extra column
specifies the metallicity \f$Z\f$ of the stellar population, and the third extra column represents the age \f$t\f$ of
the stellar population.

The ParticleSource class can also be configured to take into account the Doppler shift caused by the velocity of the
radiation sources relative to the model coordinate system. If this option is enabled, the input text file must provide
three additional columns (after the smoothing length and before the additional properties for the %SED family),
specifying the \f$v_\mathrm{x}\f$, \f$v_\mathrm{y}\f$ and \f$v_\mathrm{z}\f$ components of the particle's velocity.
Given this velocity \f$\mathbf{v}\f$, the redshift \f$z\f$ experienced by a photon packet launched from the particle in
direction \f$\mathbf{k}\f$ (given as a unit vector) is determined by \f[ z = -\frac{\mathbf{v}\cdot\mathbf{k}}{c} \f]
where \f$c\f$ is the speed of light in vacuum. As a function of the rest wavelength \f$\lambda_0\f$, the redshifted
wavelength \f$\lambda_z\f$ is given by \f$\lambda_z=(1+z)\,\lambda_0\f$. Since the redshift value depends on the angle
between the particle and photon packet trajectories, the emission is no longer isotropic.

For example, here is an input file describing just a single source particle placed at the origin of the model
coordinate system:

    # Star particle for testing SED family
    # Column 1: position x (pc)
    # Column 2: position y (pc)
    # Column 3: position z (pc)
    # Column 4: smoothing length (pc)
    # Column 5: mass (Msun)
    # Column 6: metallicity (1)
    # Column 7: age (Gyr)
    0 0 0 1   10  0.04  5

\subsubsection HydroSourcesSphBuiltsed Spatial distribution from snapshot with built-in SED

If the hydrodynamical simulation does not track the relevant properties for defining the local emission spectrum, we
can still import the spatial luminosity distribution from the snapshot and assign a built-in %SED that is constant
across the spatial domain. In this case, we use the GeometricSource class, and we configure it with an instance of the
ParticleGeometry class to import the snapshot. Similar to the ParticleSource class described earlier, the
ParticleGeometry class expects a text file with a single line for each particle. The first four columns specify the
\f$x\f$, \f$y\f$ and \f$z\f$ coordinates and the smoothing length \f$h\f$ for the particle. The fifth column specifies
the luminosity contribution of this particle, in arbitrary units since the ParticleGeometry class normalizes the total
density to unity. Because of this normalization, we need to separately supply the actual luminosity of the source
through one of the regular options offered by the GeometricSource class.

\subsection HydroSourcesAmr Adaptive mesh sources

Simulations with an a adaptive mesh paradigm use a hierarchical grid that is refined to a variable level depending on
the resolution requirements in various regions of the model. While the resolution requirements and thus the grid may
change as the system evolves, each particular snapshot corresponds to a unique and well-defined hierarchical grid.
Thus, an adaptive mesh snapshot includes some description of the structure of the hierarchical grid, implicitly or
explicitly defining the spatial extent of each grid cell, and for each cell the values of a suite of physical
properties.

While it is possible to use this technique with spherical or cylindrical coordinate systems, perhaps to benefit from
certain quasi-symmetries in the model, \c SKIRT only supports adaptive mesh snapshots using Cartesian coordinates. In a
Cartesian hierarchical grid, the cuboidal spatial domain is recursively subdivided into smaller cuboids according to
some scheme until the desired resolution in each region is reached.

\subsubsection HydroSourcesAmrSnapshot Snapshot data format

The AdaptiveMeshSource class expects a text file in a format that describes the topological structure of the Cartesian
hierarchical grid and lists the relevant physical properties in each cell. The size of the spatial domain must be
defined separately in the \c SKIRT configuration file, i.e. this information is not part of the imported data.

The hierarchical grid structure is organized into a tree. Each tree node represents a cuboidal portion of the domain,
called its \em extent. The \em root node's extent is the complete domain. A \em nonleaf node distributes its extent
over its child nodes using a regular linear grid. The number of subdivisions is defined separately for each node and
can differ for each spatial dimension. An octree, for example, would subdivide each nonleaf node into
\f$2\times2\times2\f$ child nodes. Typical AMR schemes have much larger subdivision counts that sometimes vary within
the grid; for example, the root node may be subdivided differently. A \em leaf node represents a cell that is not
subdivided any further and that holds a data value for each field; the field values are considered to be constant over
the leaf node's extent. Collectively the leaf nodes form a partition of the domain, i.e. their extents cover the
complete domain without overlapping one another.

The leaf nodes or cells in this three-dimensional data structure can be arranged in a linear sequence using so-called
\em Morton \em ordering. This ordering is obtained by performing a depth-first traversal of the tree, where each
nonleaf node visits its children in the order x-first, then y, then z. The process is illustrated in the following
figure for a two-dimensional structure. The root node is subdivided into \f$4\times3\f$ subnodes; some of the nodes
near the center are subdivided into \f$2\times2\f$ subnodes, and two of the cells in the upper row are subdivided into
\f$1\times2\f$ subnodes. The solid line connects the leaf nodes in Morton order, starting at the lower left node with
Morton index 0 and performing a depth-first traversal with each nonleaf node visiting its children in the order first x
(horizontal) and then y (vertical).

\image html HydroMortonGrid.png

XXX

The overall makeup of the snapshot text file reflects this structure and ordering. Below is a text representation of
the 2D grid shown in the above figure. Because  \c SKIRT deals with 3D grids, we've added a third dimension that is never
subdivided. The lines starting with an exclamation mark indicate a subdivided node, e.g., the root node is subdivided
in \f$4\times3\times1\f$ cells. The other lines specify the field values for a particular cell. In this example, the
first field value specifies the serial number or \em Morton \em index of the cell, and the second value specifies the
cell's "density" reflected by the gray level in the above figure. In an actual snapshot, these illustrative values
would be replaced by the relevant physical quantities.

\verbatim
# Snapshot text data file
! 4 3 1
0 0.4
1 0.4
2 0.4
3 0.4
4 0.4
! 2 2 1
5 0.6
6 0.6
7 0.6
! 2 2 1
8 0.8
9 0.8
10 0.8
11 0.8
! 2 2 1
12 0.6
13 0.6
14 0.6
15 0.6
16 0.4
17 0.4
! 1 2 1
18 0.5
19 0.5
! 1 2 1
20 0.5
21 0.5
22 0.4
\endverbatim

More formally, each line in the text file describes a particular tree node (nonleaf or leaf), and the lines are given
in Morton order. Specifically, each line in the file can be of one of the following types:

- \em Comment: lines having a number sign or hash (\#) as the first non-whitespace character, lines containing only
whitespace and empty lines are ignored (and do not count in the Morton order).

- \em Nonleaf: a nonleaf line has an exclamation mark (!) as the first non-whitespace character, followed by optional
whitespace and then three whitespace-separated positive integer numbers \f$N_x,N_y,N_z\f$. These three numbers specify
the number of child nodes carried by this node in each spatial direction. The child nodes are on a regular linear grid
as described above.

- \em Leaf: a leaf node contains one or more whitespace-separated floating point numbers, specifying the values of the
fields in the cell represented by this leaf node. All leaf node lines in the file must contain the same number of field
values.

Note that there is no need to provide the cell positions because the geometry follows from the Morton order (and the
total domain size, which is passed to  \c SKIRT independently of the snapshot file).

\subsubsection HydroSourcesAmrSnapsed Spatial distribution and SED from snapshot

As before, we first consider the case where both the spatial distribution and the %SED at each location are determined
from the snapshot. The AdaptiveMeshStellarComp class in  \c SKIRT expects a snapshot data file in the format described
above, supplemented with the size of the spatial domain in each direction, because that information is not stored in
the file. In addition, the user must configure which of the scalar fields in the snapshot file carry the relevant
physical quantities for determining the %SED assigned to each cell.

The current implementation supports just the Bruzual-Charlot %SED family, so the AdaptiveMeshStellarComp class expects
three values, respectively specifying the initial stellar density \f$\rho_\mathrm{init}\f$ (in
\f$\mathrm{M}_\odot\,\mathrm{pc}^{-3}\f$), the metallicity \f$Z\f$ of the stellar population (dimensionless fraction),
and the age \f$t\f$ of the stellar population (in years). Using these properties as parameters for the Bruzual-Charlot
%SED templates,  \c SKIRT calculates the luminosity contribution of each cell for each wavelength bin. This information is
used during the Monte Carlo cycle to determine the (wavelength-dependent) probability that a given cell will be
selected as the launch site for a new photon packet. Generating a random launch position from a uniform distribution
within the selected cuboidal cell is of course trivial.

When the need arises, we can add support for other %SED families, similar to what was described for the SPHStellarComp
class dealing with SPH snapshots in \ref HydroSourcesSphSnapsed.

\subsubsection HydroSourcesAmrBuiltsed Spatial distribution from snapshot with built-in SED

Similar to the procedure described for SPH snapshots in \ref HydroSourcesSphBuiltsed, we can import the spatial
luminosity distribution from a mesh-based snapshot and assign a built-in %SED that is constant across the spatial
domain. In this case, we configure an instance of the AdaptiveMeshGeometry class to import the snapshot, separately
specifying the extent of the spatial domain as before. The density contribution of each cell is given by the product of
two field values with configurable indices, for compatibility with dust density distributions; see \ref
HydroDustGridLoadsnap. Because the AdaptiveMeshGeometry class normalizes the spatial distribution to unity, we need to
separately supply the actual luminosity of the source through one of the standard normalization options offered in
SKIRT.

\subsection HydroSourcesVoro Voronoi grids

Recently, a new Lagrangian technique that solves the hydrodynamics equations on a moving, unstructured Voronoi grid is
gaining popularity. It is claimed to avoid some of the difficulties of smoothed particle hydrodynamics on the one hand
and Eulerian grid-based hydrodynamics on the other hand. Moving mesh hydrodynamics is mainly applied to simulations of
galaxy formation and evolution.

Due to the nature of a Voronoi tesselation, the geometry of the grid is completely defined by the positions of the
generating sites. It is hence not necessary for a snapshot to store all the vertices and edges of each of the cells.
Similar to our approach for other snapshot types,  \c SKIRT reads the properties for a list of Voronoi cells from a text
file in a simple format that can be easily generated by a conversion script.  \c SKIRT constructs the Voronoi grid from the
positions of the generating sites, and assigns the corresponding physical values to each cell, assuming that the values
are constant across the cell's extent.

\subsubsection HydroSourcesVoroLaunch Launching photon packets

The generation of random positions for launching photon packets is similar to the procedure for hierarchical grids. In
the first step, we pick a random cell using a discrete distribution where each cell is weighted by its relative
(possibly wavelength-dependent) luminosity contribution. The second step, generating a random position from within the
chosen cell, is significantly more complex than in the case of a cuboidal cell. To the best of our knowledge, there are
no dedicated techniques to generate a random point from a Voronoi cell. There are two possible options.

The first option is to partition the cell into a set of tetrahedra, subsequently select a random tetrahedron from a
discrete distribution where every tetrahedron is weighted by its relative volume, and finally generate a random
position from the selected tetrahedron. Specific algorithms are available for both the tetrahedrization of convex
polyhedra and the generation of random positions from a tetrahedron.

The second option, which is more straightforward and which we adopted in  \c SKIRT, is to use the rejection technique. As
the reference distribution we use a uniform density in a cuboidal volume, defined as the 3D bounding box of the cell.
During construction of the Voronoi grid, for each cell, we store the cell bounding box (easily obtained from the cell
vertices because Voronoi cells are convex polyhedra) and a list of all neighboring cells. After generating a candidate
random position uniformly from the cell bounding box, we decide whether the position is actually inside the Voronoi
cell by checking that it is closer to the cell's generating site than to the generating sites of all its neighbors.

Our tests have shown that, depending on the distribution of the generating Voronoi sites, the average ratio of the
volume of the bounding box of a Voronoi cell over the actual cell volume is about 3 to 4. This ratio represents the
average rejection rate for the random position generation.

\subsubsection HydroSourcesVoroLoadsnap Loading snapshots

The procedures for loading a spatial and/or spectral distribution from a Voronoi-tesselation-based snapshot into  \c SKIRT
are very similar to what was described for the other snapshot types in \ref HydroSourcesSph and \ref HydroSourcesAmr.

The VoronoiStellarComp class expects a snapshot data file in a straightforward text column format, containing one line
per cell. The first three columns provide the \f$x\f$, \f$y\f$, and \f$z\f$ coordinates of the generating site for the
cell, and the subsequent columns specify the relevant physical quantities for determining the %SED assigned to each
cell. The current implementation supports just the Bruzual-Charlot %SED family, so the class expects three values
specifying the initial stellar density, the metallicity of the stellar population, and the age of the stellar
population. The order in which these are specified can be configured by the user.

The VoronoiGeometry class imports just the spatial luminosity distribution from a Voronoi-based snapshot, allowing to
separately assign a built-in %SED that is constant across the spatial domain. The file format is similar as described
above, however the density contribution of each Voronoi cell is now given by the product of two field values with
configurable indices. Because the class normalizes the spatial distribution to unity, we need to separately supply the
actual luminosity of the source through one of the standard normalization options offered in  \c SKIRT.


\section HydroMedia Media

Apart from radiation sources, any nontrivial  \c SKIRT simulation also includes a \em dust \em system with one or more \em
dust \em components describing the dusty medium in the model (see the DustSystem and DustComp classes). Each dust
component defines (a) the spatial density distribution of the dust and (b) the relevant material properties of the
dust. In addition, a dust system also configures a \em dust \em grid that will be used to discretize the dusty medium
for the purposes of the RT simulation (see the DustGrid class and it suclasses). We will discuss each of these aspects
in turn.

SKIRT offers two distinct ways to define the dust density distribution:

- The imported snapshot fully defines the dust density distribution, either directly or as a simple formula in function
of the properties of the gas density as explained in \ref HydroDustSph. With this option, the dust system is configured
with an instance of one of the SPHDustDistribution, AdaptiveMeshDustDistribution, or VoronoiDustDistribution classes.
The latter two classes allow configuring multiple dust components (each with their own distribution and dust
properties) to be loaded from the same snapshot.

- The dust density distribution is defined by configuring one or more built-in geometries through the
CompDustDistribution class using any of the subclasses of the Geometry class, including at least one instance of the
SPHGeometry, AdaptiveMeshGeometry, or VoronoiGeometry classes. With this option, it is possible to assigning separate
dust properties to each of the components, and to combine quasi-analytic dust geometries with densities loaded from a
snapshot.

Each of the dust components configured as described above must be assigned a specific \em dust \em mixture, which
defines the optical and calorimetric properties of the dust grains (see the DustMix class and its subclasses, and also
\ref DustProperties). The dust properties are considered to be constant across the spatial domain of the dust component, but
evidently different dust components can be assigned different dust mixtures.

Note that the stellar system and the dust system each have their own distinct import mechanism. It is perfectly
possible to import, say, radiation sources from SPH particles and dust densities from an AMR grid. Such a combination
is not uncommon. The RAMSES code, for example, can use an N-body solver for the pressure-less dark matter and stellar
particles while employing a mesh-based hydrodynamical solver for the gas medium in the same simulation.

Finally, a dust grid must be properly configured to provide adequate spatial resolution in areas with high dust
densities or large density gradients. When importing a hydrodynamical simulation snapshot, the best option is to select
an adaptive grid, such as a hierarchical octree grid (OctTreeDustGrid), a k-d tree grid (BinTreeDustGrid), or a Voronoi
grid (VoronoiDustGrid). To help evaluate and configure the quality of a dust grid, it is instructive to review the dust
density cuts along the coordinate planes generated by  \c SKIRT upon request (see the documentation of the DustSystem
class). The \em theoretical density maps shows the dust density as it is defined through one of the DustDistribution
classes, while the \em gridded density shows the dust density after discretization in the dust grid.

\subsection HydroDustSph Smoothed particles

The mechanisms for loading the dust density from an SPH snapshot are similar to those discussed in \ref HydroSourcesSph
for radiation sources. There are, however, some differences and additional considerations. The total dust density at an
arbitrary position is obtained through \f[ \rho(\mathbf{r}) = \sum_{j=1}^N M_j \, W(|\mathbf{r}-\mathbf{r}_j|,h_j) \f]
where \f$M_j\f$ now indicates the dust mass contribution for each particle. This value may simply be provided in the
snapshot as a particle property, but just as likely, the hydrodynamical simulation traces the evolution of the gas
medium as a whole rather than the dust per se. To facilitate those cases,  \c SKIRT can calculate the dust mass from the
gas mass in the input data, assuming that the amount of dust is proportional to the metal fraction in the gas, except
in areas where the gas is too hot to form dust. In other words, dropping the particle index, we have \f[
M_\mathrm{dust} = \begin{cases} f_\mathrm{dust}\,Z\,M_\mathrm{gas} & \mathrm{if}\; T<T_\mathrm{max} \\ 0 &
\mathrm{otherwise} \end{cases} \f] where \f$M_\mathrm{gas}\f$, \f$Z\f$, and \f$T\f$ are the gas mass, metallicity, and
temperature given by the gas particle's properties in the snapshot, and \f$f_\mathrm{dust}\f$ and \f$T_\mathrm{max}\f$
are constant parameters specified when configuring  \c SKIRT. A fixed dust-to-metal fraction \f$f_\mathrm{dust}\f$ is
widely assumed to be an appropriate approximation for a variety of environments, although observed values range from
\f$f_\mathrm{dust}=0.2\f$ to \f$0.4\f$. If the cutoff temperature \f$T_\mathrm{max}\f$ is set to zero, the temperature
criterion is ignored and the gas temperature does not need to be specified in the snapshot data.

In practice, the kernels used in SPH simulations almost always have a finite support so that only a relatively small
number of terms in the sum have a non-zero contribution.



As already mentioned in \ref HydroSourcesSph,  \c SKIRT employs implementations for the smoothing kernel \f$W(r,h)\f$ that
are optimized for each specific task. To calculate the dust density at a given location,  \c SKIRT uses the cubic spline
kernel \f[ W(r,h) = \frac{8}{\pi\,h^3} \times \begin{cases} 1 - 6\,u^2\,(1-u) & \mathrm{for}\;0<u<\tfrac12 \\
2\,(1-u)^3 & \mathrm{for}\;\tfrac12<u<1 \\ 0 & \mathrm{otherwise} \end{cases} \f] with \f$u=r/h\f$ (see the class
SPHGasParticle). This kernel has a finite support so that the operation can be limited to particles that potentially
overlap the location of interest. To facilitate this process, the setup phase of the simulation places a rough grid
over the spatial domain and constructs a list of overlapping particles for each grid cell.

A further optimization is provided in the class SPHGasParticle to calculate the mass within a given box (a cuboid lined
up with the coordinate axes), as an alternative to sampling the density in various locations across the volume of the
box. In this case, the calculation uses the analytical properties of the scaled and clipped Gaussian kernel defined in
\ref HydroSourcesSph, which was designed to approximate the cubic spline kernel, to directly determine the mass in the
box. The advantage of this kernel is that the integration over a box can be written in terms of the error function,

\f[
  \int_{x_1}^{x_2} \int_{y_1}^{y_2}\int_{z_1}^{z_2}
  W(\sqrt{x^2+y^2+z^2}\,,h) \,\mathrm{d}x \,\mathrm{d}y\,\mathrm{d}z = \tfrac18
  \left(\mathrm{erf}(\frac{a\,x_2}{h}) - (\mathrm{erf}(\frac{a\,x_1}{h})\right)
  \times \left(\mathrm{erf}(\frac{a\,y_2}{h}) - (\mathrm{erf}(\frac{a\,y_1}{h})\right)
  \times \left(\mathrm{erf}(\frac{a\,z_2}{h}) - (\mathrm{erf}(\frac{a\,z_1}{h})\right)
\f]

Assuming the error function can be calculated quickly or, more likely, is tabulated at sufficient resolution, this
optimization accelerates the density calculation for typical Cartesian grids by an order of magnitude.

\subsubsection HydroDustSphLoadsnap Loading snapshots

The SPHDustDistribution class expects a text file in a format similar to what was described in \ref
HydroSourcesSphSnapsed for radiation sources. Again, the first four columns specify the \f$x\f$, \f$y\f$ and \f$z\f$
coordinates and the smoothing length \f$h\f$ for each particle (all in parsec). The subsequent columns now specify the
gas mass \f$M_\mathrm{gas}\f$ (in \f$\mathrm{M}_\odot\f$), metallicity \f$Z\f$ (dimensionless fraction) and temperature
\f$T\f$ (in K). The last column is optional; if the temperature value is missing, the particle is considered to contain
dust regardless of the temperature cutoff value \f$T_\mathrm{max}\f$.

We can also configure the CompDustDistribution class with an an instance of the SPHGeometry class. The text file
expected by this class has the same format as the one expected by the SPHDustDistribution class. However, the
SPHGeometry class normalizes the total weight of the density distribution to unity, which means that we need to supply
the total dust mass through one of the standard normalization mechanisms offered by  \c SKIRT. Note that the SPHGeometry
class can also be configured as part of a stellar system (see \ref HydroSourcesSphBuiltsed). In that case, the values
in the fifth and sixth columns no longer have the meaning of mass and metallicity, and their product simply defines the
relative luminosity contribution.

\subsection HydroDustGrid Hierarchical grids and Voronoi grids

The  \c SKIRT classes for importing grid-based snapshots currently do not implement the temperature cutoff criterion
described in \ref HydroDustSph. For each cell in the grid, the dust density is thus simply calculated according to \f[
\rho_\mathrm{dust} = f_\mathrm{dust}\,Z\,\rho_\mathrm{gas} \f] where \f$\rho_\mathrm{gas}\f$ and \f$Z\f$ are the gas
density and metallicity given by the cell properties in the snapshot, and \f$f_\mathrm{dust}\f$ is a constant parameter
specified when configuring  \c SKIRT. In case the hydrodynamical simulation directly traces a dust population, we can
configure  \c SKIRT to use \f$f_\mathrm{dust}=1\f$ and to ignore metallicity (effectively setting \f$Z=1\f$ as well).

Determining the dust density at an arbitrary position comes down to identifying the cell that contains that position
and returning the density associated with this cell. For a hierarchical grid this entails a simple search that starts
at the root node and recursively descends into the child node that happens to contain the given position until a leaf
node has been reached. With the cuboidal cells in a Cartesian grid this is rather straightforward. In the case of a
Voronoi grid, however, the cell identification is not as simple. Due to the nature of Voronoi grids, locating the
appropriate cell is essentially a nearest neighbor search. Rather than looping over all possible cells (or
equivalently, all generating sites),  \c SKIRT implements an approach using cuboidal blocks (see the VoronoiMesh class).

\subsubsection HydroDustGridLoadsnap Loading snapshots

The file formats expected by the AdaptiveMeshDustDistribution and VoronoiDustDistribution classes are very similar to
those described for radiation sources respectively in \ref HydroSourcesAmrSnapshot and \ref HydroSourcesVoroLoadsnap.
The properties determining the %SED for radiation sources are in this case replaced by the gas density
\f$\rho_\mathrm{gas}\f$ and metallicity \f$Z\f$.

Alternatively, we can configure an instance of the AdaptiveMeshGeometry or VoronoiGeometry} classes, which normalize
the total weight of the density distribution to unity, so that we need to supply the total dust mass through one of the
standard normalization mechanisms offered by  \c SKIRT.

\subsubsection HydroDustGridConfig Configuring the RT dust grid

For grid-based hydrodynamical snapshots,  \c SKIRT offers the option to perform the RT simulation using the imported grid
(see the AdaptiveMeshDustGrid class). In this case, rather than constructing a RT dust grid using some configured
scheme based on sampling the density in the imported distribution,  \c SKIRT directly adopts the grid on which the snapshot
has been defined. However, while this seems a logical thing to do, it is often not the best choice for several reasons.

Most importantly, the resolution requirements for the RT treatment usually differ from those for the hydrodynamical
simulation. We might not need the same overall resolution, and fine-grained cells may be needed in different areas of
the domain. Also, sometimes the  \c SKIRT dust grid can be made smaller than the full snapshot domain, cutting off the
outer areas that do not contain significant amounts of dust anyway. And finally, the octree and k-d tree dust grids in
SKIRT (OctTreeDustGrid and BinTreeDustGrid) are highly optimized for photon packet shooting, so the grid construction
time is usually easily regained during the actual RT simulation phase.


\section HydroConclusions Conclusions

We described the various mechanisms implemented in  \c SKIRT for importing snapshots generated by hydrodynamical simulation
codes. We can conclude that  \c SKIRT's capabilities are very flexible and enable RT post-processing of snapshots from
essentially any hydrodynamical code with minimal data conversion and little or no programming requirements.

At the same time, it is fair to point out some limitations. As it stands, several capabilities are implemented only for
SPH snapshots, e.g., support for a configurable %SED family (\ref HydroSourcesSphSnapsed) or for velocity Doppler shift
(\ref HydroSourcesSphVelocity), and other capabilities are implemented only for grid-based snapshots, e.g., support for
binary data formats (\ref HydroSourcesAmrSnapshot). Adding these capabilities for the other snapshot types would be
fairly straightforward, but doing so within the current class structure would cause substantial code duplication and
maintenance headaches. Similarly, the smoothed particle kernels employed in  \c SKIRT are hard-coded and optimized for each
use case, e.g., sampling random locations (\ref HydroSourcesSph) or calculating the density at a given location (\ref
HydroDustSph). Instead, the user should be able to select a kernel that matches the kernel used in the originating SPH
simulation, even if this would have some performance implications.

To address these issues, we should design and implement a cleaner structure of  \c SKIRT's import modules in the future.

*/
