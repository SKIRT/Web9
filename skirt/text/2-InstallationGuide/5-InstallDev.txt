/**

\page InstallDev Develop using Qt Creator (all platforms)

You can easily make changes to your local copy of the \c SKIRT source tree using any text editor, and rebuild the code
using the procedures described elsewhere in this installation guide. Once you get into substantial development work,
however, and especially if you plan to contribute code back to the main \c SKIRT repository, it becomes beneficial to
use Qt Creator as an integrated development environment, and to follow the procedures outlined below.

\note The description below assumes that you successfully completed the installation instructions provided by the topic
      \ref InstallQt (and any references therein).

This advanced topic contains the following sections:
- \ref InstallDevClangFormat
- \ref InstallDevDoxstyle
- \ref InstallDevDoxygen
- \ref InstallDevQt
- \ref InstallDevRepo


\section InstallDevClangFormat Install the source code formatter (optional)

If you plan on writing or updating \c SKIRT source code, you may wish to install \c clang-format version 9, the tool
used to automatically format all C++ source code in the \c SKIRT repository, as described in this section.
The \c clang-format tool is part of the open source Clang C/C++ compiler effort.

For information on how to use the source code formatter, see \ref DevCodingStyleFormat.

\subsection InstallDevClangFormatMac Mac OS X

Apple's Xcode development environment includes an Apple-specific version of the Clang compiler. Unfortunately, it does
not include the \c clang-format tool. The best option therfore is to install the pre-built binaries of the complete
Clang distribution for the Mac OS operating system, which can be obtained from the LLVM download page:
http://releases.llvm.org/download.html. To avoid confusion with the default Apple-specific clang++ installation, do not
install this extra version of Clang in any of the directories that are (or may be) part of your \c PATH. Instead,
install it in your home directory in such a way that the binaries are reachable at \c ~/clang/bin. The \c SKIRT
procedure that formats the source code looks for the binary in this directory.

\subsection InstallDevClangFormatOther Other systems

On recent Ubuntu systems, \c clang-format version 9 can be installed by entering:

    sudo apt-get install clang-format

On other systems, the package manager might offer similar capabilities. Otherwise, refer to the installation
instructions on the <a href="http://clang.llvm.org">Clang LLVM</a> web site. One option is to install the pre-built
binaries of the complete Clang distribution for the appropriate operating system, which can be obtained from the LLVM
download page: http://releases.llvm.org/download.html.


\section InstallDevDoxstyle Build the documentation formatter (optional)

If you plan on writing or updating the documentation in the \c SKIRT code, you may wish to build \c doxstyle, a tool to
assist with formatting "/ **"-style documentation blocks in .hpp header files. The \c doxstyle tool is included as part
of the \c SKIRT code tree and can be enabled through a build option.

To build the \c doxstyle tool, turn on the "BUILD_DOX_STYLE" build option and rebuild the \c SKIRT project. For
information about build options, see \ref InstallOptions. For instructions on how to configure build options, see \ref
InstallQtBuild.

For information on how to use the documentation formatter, see \ref DevCodingStyleFormat.


\section InstallDevDoxygen Install the documentation generator (optional)

The reference documentation for the \c SKIRT code is generated from the source code files by the freely available
application \c Doxygen, which uses the \c dot tool (part of the Graphviz graph visualization software) to generate
diagrams. Most \c SKIRT users and developers do not need to (re-)generate the documentation. However, if you wish to
verify that the formatting instructions and formulae in your source code comments are properly rendered in the final
documentation, you can install the appropriate tools as described in this section.

For information on how to actually generate the documentation for the \c SKIRT code after installing
these tools, see \ref DevDocs.

\subsection InstallDevDoxygenVersion Version info

The documentation on this web site has been generated with Doxygen version 1.8.13 and \c dot - graphviz version 2.36.0
on Mac OS X 10.14 (Mojave). Earlier versions of these tools might not support all options and commands used in the
documentation.

\subsection InstallDevDoxygenMac Mac OS X

<b> Installing Doxygen </b>

- Navigate to the <a href="http://www.doxygen.nl/download.html">Doxygen download page</a>.
- Scroll down and download the most recent binary distribution for Mac OS X.
- After the download completes, open the '.dmg' file to mount the Doxygen installation disk.
- In the Finder window that appears, drag the DoxyGen application to your applications folder.

<b> Installing the Graphviz Graph Visualization Software </b>

- Navigate to the <a href="http://www.graphviz.org/download/">Graphviz download page</a>.
- Locate the graphviz-2.36.0.pkg package and download it.
- Open the package and follow the instructions.
- If the package fails open in response to a double-click, right-click the package file and choose 'Open'.
  In the warning window that pops up, press 'Open' again to proceed with the installation.

\subsection InstallDevDoxygenOther Other systems

On Ubuntu a version of Doxygen including the Graphviz tools can be installed by entering:

    sudo apt-get install doxygen

On other systems, the package manager might offer similar capabilities. Otherwise, refer to the installation
instructions on the <a href="http://www.stack.nl/~dimitri/doxygen">Doxygen</a> and
<a href="http://www.graphviz.org">Graphviz</a> web sites.


\section InstallDevQt Configure Qt Creator for development

\subsection InstallDevQtGeneral General preferences

Before using Qt Creator for substantial \c SKIRT development, you should adjust its preferences as follows. Launch Qt
Creator and open the preferences panel. On the various tabs listed below, make the specified adjustments (leaving
other settings untouched), and at the end press the OK button to confirm the changes.

- "Text Editor -> Behavior" tab
    - Tab size: 4
    - Backspace indentation: Follow Previous Indents
    - In entire document: On
    - Default encoding: UTF-8
    - UTF-8 BOM: Always Delete

- "Text Editor -> Display" tab
    - Display right margin at column: 120
    - Highlight current line: On

- "C++ -> Code Style" tab
    - press the "Import..." button, select the file <tt>~/SKIRT/git/Docs/templates/SkirtCodeStyle.xml</tt>
      and press the "Open" button

- "C++ -> File Naming" tab
    - Header suffix: hpp
    - Lower case filenames: Off
    - License template: press the "Choose..." button, select the file <tt>~/SKIRT/git/Docs/templates/LicenseTemplate.txt</tt>
      and press the "Open" button

- "Build & Run -> General" tab
    - Save all files before build: On
    - Open Compile Output pane when building: On
    - Clear old application output on a new run: On
    - Merge stderr and stdout: On
    - Default build directory: "../%{CurrentBuild:Name}"

\subsection InstallDevQtFormat The source code and documentation formatters

If you installed the source code formatter and/or the documentation formatter (see sections at the top of this page),
you can easily use these tools from within Qt Creator after performing the additional configuration steps described in
this section. For information on how to use actually use these formatters, see \ref DevCodingStyleFormat.

Launch Qt Creator, open the preferences panel, and make the adjustments on the various tabs as listed below. Press the
OK button at the end to confirm the changes.

 - "Environment -> External Tools" tab
   - Add a new category called "Formatting"
   - Add a new item called "Format C++ code in file" to this category
   - Configure the attributes for this item as follows:
     - Description: "Formats the C++ code in the complete file"
     - Executable: path to the clang-format executable, e.g: ~/clang/bin/clang-format
     - Arguments: "-style=file -i %{CurrentDocument:FilePath}"
     - Working directory: empty
     - Output: Show in pane
     - Error output: Show in pane
     - Modifies current document: on
     - Input: empty
   - Add another item called "Format comments in selection" to the same category
   - Configure the attributes for this item as follows:
     - Description: "Formats the doxygen blocks in the selection"
     - Executable: path to the DoxStyle executable: ~/SKIRT/release/Docs/doxstyle/doxstyle
     - Arguments: empty
     - Working directory: empty
     - Output: Replace Selection
     - Error output: Ignore
     - Modifies current document: off
     - Input: "%{CurrentDocument:Selection}"

 - "Environment -> Keyboard" tab
   - In the long item list, select "Tools -> External.Format_C++_code_in_file"
   - In the "Key sequence" field, enter the shortcut combination <tt>[Alt] + [Cmd] + [J]</tt> (on Mac)
     or <tt>[Alt] + [Ctrl] + [J]</tt> (on Linux)
   - In the long item list, select "Tools -> External.Format_comments_in_selection"
   - In the "Key sequence" field, enter the shortcut combination <tt>[Alt] + [Cmd] + [I]</tt> (on Mac)
     or <tt>[Alt] + [Ctrl] + [I]</tt> (on Linux)


\section InstallDevRepo Setup the source code repository for development purposes

\subsection InstallDevRepoGit Configure the source control client

Before using the \c git client for committing adjusted or new code, you should configure it with your user name and
email address. This is especially important if you plan to eventually contribute code to the \c SKIRT repository.
For more information about contributing
to the \c SKIRT project, see the [Contributing](../root/_Contributing.html) section on this web site.

If you are using git on the command line, enter the following commands, replacing the placeholders with your own name
and email address:

    git config --global user.name "Your Name"
    git config --global user.email yourname@organization.org

If you are using the graphical GitHub interface, enter this information in the "Git" tab of the
GitHub preferences panel.

\subsection InstallDevRepoFork Fork the code repository

<b>Make a GitHub account</b>

- If you already have an account on the <a href="https://github.com">GitHub website</a>, log in and skip the rest of
  this step.
- Visit the <a href="https://github.com">GitHub website</a> and enter your e-mail adress and a newly chosen username
  and password.
- Press "Sign up for GitHub".
- On the next page, press "Finish sign up".
- You will receive an e-mail with a confirmation link. Go to the corresponding webpage and press "Confirm".
- Stay logged in for the next step.

<b>Fork the main <tt>SKIRT</tt> code repository</b>

- In the search bar on top of the page, enter "SKIRT" to find the \c SKIRT repository.
- Click on the repository listed as "SKIRT/SKIRT9".
- In the top right corner of the page, press "Fork"
- You are immediately brought to a new repository "username/SKIRT", which is - at that moment - an exact copy of
  the original "SKIRT/SKIRT9" repository.

For more information about forking, refer to
the [GitHub fork help item](https://help.github.com/en/articles/about-forks).

<b>Link the forked repository to your local repository</b>

If you already have a local clone of the main \c SKIRT repository, and there are no relevant local changes,
you can remove the local clone and create a new clone from your forked repository. Alternatively, you can
link the forked repository to your existing local repository:

- On the webpage of your forked "username/SKIRT" repository, click the "Clone or download" button on the righthand
  side of the page.
- Make sure it states "Clone with HTTPS", and click on the icon to the right of the text box to copy the URL
  to the clipboard.
- Go back to Terminal and enter the following commands:

      cd ~/SKIRT/git
      git remote add forked [PASTE]

  where <tt>[PASTE]</tt> is to be replaced with the URL copied from the GitHub web site, i.e.:

      git remote add forked https://github.com/username/SKIRT.git

  This command adds your forked remote to the list of remotes related to your local repository. It gives this remote
  the alias "forked", which is how you will refer to this remote when you are pushing changes. The main \c SKIRT
  remote from which you originally cloned is automatically given the alias "origin".

- A list of the remotes linked to your local repository can be obtained with the following command:

      git remote

  The output of this command should now include the names of the two remote repositories.

- You can now push your changes to the remote called "forked". To do this, use the following command:

      git push forked master

  where "master" is the name of the main branch of your local repository.

*/
