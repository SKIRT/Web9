/**

\page DevItems Creating simulation items

\section DevItemsIntro Introduction

In the context of the \c SKIRT code, the term <em>simulation item</em> indicates an instance of one of the over 250
SimulationItem subclasses (which all reside in the <tt>SKIRT/core</tt> module). Simulation items play a key role in \c
SKIRT: they represent the configuration of a particular simulation, mapping class and property names to XML element and
attribute names in the ski file (or to a question in the Q&A session). In addition, the SimulationItem subclasses
provide the code to actually perform the simulation and output the requested results.

\c SKIRT performs a simulation in three distinct phases:
 - Construction: the simulation runtime hierarchy is created and all property values are set to mirror the contents
   of the specified ski file. At the end of this phase, all simulation item instances have been constructed.
   No actual calculations happen in this phase and so it is very fast (on the order of milliseconds).
 - Setup: all simulation items get a chance to perform initialization and store the results in data members.
   This may involve reading data from resource files or creating large data structures, so setup may take a long time.
   At the end of this phase, any probes configured by the user get a chance to write diagnostics or other
   information about the initialized data structures (such as the spatial media density distribution) to output files.
 - Run: the simulation is actually performed by launching a (usually large) number of photon packages and
   recording the effects. At the end of this phase, the instruments output the mock obervations and
   any probes configured by the user get a chance to write diagnostics or other
   information about the simulation data structures (e.g. the radiation field) to output files.


\section DevItemsReq Requirements for simulation items

To support these capabilities, a SimulationItem subclass must comply with quite a number of requirements. The class
(obviously) must directly or indirectly inherit the SimulationItem class. The class declaration must start with a
section of SMILE metadata definitions describing any discoverable properties for instances of the class, i.e.
properties that map to an attribute in the ski file. The metadata definitions use macros provided in the ItemInfo.hpp
header file. These macros automatically define the corresponding data members and public getters, avoiding code
repetition. In addition, the macros automatically define a default constructor (i.e. a constructor without arguments),
which is the one invoked when a simulation hierarchy gets constructed. Because it is not possible to add custom code to
the default constructor, all data members of the class (other than the discoverable properties) must be initialized in
the class declaration (using the curly brace syntax).

Of course, the class must implement its custom functionality. If setup is required, the appropriate setupSelfXXXX()
function must be overridden. Other functions may be declared and defined as needed. Also, when deriving from a
particular abstract SimulationItem subclass, such as Geometry, additional requirements may apply, as described for the
abstract subclass.

Finally, a line of code must be added to the constructor of the SimulationItemRegistry class to register the new
SimulationItem subclass to the \c SKIRT SMILE schema.


\section DevItemsLinks Information resources

A good way to start developing \c SKIRT code is to perform the development-related tutorials offered
as part of the <a href="../version9/_tutorials.html">Tutorials</a> section on this web site.
Also, there are many existing subclasses that can serve as an example.

Further background and reference information is provided in the following topics:

 - \ref DevStructSimItems -- the run-time simulation item hierarchy
 - \ref DevStructSimClasses -- the compile-time simulation item hierarchy
 - \ref DevSmileUsage -- simulation items are based on the SMILE functionality
 - The SimulationItem and Item classes -- the base classes for all simulation items
 - The Simulation class -- the setup and run mechanism
 - \ref DevSmileLangSchema -- formal definition of discoverable property types and their allowed attributes
 - The ItemInfo.hpp header file -- macros for defining discoverable properties in the class declaration

*/
