/**

\page DevStruct Structure of the code

\section DevStructDirs Directory structure

The \c SKIRT source code is contained in an online repository and can be obtained as described in the \ref
InstallationGuide. The files are organized in a nested directory hierarchy; your local copy may look as follows:

    ~/SKIRT
        debug
        git
            Docs
            MakeUp
            SKIRT
            SMILE
        release
            ...
            MakeUp
            SKIRT
            ...
        resources
        run

The \c git directory contains an identical copy of the online \c SKIRT repository; it is usually placed inside a local
directory called \c SKIRT in your home directory. The \c debug and \c release directories contain the result of
building the \c SKIRT code, including the executables. Always use the \c release build for "production" simulations;
the code in the \c debug build is not optimized and runs several times slower. The \c resources directory contains
resource files required by \c SKIRT and downloaded from the \c SKIRT web site. The \c run directory may contain
input/output files involved in actually running \c SKIRT. The information in these last four directories is not part of
the source code repository, which is why these directories are \em not inside the \c git directory.

Immediately inside the \c git directory reside the main project file \c CMakeLists.txt and some shell scripts used for
building \c SKIRT or its documentation. For more information, see \ref InstallationGuide and \ref DevDocs.

The highest-level \c git subdirectories (\c MakeUp, \c SKIRT, SMILE) each represent a \em subproject of the \c SKIRT
project. In their turn, they have nested subdirectories organizing the source code and related support files into \em
modules.

\section DevStructModules Subprojects and modules

\image html DevProjectStructure.png

The above diagram lists the various subprojects and modules in the \c SKIRT code. Boxes with a gray background depict a
subproject; the other boxes depict a module. A colored border indicates that the module contains supporting data files
rather than source code. Most module boxes represent a static library that can be used by other modules; those with a
symbol in the upper right corner represent an executable program.

The symbols in the upper left corner of each module box indicate internal and external dependencies. Refer to the
diagram legend for details. Note that there are no two-way or circular dependencies between modules. When adjusting or
extending the code, it is important not to inadvertently create new inter-module dependencies. In any case, circular
dependencies between modules are not allowed.

These are the subprojects of the \c SKIRT project:
 - \c SMILE -- contains the code for generic, fundamental facilities, including those for handling XML-based
   configuration files; see \ref DevSmile.
 - \c SKIRT -- contains the code for the \c SKIRT command line program, performing radiative transfer simulations;
   see \ref UserCmdLine.
 - \c MakeUp -- contains the code for the MakeUp tool that provides a graphical user interface for configuring
   \c SKIRT; see \ref UserMakeUp.
 - \c Docs -- contains data files and a helper tool that support writing and building the reference documentation
   for the \c SKIRT code; see \ref DevDocs.

Below is a brief description of the modules in each of these subproject, listed in order of appearance in the above
diagram.

\c SMILE subproject (also see \ref DevSmile):

 - \c build -- This small library allows retrieving versioning information about the current build. It cooperates
   with the build system to provide information such as the time when the current executable was built.
 - \c fundamentals -- This library offers generic functionality that is used by other modules throughout the project,
   including platform-independent system interaction, basic string handling, and low-level XML processing.
 - \c schema -- This library contains the meat of the SMILE functionality, including facilities for processing SMILE
   schemas, representing SMILE datasets in memory, and performing introspection on C++ classes in SMILE client code.
 - \c serialize -- This library uses the capabilities of the \c schema module to serialize and deserialize SMILE data
   sets, and to resurrect a client's C++ object hierarchy from a SMILE dataset.
 - \c wizard -- This library implements the graphical wizard that allows creating or editing a SMILE dataset,
   given the corresponding SMILE schema file.
 - \c smiletool -- This command-line tool can work with SMILE datasets corresponding to a given SMILE schema file.
   The tool can conduct a text-based question and answer session to create a dataset, produce a LaTeX description
   for an existing dataset, and more.
 - \c shapes -- This command-line program serves as an example of the typical SMILE library use case (similar to
   but a lot less complex than \c SKIRT).

\c SKIRT subproject (also see \ref UserCmdLine):

 - \c resources -- This module includes information on which resource data files are required by the various classes
   in the <tt>SKIRT/core</tt> module.
 - \c fitsio -- This library provides input/output capabilities for FITS files. It contains a subset of the source
   files offered in tarball cfitsio3360.tar.gz downloaded from NASA's HEASARC software site
   at http://heasarc.gsfc.nasa.gov/fitsio/fitsio.html . No changes were made to any of the source files.
 - \c voro -- This library provides support for building Voronoi meshes.
   The source code is adapted from the Voro++ library written by Chris H. Rycroft (LBL / UC Berkeley)
   which can be downloaded at http://math.lbl.gov/voro++/about.html .
   For more information see \ref VoroPlusPlus.
 - \c mpi -- This library encapsulates any and all invocations of the Message Passing Interface (MPI) optionally
   linked in as an external library. Concentrating all MPI calls in a single module allows the code in other modules
   to be compiled without the MPI extra's.
 - \c utils -- This library provides some basic <tt>SKIRT</tt>-specific functionality that does \em not depend on
   the SimulationItem class.
 - \c core -- This library provides the core \c SKIRT functionality for setting up and performing a simulation. It
   includes all SimulationItem subclasses and the corresponding registry.
 - \c main -- This is the \c SKIRT console application. It handles the command line arguments and links in everything
   else from other libraries.

\c MakeUp subproject (also see \ref UserMakeUp):

 - \c main -- This desktop program displays a graphical user interface for editing configuration files. The code
   in this module essentially invokes the functionality provided by the wizard module in the \c SMILE project.

\c Docs subproject (also see \ref DevDocs):

 - \c templates -- This module includes some developer support data files, such as the license template to be included
   in every source file.
 - \c doxygen -- This module includes some data files to support the generation of reference documentation from the
   project source code through the Doxygen utility.
 - \c doxstyle -- This console application can be invoked from the Qt Creator code editor to help streamline
   Doxygen documentation blocks, as explained in \ref DevCodingStyleFormat. The code in this module depends only on the
   \c fundamentals module in the \c SMILE subproject; it is included here so that it would be easily available to
   any \c SKIRT developer.


\section DevStructSimItems Simulation items

A complete simulation is represented in \c SKIRT at run-time as a hierarchy of objects (instances of various C++
classes) called <em>simulation items</em>. The following diagram presents a simple example run-time simulation
hierarchy (a connection starting with a diamond loosely means "A owns B"):

\dot
digraph runtime {
    rankdir=LR;
    node [shape=rect, fontname=Helvetica, fontsize=10];
    edge [dir=back arrowtail=ediamond];

    MonteCarloSimulation [label="MonteCarloSimulation" URL="\ref MonteCarloSimulation"];
      ConsoleLog [label="ConsoleLog" URL="\ref ConsoleLog"];
      FilePaths [label="FilePaths" URL="\ref FilePaths"];
      ParallelFactory [label="ParallelFactory" URL="\ref ParallelFactory"];
      Random [label="Random" URL="\ref Random"];
      ExtragalacticUnits [label="ExtragalacticUnits" URL="\ref ExtragalacticUnits"];
      SourceSystem [label="SourceSystem" URL="\ref SourceSystem"];
        ParticleSource [label="ParticleSource" URL="\ref ParticleSource"];
      MediumSystem [label="MediumSystem" URL="\ref MediumSystem"];
        ParticleMedium [label="ParticleMedium" URL="\ref ParticleMedium"];
          ThemisDustMix [label="ThemisDustMix" URL="\ref ThemisDustMix"];
        PolicyTreeSpatialGrid [label="PolicyTreeSpatialGrid" URL="\ref PolicyTreeSpatialGrid"];
      InstrumentSystem [label="InstrumentSystem" URL="\ref InstrumentSystem"];
        SEDInstrument_1 [label="SEDInstrument_1" URL="\ref SEDInstrument"];
        SEDInstrument_2 [label="SEDInstrument_2" URL="\ref SEDInstrument"];
      ProbeSystem [label="ProbeSystem" URL="\ref ProbeSystem"];
        SpatialGridConvergenceProbe [label="SpatialGridConvergenceProbe" URL="\ref SpatialGridConvergenceProbe"];

    MonteCarloSimulation -> ConsoleLog;
    MonteCarloSimulation -> FilePaths;
    MonteCarloSimulation -> ParallelFactory;
    MonteCarloSimulation -> Random;
    MonteCarloSimulation -> ExtragalacticUnits;
    MonteCarloSimulation -> SourceSystem;
      SourceSystem -> ParticleSource;
    MonteCarloSimulation -> MediumSystem;
      MediumSystem -> ParticleMedium;
        ParticleMedium -> ThemisDustMix;
      MediumSystem -> PolicyTreeSpatialGrid;
    MonteCarloSimulation -> InstrumentSystem;
      InstrumentSystem -> SEDInstrument_1;
      InstrumentSystem -> SEDInstrument_2;
    MonteCarloSimulation -> ProbeSystem;
      ProbeSystem -> SpatialGridConvergenceProbe;
}
\enddot

A run-time simulation hierarchy includes the following information:
  - the configuration of the simulation, including all parameters, represented by a combination of:
      - the structural makeup of the hierarchy
      - the selection of the type of simulation items actually included (e.g. PolicyTreeSpatialGrid rather than
        another type of spatial grid)
      - the properties of the various simulation items (not shown in the diagram)
  - the functionality needed to perform the simulation and output the results, embodied in the code associated with
    each specific simulation item class
  - the run-time data needed and/or generated while performing the simulation, represented by data members in
    each of the simulation items.

Multiple run-time simulation hierarchies can co-exist and are independent of each other. There is no shared or global
data, except when accessing truly global resources (such as the console) which are protected by appropriate locking
mechanisms.

The run-time simulation hierarchy mimics the contents of the corresponding ski file (see \ref UserParamFileStruct) with
the exception of the ConsoleLog, FilePaths, and ParallelFactory objects, which are configured based on the
command line arguments passed to \c SKIRT.


\section DevStructSimClasses Simulation item classes

A simulation item is an instance of a C++ class that inherits the SimulationItem class defined in the
\c SKIRT \c core module. The following diagram presents a tiny portion of the inheritance tree:

\dot
digraph inheritance {
    rankdir=BT;
    node [shape=rect, fontname=Helvetica, fontsize=10];
    edge [arrowhead=empty];

    SimulationItem [label="SimulationItem" URL="\ref SimulationItem"];
      Simulation [label="Simulation" URL="\ref Simulation"];
        MonteCarloSimulation [label="MonteCarloSimulation" URL="\ref MonteCarloSimulation"];
      Source [label="Source" URL="\ref Source"];
        ParticleSource [label="ParticleSource" URL="\ref ParticleSource"];
        OtherSources [label="..."];
      MaterialMix [label="MaterialMix" URL="\ref MaterialMix"];
        ThemisDustMix [label="ThemisDustMix" URL="\ref ThemisDustMix"];
        OtherMixes [label="..."];
      Log [label="Log" URL="\ref Log"];
        ConsoleLog [label="ConsoleLog" URL="\ref ConsoleLog"];
        FileLog [label="FileLog" URL="\ref FileLog"];

    Simulation -> SimulationItem;
      MonteCarloSimulation -> Simulation;
    Source -> SimulationItem;
      ParticleSource -> Source;
      OtherSources -> Source;
    MaterialMix -> SimulationItem;
      ThemisDustMix -> MaterialMix;
      OtherMixes -> MaterialMix;
    Log -> SimulationItem;
        ConsoleLog -> Log;
        FileLog -> Log;
}
\enddot

The leaf nodes represent concrete simulation item classes. Instances of these classes can be part of a run-time
simulation hierarchy. The non-leaf nodes represent abstract simulation item classes that can't be instantiated.
As a result, simulation items form a compile-time class hierarchy through inheritance (with the SimulationItem class
at the top), and a run-time object hierarchy through pointers (with an instance of a Simulation subclass at the top).

The basic interface inherited from SimulationItem facilitates common functionality for working with simulation items.
For example, the SimulationItem::find() function allows locating a simulation item in a run-time simulation hierarchy
simply providing its class name. Also, the Simulation class cooperates with the SimulationItem interface to
setup and run a complete simulation.

Furthermore, SimulationItem subclasses must provide appropriate metadata for use by the \c SMILE library.
The \c SMILE capabilities then support various interfaces to simulation items, including:

 - Creating a simulation hierarchy based on user responses during an interactive Q&A session.
 - Saving or loading a simulation hierarchy to and from a parameter file (in XML format).
 - Generating a human-readable report summarizing the simulation parameters for a simulation hierarchy.

The \c SMILE code has no built-in knowledge about simulation item classes; it self-adjusts to the metadata provided in
SimulationItem subclasses. This means that:

 - All information about a simulation item is defined in a single place.
 - When adding a new type of simulation item, there is no need to add code for each of the interfaces separately;
   the same metadata is used by all interfaces.
 - New interfaces (such as a graphical user interface) can be added without changing any of the
   existing code, and without duplicating information about specific simulation item classes.

For more details on adding the appropriate information to simulation item classes, see \ref DevItems.

*/
