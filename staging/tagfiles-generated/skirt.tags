<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.5" doxygen_gitid="2f6875a5ca481a69a6f32650c77a667f87d25e88">
  <compound kind="file">
    <name>ItemInfo.hpp</name>
    <path>/Users/pcamps/SKIRT/SKIRT9/git/SMILE/schema/</path>
    <filename>_item_info_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_DEFAULT_VALUE</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>ad60f728e05b0955fcfc50ab683f13515</anchor>
      <arglist>(propname, valexpr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_DISPLAYED_IF</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>afe4a93890cde507804d003f3a20829da</anchor>
      <arglist>(propname, boolexpr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_INSERT</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a792ec0b72cf57cca1c96b499f51bebc8</anchor>
      <arglist>(propname, valexpr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_MAX_VALUE</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a992b91490aa1fe14ab31061f1a901e67</anchor>
      <arglist>(propname, valstring)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_MIN_VALUE</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a6224a23cd6f74c7fa516ed9f2d943743</anchor>
      <arglist>(propname, valstring)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_QUANTITY</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a3661b2ebf0c69ad034fdb5cfc2496717</anchor>
      <arglist>(propname, quantityname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_RELEVANT_IF</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>ae43f8f6650342f971eefa0eb2e5600f1</anchor>
      <arglist>(propname, boolexpr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_REQUIRED_IF</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>aa15db146cf24fcf055968de89a11e8a9</anchor>
      <arglist>(propname, boolexpr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_SUB_PROPERTIES_HERE</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>ac087161e0facad74b4feadea743988cd</anchor>
      <arglist>(itemtype)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_TYPE_ALLOWED_IF</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>af566d914b6038b17a00fefb452d16626</anchor>
      <arglist>(itemtype, boolexpr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_TYPE_DISPLAYED_IF</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a8f58a960e2e163038a1f478b4e8ee39c</anchor>
      <arglist>(itemtype, boolexpr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATTRIBUTE_TYPE_INSERT</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a9ed8e4d53c60035fd83f6919366b2f80</anchor>
      <arglist>(itemtype, valexpr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENUM_DEF</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a7d97b701d9331cad3a7d01b3cfe7a116</anchor>
      <arglist>(enumtype,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENUM_END</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a04242822bd628f9d5f36b2120b678a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENUM_VAL</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a87c4dc4672abc2af8b71853b11acdd21</anchor>
      <arglist>(enumtype, enumvalue, title)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ITEM_ABSTRACT</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>afdcc38238ab60f3c9720c31e1d543bba</anchor>
      <arglist>(itemtype, basetype, title)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ITEM_CONCRETE</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a68aa42eadff858b3eed49f0ac292f4b0</anchor>
      <arglist>(itemtype, basetype, title)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ITEM_END</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>ab11ff9a6c7f02353c12ce3fa6ca0b455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROPERTY_BOOL</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a712bf30643a584ad994c4ced7e7003e1</anchor>
      <arglist>(propname, title)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROPERTY_DOUBLE</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>ac5ea25249804a593d63542b99277f995</anchor>
      <arglist>(propname, title)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROPERTY_DOUBLE_LIST</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>aaf379e9318f0504c03a0629be9980a60</anchor>
      <arglist>(propname, title)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROPERTY_ENUM</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>af4be05b6e38278b69919bd0aee6da859</anchor>
      <arglist>(propname, enumtype, title)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROPERTY_INT</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a42e42edc2a669a276d089c4298a14e0f</anchor>
      <arglist>(propname, title)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROPERTY_ITEM</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a77d124890cc8b4dbd4e7bff6818d07c8</anchor>
      <arglist>(propname, itemtype, title)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROPERTY_ITEM_LIST</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a4222d93a453900c703f50fb3a5d25f61</anchor>
      <arglist>(propname, itemtype, title)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROPERTY_STRING</name>
      <anchorfile>_item_info_8hpp.html</anchorfile>
      <anchor>a2dd3cf8fe54bab95d4e43963c08f29d8</anchor>
      <arglist>(propname, title)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractDoublePropertyHandler</name>
    <filename>class_abstract_double_property_handler.html</filename>
    <base>PropertyHandler</base>
    <member kind="function">
      <type>bool</type>
      <name>isInRange</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a75d5d34e4a353243f29e312ab73c7778</anchor>
      <arglist>(const vector&lt; double &gt; &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInRange</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>ae7e32a8e379c60753dfbbae2edab3a1b</anchor>
      <arglist>(double value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidDouble</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a05428acc681c8d949825702878150359</anchor>
      <arglist>(string value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidDoubleList</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a0f13f82cd0a929235a7ef286f8c82bc7</anchor>
      <arglist>(string value) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a842d0c91ab41aee39f48c0b2159ad785</anchor>
      <arglist>(const PropertyHandler &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a70cc449cdf73913e21c3b1951baa6d2c</anchor>
      <arglist>(Item *target, const PropertyDef *property, const SchemaDef *schema, NameManager *nameMgr)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>quantity</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>acc7135cabc88b82b8dc4bc8b52517ba3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>rangeDescription</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>ae29da203ffa71420f2c55fc76ecc3cb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toDouble</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a6b8e7854c1292a9da66e0990dbc32929</anchor>
      <arglist>(string value) const</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; double &gt;</type>
      <name>toDoubleList</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a8b2590cbed16a5ebf8dc5d4269e6b056</anchor>
      <arglist>(string value) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>toString</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a103acdf49367857c9853da5fedc20794</anchor>
      <arglist>(double value) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>toString</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>ac602de174b927e4548958dc7f27611e9</anchor>
      <arglist>(vector&lt; double &gt; value) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>unitSystem</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a5958a0430b72d1636befe1757bd084fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>maxOpen</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a70d4f1a89bd81daa3bd8ded898b67836</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>maxValue</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a5847331535c276b50ad470ac7ee6ab9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>minOpen</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a3142dd09c58f9aaa58015881526ff75f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>minValue</name>
      <anchorfile>class_abstract_double_property_handler.html</anchorfile>
      <anchor>a2315ee6f7e445d33e8818f2128a0c9e8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractItemPropertyHandler</name>
    <filename>class_abstract_item_property_handler.html</filename>
    <base>PropertyHandler</base>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>allowedAndDisplayedDescendants</name>
      <anchorfile>class_abstract_item_property_handler.html</anchorfile>
      <anchor>a8c930f9839595cc5a1f45180d896a5c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>baseType</name>
      <anchorfile>class_abstract_item_property_handler.html</anchorfile>
      <anchor>a6758482e4e6a0b11eabc3909bd2173ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>defaultType</name>
      <anchorfile>class_abstract_item_property_handler.html</anchorfile>
      <anchor>af7fa18ff3e9c273e0fd27177bbe3410c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompound</name>
      <anchorfile>class_abstract_item_property_handler.html</anchorfile>
      <anchor>afbbe9d2a0c5043b5a7d27b7806a829ea</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidValue</name>
      <anchorfile>class_abstract_item_property_handler.html</anchorfile>
      <anchor>afde939a35b2b4f81d89a7cdd301916d3</anchor>
      <arglist>(string value) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_abstract_item_property_handler.html</anchorfile>
      <anchor>a842d0c91ab41aee39f48c0b2159ad785</anchor>
      <arglist>(const PropertyHandler &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_abstract_item_property_handler.html</anchorfile>
      <anchor>a70cc449cdf73913e21c3b1951baa6d2c</anchor>
      <arglist>(Item *target, const PropertyDef *property, const SchemaDef *schema, NameManager *nameMgr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdaptiveMeshGeometry</name>
    <filename>class_adaptive_mesh_geometry.html</filename>
    <base>MeshGeometry</base>
    <base>AdaptiveMeshInterface</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>AdaptiveMeshGeometry</name>
      <anchorfile>class_adaptive_mesh_geometry.html</anchorfile>
      <anchor>a96d7c0bcbbf7b1246780d262ad93a135</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AdaptiveMeshSnapshot *</type>
      <name>adaptiveMesh</name>
      <anchorfile>class_adaptive_mesh_geometry.html</anchorfile>
      <anchor>a0c63a61d8345857d86db6df17d7e6b63</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_adaptive_mesh_geometry.html</anchorfile>
      <anchor>a83c84e961c34ee6a20201467af7b9474</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdaptiveMeshInterface</name>
    <filename>class_adaptive_mesh_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdaptiveMeshInterface</name>
      <anchorfile>class_adaptive_mesh_interface.html</anchorfile>
      <anchor>a2bca4bc6c3f24e6064bb352d878ff9ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AdaptiveMeshSnapshot *</type>
      <name>adaptiveMesh</name>
      <anchorfile>class_adaptive_mesh_interface.html</anchorfile>
      <anchor>a608b396848858b47dda2ead875924337</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AdaptiveMeshInterface</name>
      <anchorfile>class_adaptive_mesh_interface.html</anchorfile>
      <anchor>aa66a6d353114d74c43dbdab614bb3042</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdaptiveMeshMedium</name>
    <filename>class_adaptive_mesh_medium.html</filename>
    <base>MeshMedium</base>
    <base>AdaptiveMeshInterface</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>AdaptiveMeshMedium</name>
      <anchorfile>class_adaptive_mesh_medium.html</anchorfile>
      <anchor>a8fcb734a2701dcc1651db5dcb85a4313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AdaptiveMeshSnapshot *</type>
      <name>adaptiveMesh</name>
      <anchorfile>class_adaptive_mesh_medium.html</anchorfile>
      <anchor>aa5080d2a47719d83e229d244e95f7391</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_adaptive_mesh_medium.html</anchorfile>
      <anchor>aaac6fd908b2aedb48380a41ca0a464ae</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdaptiveMeshSnapshot</name>
    <filename>class_adaptive_mesh_snapshot.html</filename>
    <base>Snapshot</base>
    <member kind="function">
      <type></type>
      <name>AdaptiveMeshSnapshot</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>af4cda7513763cd9b8c18cb8910910c6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AdaptiveMeshSnapshot</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a60e2727fef35d6188cb0777c1e239f02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNeighbors</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>abd97fa6c7789cf7089a713f0b272b8fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cellIndex</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a7b97b46b27fed76583be9157c340a9a6</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; PathSegmentGenerator &gt;</type>
      <name>createPathSegmentGenerator</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>ae6bdcf89dd734ff203571f72750c0801</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>af069cadb2f594926404af9bd807c964e</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a7640d9d46ec3243d4abd963735ca881a</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a477ec425ec4fb85c4acc6d8f3f6a31f8</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>extent</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>af9ab87c6c8cd0c33107c45c9da89244d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>extent</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a8ba4fda87f487599247a1565d401173a</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a98b7d2562ad5be4dc1850683331bdff9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a9dd022e749fc6bd5e213a3326bfce7f9</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntities</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>aec92f40eadec540ae66e4f23258cdf73</anchor>
      <arglist>(EntityCollection &amp;entities, Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntities</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a2907eb010fcde23d5bce065294c917fd</anchor>
      <arglist>(EntityCollection &amp;entities, Position bfr, Direction bfk) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a55a4d14d51fd6181b23729b309a85d27</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numEntities</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a4b92b1b3b37a26922afd3d822a276765</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>position</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a5875257244ab64190e3cc2cb5c616e9e</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAndClose</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>ac6c463ad254ac575a45fc2eba3a4fb4e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtent</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a31966d941e16d3a4a5f7a841f1508fa4</anchor>
      <arglist>(const Box &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a805b94cb5e33f76e99f933dc2cdc3cf7</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>nearestEntity</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>a4effaa9b185299f84ad423be30946fae</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Array &amp;</type>
      <name>properties</name>
      <anchorfile>class_adaptive_mesh_snapshot.html</anchorfile>
      <anchor>ac870dac1aad84742ff6645d1566b241a</anchor>
      <arglist>(int m) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdaptiveMeshSource</name>
    <filename>class_adaptive_mesh_source.html</filename>
    <base>MeshSource</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>AdaptiveMeshSource</name>
      <anchorfile>class_adaptive_mesh_source.html</anchorfile>
      <anchor>a8bca1397f0a1779fbc1cdeb835c052a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_adaptive_mesh_source.html</anchorfile>
      <anchor>a356903e2100255aa7d51f8ff90e224d8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdaptiveMeshSpatialGrid</name>
    <filename>class_adaptive_mesh_spatial_grid.html</filename>
    <base>SpatialGrid</base>
    <base>DensityInCellInterface</base>
    <member kind="function">
      <type>Box</type>
      <name>boundingBox</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>ac144d0df20e79efb70dac1bd638546d0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cellIndex</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>a36c43eba1ea3816c5b450055506605d0</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>centralPositionInCell</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>ad1a8acb061db3c4bd6f6cab0ac13d193</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; PathSegmentGenerator &gt;</type>
      <name>createPathSegmentGenerator</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>a05bce08645f0a10d669e8a53aa0f7ba0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>af206f36211cbf474d5340e64beb00040</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>a08e72db04f75b85eae7797f5d2f6e183</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numberDensity</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>a6be11989c663e29aedd6dccbf28937a3</anchor>
      <arglist>(int h, int m) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numCells</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>a402e4aa15723efc8a595ed156ba28586</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>randomPositionInCell</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>a6a89f3183819b18aca5027465350867b</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>ad34912aff92259a229c490712aec7272</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>ab295e7b512b5b142bd3ab765bf99b7d0</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AdaptiveMeshSpatialGrid</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>afa3d020c62d392239195274d8def8cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>offersInterface</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>acc0b13eaf45fc0b4438bb9e40b66ae54</anchor>
      <arglist>(const std::type_info &amp;interfaceTypeInfo) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xy</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>a4a4808f8e08d0088ead46a862a9ae5f9</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xyz</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>a30569dd9d7a9d43b91fa9e5629d4bcb5</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xz</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>a6a551f84d36d667799725670c45a3b98</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_yz</name>
      <anchorfile>class_adaptive_mesh_spatial_grid.html</anchorfile>
      <anchor>a69e381347df548162a7cbe56d33418c4</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AllCellsLibrary</name>
    <filename>class_all_cells_library.html</filename>
    <base>SpatialCellLibrary</base>
    <member kind="function">
      <type></type>
      <name>AllCellsLibrary</name>
      <anchorfile>class_all_cells_library.html</anchorfile>
      <anchor>a49c89018274aefbf79f62a20e6dff4c2</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AllCellsLibrary</name>
      <anchorfile>class_all_cells_library.html</anchorfile>
      <anchor>addb04cdf0740ae550b80b0b0d42256df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>mapping</name>
      <anchorfile>class_all_cells_library.html</anchorfile>
      <anchor>a22dd2e67d73b10cb3093dc161c10326c</anchor>
      <arglist>(const Array &amp;bv) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numEntries</name>
      <anchorfile>class_all_cells_library.html</anchorfile>
      <anchor>a4b3f4c9312e05a36eb361cb32550185a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AllSkyInstrument</name>
    <filename>class_all_sky_instrument.html</filename>
    <base>Instrument</base>
    <member kind="function">
      <type>Direction</type>
      <name>bfkobs</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>afefc5b130df9105c82ca0300a020b153</anchor>
      <arglist>(const Position &amp;bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>bfky</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>aa7ebdcc828f18e661bd9fa2ec5efd8f2</anchor>
      <arglist>(const Position &amp;bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossX</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a1ea5b0c74d2cef47ec636d20b49df9bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossY</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>af60a6c5c2c6bd207e043f24b57443fb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossZ</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a704b189795cd3d4b60a9684defe41518</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>determineSameObserverAsPreceding</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a462961ca7e9a754788bd87cf0d07e96e</anchor>
      <arglist>(const Instrument *precedingInstrument) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsY</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a5112f5aca1b1e39bc6e470ed51ca4837</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>observerX</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>af6ec82455aecd54e942b8898582328ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>observerY</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a5f1f41beca8f9e927294dcb7c2eb72d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>observerZ</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>ade3133735ba8ec91bd13ab39ae4f5c58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AllSkyProjection *</type>
      <name>projection</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a3282cdce852413e65fd0ab0ed2868ca4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radius</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a736f751176bda1f365210d322620e08d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upX</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a274815c5f249871559aad61fd2be8b4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upY</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a11bbc3c18fdc0c74289e2bb0c49d0f54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upZ</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a978234ce76b15675ba3e62539fc11330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AllSkyInstrument</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a369a64763e531094169ed3f6024f38e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>detect</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a5965fc9f0c87fae44d27fda6eea60c3b</anchor>
      <arglist>(PhotonPacket *pp) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_all_sky_instrument.html</anchorfile>
      <anchor>a4b3b2e9eb093ae8c297261aff41ea5c5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AllSkyProjection</name>
    <filename>class_all_sky_projection.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fromGlobeToRectangle</name>
      <anchorfile>class_all_sky_projection.html</anchorfile>
      <anchor>ad66bee284f99a9fbaeffa45f630319e6</anchor>
      <arglist>(double longitude, double latitude, double &amp;x, double &amp;y) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>fromRectangleToGlobe</name>
      <anchorfile>class_all_sky_projection.html</anchorfile>
      <anchor>a935428eb6a13b2c6103fe651d60c09ce</anchor>
      <arglist>(double x, double y, double &amp;longitude, double &amp;latitude) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromRectangleToSphere</name>
      <anchorfile>class_all_sky_projection.html</anchorfile>
      <anchor>a766721a7491ad81d584548cfbe8412d2</anchor>
      <arglist>(double x, double y, double &amp;inclination, double &amp;azimuth) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromSphereToRectangle</name>
      <anchorfile>class_all_sky_projection.html</anchorfile>
      <anchor>a11e2ab7cb41d77da0b8a2214b3ccc6cc</anchor>
      <arglist>(double inclination, double azimuth, double &amp;x, double &amp;y) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AllSkyProjection</name>
      <anchorfile>class_all_sky_projection.html</anchorfile>
      <anchor>a9c0072a16dbb37f357b60fb7578df548</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AllSkyProjectionForm</name>
    <filename>class_all_sky_projection_form.html</filename>
    <base>GenericForm</base>
    <member kind="function">
      <type>double</type>
      <name>crossX</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>ad0591fc42ef0474b27a3e0deca787a6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossY</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>a80a886e1163819aa41c209a1c326cada</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossZ</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>a6c487a38912949c22db0ad7292b04b33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsY</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>a7e361230306154bf6954131e0ec598c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>observerX</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>a968308c967ea7b0ddc4b12dee22595ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>observerY</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>a049412b36bbc1f49b4e3b7a0fcc99e88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>observerZ</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>ad960102352333c745c477871b62df908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AllSkyProjection *</type>
      <name>projection</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>ab36bd0a4bdbe33ebe2f17ddb9947d37b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upX</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>ab90c5b7f9134579c7c5afb9360376f78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upY</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>acbbc10948fc0f0b39d25065b9e268218</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upZ</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>a596934c547c274a8ef455f4f1450b01a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>af5ee36d6ac135279603d709960f925d9</anchor>
      <arglist>(const ProbeFormBridge *bridge) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AllSkyProjectionForm</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>acf9c6f27e666dc9848f8df9c57e81ff0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_all_sky_projection_form.html</anchorfile>
      <anchor>a0a608e009c6826d88376961c40a0d671</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnchoredMesh</name>
    <filename>class_anchored_mesh.html</filename>
    <base>Mesh</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnchoredMesh</name>
      <anchorfile>class_anchored_mesh.html</anchorfile>
      <anchor>aeec907396235bae0f74f45ac083c1f5d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AngularDistribution</name>
    <filename>class_angular_distribution.html</filename>
    <base>SimulationItem</base>
    <base>AngularDistributionInterface</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dimension</name>
      <anchorfile>class_angular_distribution.html</anchorfile>
      <anchor>ade51e71dee209599168400caf427346f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Direction</type>
      <name>generateDirection</name>
      <anchorfile>class_angular_distribution.html</anchorfile>
      <anchor>a6ce3b5f8a6a2c6766a7d74a37df373e3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AngularDistribution</name>
      <anchorfile>class_angular_distribution.html</anchorfile>
      <anchor>a7416dbf45e531c0d202c8b1aa4f46393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Random *</type>
      <name>random</name>
      <anchorfile>class_angular_distribution.html</anchorfile>
      <anchor>ac279190c0f6f81507bf29b73a799f557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_angular_distribution.html</anchorfile>
      <anchor>a37ccd6f58ba478295b2388e9a523be9f</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AngularDistributionInterface</name>
    <filename>class_angular_distribution_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AngularDistributionInterface</name>
      <anchorfile>class_angular_distribution_interface.html</anchorfile>
      <anchor>ad69543eaf6cf28a35fc12461b910b034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>probabilityForDirection</name>
      <anchorfile>class_angular_distribution_interface.html</anchorfile>
      <anchor>ae1819b9933c4b5bceee5c514a5dc55c7</anchor>
      <arglist>(Direction bfk) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AngularDistributionInterface</name>
      <anchorfile>class_angular_distribution_interface.html</anchorfile>
      <anchor>a62289bf12d66ea240d31c2ff6ef4e936</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array</name>
    <filename>class_array.html</filename>
  </compound>
  <compound kind="class">
    <name>ArrayTable</name>
    <filename>class_array_table.html</filename>
    <templarg>size_t N</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayTable</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>aa42c22d2f2766baa1957ab77d3f24934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayTable</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>ae8b0c9e1bbdd875caa8a78bb4c5a940c</anchor>
      <arglist>(Sizes... sizes)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>aedf33ecb96354cf4b13200754a5f6a02</anchor>
      <arglist>(Indices... indices)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator()</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>a381aae3096bc24da77269727c726c892</anchor>
      <arglist>(Indices... indices)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>ad0312dd727fee2088d28724a81592cd8</anchor>
      <arglist>(Indices... indices) const</arglist>
    </member>
    <member kind="function">
      <type>const Array &amp;</type>
      <name>operator()</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>ad28fe7ca1271588ab0282f10d3d89f92</anchor>
      <arglist>(Indices... indices) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator[]</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>a4c11f86876f58478dbc863ae489bc58f</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Array &amp;</type>
      <name>operator[]</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>a88558c9140eb1ad71bed1d43382c0413</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>a001bd5b818b2a81801b43861794d5e70</anchor>
      <arglist>(Sizes... sizes)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>rowSize</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>a9b2cb713b27e481915990f4a2e27c355</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToZero</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>a9faa311f2bf99d33220141c4aecd0505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>aec0dbdb9e4cc34708f4a8cbd5df59ff0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_array_table.html</anchorfile>
      <anchor>a23ecaf7a76d32c1830ad570d66a621ce</anchor>
      <arglist>(size_t dim) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AtPositionsForm</name>
    <filename>class_at_positions_form.html</filename>
    <base>GenericForm</base>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_at_positions_form.html</anchorfile>
      <anchor>a2f74b9e40873d4d20ff0db514046f065</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>useColumns</name>
      <anchorfile>class_at_positions_form.html</anchorfile>
      <anchor>ab431e385c9c997760fb58663c88b2e0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_at_positions_form.html</anchorfile>
      <anchor>aa44affbda49213ed3efbd818d595a216</anchor>
      <arglist>(const ProbeFormBridge *bridge) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AtPositionsForm</name>
      <anchorfile>class_at_positions_form.html</anchorfile>
      <anchor>af826416a73b2f7a05cb0d8c43f14d5e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AxAngularDistribution</name>
    <filename>class_ax_angular_distribution.html</filename>
    <base>AngularDistribution</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_ax_angular_distribution.html</anchorfile>
      <anchor>a8c3301ca2049c71d54c91c9d0186ff8e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>generateDirection</name>
      <anchorfile>class_ax_angular_distribution.html</anchorfile>
      <anchor>a917189da7b65f4927e765c8fe8f7a0d2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>generateInclinationCosine</name>
      <anchorfile>class_ax_angular_distribution.html</anchorfile>
      <anchor>a8aeeabdb3266ce6b039645b1d03036d4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probabilityForDirection</name>
      <anchorfile>class_ax_angular_distribution.html</anchorfile>
      <anchor>a58aa6bb7a1cc36ebca799759ccab17e2</anchor>
      <arglist>(Direction bfk) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>probabilityForInclinationCosine</name>
      <anchorfile>class_ax_angular_distribution.html</anchorfile>
      <anchor>a4d05139db36f64bb31eeed61afaea242</anchor>
      <arglist>(double costheta) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>symmetryX</name>
      <anchorfile>class_ax_angular_distribution.html</anchorfile>
      <anchor>a2dbdacd92666a884f94ba92c485ee23d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>symmetryY</name>
      <anchorfile>class_ax_angular_distribution.html</anchorfile>
      <anchor>a948096459c83d797a41917dc7baacedb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>symmetryZ</name>
      <anchorfile>class_ax_angular_distribution.html</anchorfile>
      <anchor>ac7604c76853ef091d8318d792061689c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AxAngularDistribution</name>
      <anchorfile>class_ax_angular_distribution.html</anchorfile>
      <anchor>ace8c526173427f4abf28568b68528e4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_ax_angular_distribution.html</anchorfile>
      <anchor>ab35acfad30e988a4427dd286c74f3703</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AxGeometry</name>
    <filename>class_ax_geometry.html</filename>
    <base>Geometry</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>density</name>
      <anchorfile>class_ax_geometry.html</anchorfile>
      <anchor>a7503b8ab11e0d82f09e037fd866165c0</anchor>
      <arglist>(double R, double z) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_ax_geometry.html</anchorfile>
      <anchor>a3025de7bb80a1343a1eed1735588e9c9</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_ax_geometry.html</anchorfile>
      <anchor>ac638060de62e765988dec0d0c2d2647c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>SigmaR</name>
      <anchorfile>class_ax_geometry.html</anchorfile>
      <anchor>a163de245a207137ba6e61ef775ce98d0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_ax_geometry.html</anchorfile>
      <anchor>a662aebeff8dd25746ee53fb3a427ea92</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_ax_geometry.html</anchorfile>
      <anchor>a9bcc3a789a58128f95ebc5e2a2a2bec2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AxGeometry</name>
      <anchorfile>class_ax_geometry.html</anchorfile>
      <anchor>a3cfee39a1b1b0e0e86878e3ff16c44c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AxisMaterialNormalization</name>
    <filename>class_axis_material_normalization.html</filename>
    <base>MaterialNormalization</base>
    <member kind="enumeration">
      <type></type>
      <name>Axis</name>
      <anchorfile>class_axis_material_normalization.html</anchorfile>
      <anchor>a57c64c42a261aa507bd5173ceff189db</anchor>
      <arglist></arglist>
      <enumvalue file="class_axis_material_normalization.html" anchor="a57c64c42a261aa507bd5173ceff189dba02129bb861061d1a052c592e2dc6b383">X</enumvalue>
      <enumvalue file="class_axis_material_normalization.html" anchor="a57c64c42a261aa507bd5173ceff189dba57cec4137b614c87cb4e24a3d003a3e0">Y</enumvalue>
      <enumvalue file="class_axis_material_normalization.html" anchor="a57c64c42a261aa507bd5173ceff189dba21c2e59531c8710156d34a3c30ac81d5">Z</enumvalue>
    </member>
    <member kind="function">
      <type>Axis</type>
      <name>axis</name>
      <anchorfile>class_axis_material_normalization.html</anchorfile>
      <anchor>a8dadd756c6538ed032a796caf487dd59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AxisMaterialNormalization</name>
      <anchorfile>class_axis_material_normalization.html</anchorfile>
      <anchor>a7c8d6287e2e58b4d6c1a8c05fff8e83b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>geometryColumnDensity</name>
      <anchorfile>class_axis_material_normalization.html</anchorfile>
      <anchor>a75983d7713c0cea654b3d0989acf15b0</anchor>
      <arglist>(const Geometry *geom) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Band</name>
    <filename>class_band.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>double</type>
      <name>effectiveWidth</name>
      <anchorfile>class_band.html</anchorfile>
      <anchor>af2ef275d571ff3d15ac1cbb3cecd34ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>meanSpecificLuminosity</name>
      <anchorfile>class_band.html</anchorfile>
      <anchor>aec9dc7f74ddb47745115f4e031cff6b8</anchor>
      <arglist>(const Array &amp;lambdav, const Array &amp;pv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pivotWavelength</name>
      <anchorfile>class_band.html</anchorfile>
      <anchor>a50d7b801a63923954e7372175fdb7bf8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>transmission</name>
      <anchorfile>class_band.html</anchorfile>
      <anchor>a014fb5e82bf6ebcac3f1558518772fbb</anchor>
      <arglist>(double wavelength) const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_band.html</anchorfile>
      <anchor>a566f293c3d34343c2dca50909791b1a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Band</name>
      <anchorfile>class_band.html</anchorfile>
      <anchor>ae745174ff51e9b80f7047b9c9d535298</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual size_t</type>
      <name>dataSize</name>
      <anchorfile>class_band.html</anchorfile>
      <anchor>a2385cb98e548c7b48947bb92a3d3c118</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_band.html</anchorfile>
      <anchor>a512ce2b0a4a396ccb4649b2d9efbbe6d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const double *</type>
      <name>transmissionData</name>
      <anchorfile>class_band.html</anchorfile>
      <anchor>aae906f335dd4d7a3695b8038e1dc6dc8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const double *</type>
      <name>wavelengthData</name>
      <anchorfile>class_band.html</anchorfile>
      <anchor>a531daa2e1216669b959dd37b7e45fe21</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BandLuminosityNormalization</name>
    <filename>class_band_luminosity_normalization.html</filename>
    <base>LuminosityNormalization</base>
    <member kind="enumeration">
      <type></type>
      <name>UnitStyle</name>
      <anchorfile>class_band_luminosity_normalization.html</anchorfile>
      <anchor>aef2795c4bbe63d758aca857ad9f10c3d</anchor>
      <arglist></arglist>
      <enumvalue file="class_band_luminosity_normalization.html" anchor="aef2795c4bbe63d758aca857ad9f10c3da950aec12e25d8d406c5664cf8f5bbaa4">neutralmonluminosity</enumvalue>
      <enumvalue file="class_band_luminosity_normalization.html" anchor="aef2795c4bbe63d758aca857ad9f10c3da953f5fed0ab133102d96de07e9cc9554">wavelengthmonluminosity</enumvalue>
      <enumvalue file="class_band_luminosity_normalization.html" anchor="aef2795c4bbe63d758aca857ad9f10c3daa32dc40840f7a5f57956d1fe29dd8b85">frequencymonluminosity</enumvalue>
      <enumvalue file="class_band_luminosity_normalization.html" anchor="aef2795c4bbe63d758aca857ad9f10c3da8e94c4281659d40685914cc28fa22fbb">energymonluminosity</enumvalue>
    </member>
    <member kind="function">
      <type>Band *</type>
      <name>band</name>
      <anchorfile>class_band_luminosity_normalization.html</anchorfile>
      <anchor>a64515bda6405bf63ac14b3c0ea11e797</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>luminosityForSED</name>
      <anchorfile>class_band_luminosity_normalization.html</anchorfile>
      <anchor>afe4519f154f7a2dd8e6d4ebcc09c2f6b</anchor>
      <arglist>(SED *sed) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_band_luminosity_normalization.html</anchorfile>
      <anchor>ade6b20e681c2a68fe909fb3a29c6715d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UnitStyle</type>
      <name>unitStyle</name>
      <anchorfile>class_band_luminosity_normalization.html</anchorfile>
      <anchor>ac81f7a29bcd8239185516ce5a24bb8ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BandLuminosityNormalization</name>
      <anchorfile>class_band_luminosity_normalization.html</anchorfile>
      <anchor>aaffdfb1f3691503b62407165fd063284</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BandWavelengthGrid</name>
    <filename>class_band_wavelength_grid.html</filename>
    <base>WavelengthGrid</base>
    <member kind="function">
      <type>const Band *</type>
      <name>band</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>a33a7164278848ee5be7bc589602eaf0f</anchor>
      <arglist>(int ell) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bin</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>a52bb6bb79130d718097ff19a8ca3adde</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; int &gt;</type>
      <name>bins</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>a00ce3b27bc77a3afcb3501e60b67bfec</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>effectiveWidth</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>a5ff36a73cbc0a6fcb2f9634b75c93cb1</anchor>
      <arglist>(int ell) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>leftBorder</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>a8246441b3e4fa387e14306fb47fb30f7</anchor>
      <arglist>(int ell) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numBins</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>a32a2269c5401d0371562f3f36d7cd521</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rightBorder</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>ac7e58a4fa6976e14492206c26488a452</anchor>
      <arglist>(int ell) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>transmission</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>a7451620a8651be00c9bbe7bdee5a6d41</anchor>
      <arglist>(int ell, double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelength</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>a6cf7f9f95dccaf6035fe9ae67e57911f</anchor>
      <arglist>(int ell) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BandWavelengthGrid</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>a656d916504a89d51e8a6ab42665802cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual vector&lt; Band * &gt;</type>
      <name>bandList</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>a3ea9020d6d3ae9268a60ad7cf23d8432</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_band_wavelength_grid.html</anchorfile>
      <anchor>a03c13f7e60c38118cf1926cac0343462</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicChoiceWizardPane</name>
    <filename>class_basic_choice_wizard_pane.html</filename>
    <member kind="slot">
      <type>void</type>
      <name>selectLibrary</name>
      <anchorfile>class_basic_choice_wizard_pane.html</anchorfile>
      <anchor>abe114381e33d58aabf254b5cd66eaf2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>setBasicChoice</name>
      <anchorfile>class_basic_choice_wizard_pane.html</anchorfile>
      <anchor>a5e6a4f2883277911e1db47af0092bc61</anchor>
      <arglist>(int buttonIndex)</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>setDefaultLibrary</name>
      <anchorfile>class_basic_choice_wizard_pane.html</anchorfile>
      <anchor>a3a44189aa0ce9f81c21c9feb4fb08e38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>basicChoiceWasChanged</name>
      <anchorfile>class_basic_choice_wizard_pane.html</anchorfile>
      <anchor>a2bcd9f719a16c7305dff427fdcbd80e8</anchor>
      <arglist>(bool openExisting, string libraryPath, string schemaName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicChoiceWizardPane</name>
      <anchorfile>class_basic_choice_wizard_pane.html</anchorfile>
      <anchor>a21f5ecf4080c380c0cd50f18f7e81f2f</anchor>
      <arglist>(bool initialOpenExisting, string initialSchemaName, bool dirty, QObject *target)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findDefaultLibraryPath</name>
      <anchorfile>class_basic_choice_wizard_pane.html</anchorfile>
      <anchor>aa6ab846f301cb8bfddeccb366f9c8286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadPersistentLibraryPath</name>
      <anchorfile>class_basic_choice_wizard_pane.html</anchorfile>
      <anchor>a7a8a71523952fcdefb7fad35f8464a1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadSchemaInfo</name>
      <anchorfile>class_basic_choice_wizard_pane.html</anchorfile>
      <anchor>a9ad0ee7d8f78d812798aeab01811d5c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storePersistentLibraryPath</name>
      <anchorfile>class_basic_choice_wizard_pane.html</anchorfile>
      <anchor>a0b6bf7677580c0a61d210a5b3f752ccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateChoiceInterface</name>
      <anchorfile>class_basic_choice_wizard_pane.html</anchorfile>
      <anchor>ab4aabccc956316838960ac89b7c949b9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Basics</name>
    <filename>class_basics.html</filename>
  </compound>
  <compound kind="class">
    <name>BinTreeNode</name>
    <filename>class_bin_tree_node.html</filename>
    <base>TreeNode</base>
    <member kind="function">
      <type>void</type>
      <name>addNeighbors</name>
      <anchorfile>class_bin_tree_node.html</anchorfile>
      <anchor>a74bcfc960cd29aa591579c51f35fca89</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>TreeNode *</type>
      <name>child</name>
      <anchorfile>class_bin_tree_node.html</anchorfile>
      <anchor>af1955aecb0aee45b37fd8753f088e81c</anchor>
      <arglist>(Vec r) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createChildren</name>
      <anchorfile>class_bin_tree_node.html</anchorfile>
      <anchor>a601336fe183a49a369adb48915c93115</anchor>
      <arglist>(int id) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeNode</name>
      <anchorfile>class_bin_tree_node.html</anchorfile>
      <anchor>a88b20de8b88cc626a5b4423247e675f4</anchor>
      <arglist>(const Box &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeNode</name>
      <anchorfile>class_bin_tree_node.html</anchorfile>
      <anchor>af6d3c6ca610a38ac0d31867ffc521c96</anchor>
      <arglist>(TreeNode *parent, int id, const Box &amp;extent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BlackBodySED</name>
    <filename>class_black_body_s_e_d.html</filename>
    <base>ContSED</base>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_black_body_s_e_d.html</anchorfile>
      <anchor>ac37b831460f614cbed4140f6ceed5f96</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>integratedLuminosity</name>
      <anchorfile>class_black_body_s_e_d.html</anchorfile>
      <anchor>af4394140afc7ccf9ec069fe824c2b286</anchor>
      <arglist>(const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_black_body_s_e_d.html</anchorfile>
      <anchor>ab5e41d4f4615b67d2711d173adaa5f83</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_black_body_s_e_d.html</anchorfile>
      <anchor>a9508038cf54b729548924341e0e53780</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>specificLuminosityArray</name>
      <anchorfile>class_black_body_s_e_d.html</anchorfile>
      <anchor>ac56aa485543569d30d05227f6e1deac2</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>temperature</name>
      <anchorfile>class_black_body_s_e_d.html</anchorfile>
      <anchor>a3799a37aa4decd6c7e2b9bf122c1d24c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BlackBodySED</name>
      <anchorfile>class_black_body_s_e_d.html</anchorfile>
      <anchor>a4693b4b7998b8343a0d7451510fb4894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~BlackBodySED</name>
      <anchorfile>class_black_body_s_e_d.html</anchorfile>
      <anchor>a5145a0b4582ad015ed9117c5afc1ee48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_black_body_s_e_d.html</anchorfile>
      <anchor>ae1ad79a1e700f8c54231efb7383f0323</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BlackBodySEDFamily</name>
    <filename>class_black_body_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_black_body_s_e_d_family.html</anchorfile>
      <anchor>ad94db7ae272b13979cd51f186f844fb3</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_black_body_s_e_d_family.html</anchorfile>
      <anchor>afe10b78891a39ff0a51f779bc6601310</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_black_body_s_e_d_family.html</anchorfile>
      <anchor>ab8b2fad63e3dbbaba57f9130b1ca011b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_black_body_s_e_d_family.html</anchorfile>
      <anchor>af0dc6f37b9416127794ea8b590c12e0f</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BlackBodySEDFamily</name>
      <anchorfile>class_black_body_s_e_d_family.html</anchorfile>
      <anchor>adabcdffbb7e9dca4eedc63fbf925a7e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Block</name>
    <filename>class_block.html</filename>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>class_block.html</anchorfile>
      <anchor>a04f0054ba001e9deb6050dfacb98767d</anchor>
      <arglist>(const vector&lt; string &gt; &amp;block)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>class_block.html</anchorfile>
      <anchor>adef6858ee7d8ded1ac50f2955dc6bbcc</anchor>
      <arglist>(const vector&lt; string &gt; &amp;chunk, size_t first, size_t last)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>streamlined</name>
      <anchorfile>class_block.html</anchorfile>
      <anchor>aef956cdf24af3ba3968e187620bd2ac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; string &gt;</type>
      <name>_block</name>
      <anchorfile>class_block.html</anchorfile>
      <anchor>a2b60fd8001cccc8f8e2b44e146e5add2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BooleanExpression</name>
    <filename>class_boolean_expression.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>evaluateBoolean</name>
      <anchorfile>class_boolean_expression.html</anchorfile>
      <anchor>a0e1a871eeb0d6202dc8c2748938e2d69</anchor>
      <arglist>(string expression, std::function&lt; bool(string)&gt; isIdentifierTrue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>evaluateConditionalValue</name>
      <anchorfile>class_boolean_expression.html</anchorfile>
      <anchor>ab92a00050973919703a744051ca42d67</anchor>
      <arglist>(string expression, std::function&lt; bool(string)&gt; isIdentifierTrue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoolPropertyHandler</name>
    <filename>class_bool_property_handler.html</filename>
    <base>PropertyHandler</base>
    <member kind="function">
      <type>void</type>
      <name>acceptVisitor</name>
      <anchorfile>class_bool_property_handler.html</anchorfile>
      <anchor>a826372aa2e4ec715663d08b48b1c09c8</anchor>
      <arglist>(PropertyHandlerVisitor *visitor) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>defaultValue</name>
      <anchorfile>class_bool_property_handler.html</anchorfile>
      <anchor>afecbaca7b0a3b67af7fd275256a9b03f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNames</name>
      <anchorfile>class_bool_property_handler.html</anchorfile>
      <anchor>aea4aca3672bd02cf2ace2b65cf34f804</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidValue</name>
      <anchorfile>class_bool_property_handler.html</anchorfile>
      <anchor>aae9610a7819902d026a40bc31abef994</anchor>
      <arglist>(string value) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_bool_property_handler.html</anchorfile>
      <anchor>a842d0c91ab41aee39f48c0b2159ad785</anchor>
      <arglist>(const PropertyHandler &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_bool_property_handler.html</anchorfile>
      <anchor>a70cc449cdf73913e21c3b1951baa6d2c</anchor>
      <arglist>(Item *target, const PropertyDef *property, const SchemaDef *schema, NameManager *nameMgr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>class_bool_property_handler.html</anchorfile>
      <anchor>a5b821ebc3af2799415e7028ada03aeb4</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>value</name>
      <anchorfile>class_bool_property_handler.html</anchorfile>
      <anchor>a7178b94c40a07dd32c8de06951144d8e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoolPropertyWizardPane</name>
    <filename>class_bool_property_wizard_pane.html</filename>
    <base>PropertyWizardPane</base>
    <member kind="slot">
      <type>void</type>
      <name>updateValueFor</name>
      <anchorfile>class_bool_property_wizard_pane.html</anchorfile>
      <anchor>aa5f1354ef9e0ae2f920d36a871fb0cd9</anchor>
      <arglist>(int buttonID)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoolPropertyWizardPane</name>
      <anchorfile>class_bool_property_wizard_pane.html</anchorfile>
      <anchor>ab2b2fc5770194b809ae619d845f12705</anchor>
      <arglist>(std::unique_ptr&lt; PropertyHandler &gt; handler, QObject *target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Box</name>
    <filename>class_box.html</filename>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>aca78d7db44972bfa78d46b7bbc8796f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a8cbed34a8cb9015468efc72cacb968a9</anchor>
      <arglist>(double xmin, double ymin, double zmin, double xmax, double ymax, double zmax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>ac115079c2f8ed0a966c7e67ebc4f7537</anchor>
      <arglist>(Vec rmin, Vec rmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cellIndices</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a2da22faea613ffcbbb94c40015c45834</anchor>
      <arglist>(int &amp;i, int &amp;j, int &amp;k, Vec r, int nx, int ny, int nz) const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>center</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a21a202915997e3fad95dfd69e3f0a410</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>afa415f0ea17a1e470ed3e04e9dc0a338</anchor>
      <arglist>(double x, double y, double z) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a06f5bef35eb12a822dec1c3a7b5691e8</anchor>
      <arglist>(Vec r) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>acc68d0282697e150e64951de44209f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>extent</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a75813d88ee7638ea8eb2b0314e001a8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extent</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a2bf0ded4b1e6b479bf2c9f4dab37f939</anchor>
      <arglist>(double &amp;xmin, double &amp;ymin, double &amp;zmin, double &amp;xmax, double &amp;ymax, double &amp;zmax) const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>fracPos</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a96ab26f4bc08f5d310e28f35019511b9</anchor>
      <arglist>(double xfrac, double yfrac, double zfrac) const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>fracPos</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a6054812722014b3c1ba0e153979aacfa</anchor>
      <arglist>(int xd, int yd, int zd, int xn, int yn, int zn) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>aba33e30d295bdacffcc8a5b5fdf33105</anchor>
      <arglist>(Vec r, const Vec k, double &amp;smin, double &amp;smax) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>adde77e83529a1f3bfe48bf493e096952</anchor>
      <arglist>(Vec rc, double r) const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>rmax</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a0b4a25da0373ad331d101eb2209b3470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>rmin</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a66c20e4cda624235a510fc065f50046d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a6137228d896454f1e84bb2091a7ec0d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>widths</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a14bed4546036f41241d14fab6b98711d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xmax</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>aca01072619a3415aa41d05224999e9ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xmin</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>abede6076d268a5f1a6e6c065ee787089</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xwidth</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a6ffe1213de4d96b62ce867d195874f4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ymax</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>abf612e8fa7cec8e9722942e4ffe26160</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ymin</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a3a877622202f0611d96b453f933e7098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ywidth</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>ab5d35b3d620a2d6552fe504e59b99d28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zmax</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>aba17fa9a0cb393af9868b648f2c88310</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zmin</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>a850d390115456a2090679cd9730f3049</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zwidth</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>ac1895e15831992bbf00938dcf68b7bd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setExtent</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>ac5ccf5e435627b8162f4933783ac77d7</anchor>
      <arglist>(const Box &amp;extent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setExtent</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>ae289ca649201931f47180860d92752bc</anchor>
      <arglist>(double xmin, double ymin, double zmin, double xmax, double ymax, double zmax)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>_xmin</name>
      <anchorfile>class_box.html</anchorfile>
      <anchor>ae24977f575904d39ab55b66af5c55003</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoxClipGeometryDecorator</name>
    <filename>class_box_clip_geometry_decorator.html</filename>
    <base>ClipGeometryDecorator</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_box_clip_geometry_decorator.html</anchorfile>
      <anchor>aa6dd1c0b3920b837f84e4aa2975757e1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>class_box_clip_geometry_decorator.html</anchorfile>
      <anchor>a07fe7c440829338a6fe0f8caaea4022f</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxX</name>
      <anchorfile>class_box_clip_geometry_decorator.html</anchorfile>
      <anchor>a1f0faf98f2d4c573397d6f6464a27d3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxY</name>
      <anchorfile>class_box_clip_geometry_decorator.html</anchorfile>
      <anchor>a5de0da75cc6a74b27aea36d2781de4ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxZ</name>
      <anchorfile>class_box_clip_geometry_decorator.html</anchorfile>
      <anchor>a1f0dbd2fa13d68c078540a666411c680</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minX</name>
      <anchorfile>class_box_clip_geometry_decorator.html</anchorfile>
      <anchor>a79077444ba3fe7b15639be8ee1f91c45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minY</name>
      <anchorfile>class_box_clip_geometry_decorator.html</anchorfile>
      <anchor>a0828827d9ca2e2c18b36442a374e5376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minZ</name>
      <anchorfile>class_box_clip_geometry_decorator.html</anchorfile>
      <anchor>ae99e670926343422e35bb709608eb26d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_box_clip_geometry_decorator.html</anchorfile>
      <anchor>a4a00910f5c608a28d735bc8f352952a6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoxClipGeometryDecorator</name>
      <anchorfile>class_box_clip_geometry_decorator.html</anchorfile>
      <anchor>a7470dc980e38b79468087d1cf6bacf29</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoxSpatialGrid</name>
    <filename>class_box_spatial_grid.html</filename>
    <base>SpatialGrid</base>
    <base>Box</base>
    <member kind="function">
      <type>Box</type>
      <name>boundingBox</name>
      <anchorfile>class_box_spatial_grid.html</anchorfile>
      <anchor>a37bc642d91f4004f024da107d16d85a4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_box_spatial_grid.html</anchorfile>
      <anchor>acf761e5d49238e680ca3240c7c0c1950</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxX</name>
      <anchorfile>class_box_spatial_grid.html</anchorfile>
      <anchor>a39b5bfbcbd62ab8ecb288d2e7527e907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxY</name>
      <anchorfile>class_box_spatial_grid.html</anchorfile>
      <anchor>a8769ba4bacc8e419039233d5737c01e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxZ</name>
      <anchorfile>class_box_spatial_grid.html</anchorfile>
      <anchor>afaf2407a76794b515fb37c07e8bd7c04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minX</name>
      <anchorfile>class_box_spatial_grid.html</anchorfile>
      <anchor>a9379f09b0c2f52788f4c96b248f04d7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minY</name>
      <anchorfile>class_box_spatial_grid.html</anchorfile>
      <anchor>a0886075553f568d56b08c302a5abbe3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minZ</name>
      <anchorfile>class_box_spatial_grid.html</anchorfile>
      <anchor>a6f5abb9be881e6c0ec56a9bbca02d79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoxSpatialGrid</name>
      <anchorfile>class_box_spatial_grid.html</anchorfile>
      <anchor>a28475b829d95dd8c0716f7d923dd7633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_box_spatial_grid.html</anchorfile>
      <anchor>ac98cc79c267ae9052f026da05c17e1a2</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BpassSED</name>
    <filename>class_bpass_s_e_d.html</filename>
    <base>FamilySED</base>
    <member kind="function">
      <type>double</type>
      <name>age</name>
      <anchorfile>class_bpass_s_e_d.html</anchorfile>
      <anchor>ad805abf020c2d4df4858b860caf05629</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_bpass_s_e_d.html</anchorfile>
      <anchor>a0fea2d5bba8de76b21788f6ec5284445</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BpassSED</name>
      <anchorfile>class_bpass_s_e_d.html</anchorfile>
      <anchor>ad5ba30b44c8248bf8813e75565a9a788</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SEDFamily *</type>
      <name>getFamilyAndParameters</name>
      <anchorfile>class_bpass_s_e_d.html</anchorfile>
      <anchor>a4eba850e52829589c63a3c37a47f2e4f</anchor>
      <arglist>(Array &amp;parameters) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BpassSEDFamily</name>
    <filename>class_bpass_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="function">
      <type></type>
      <name>BpassSEDFamily</name>
      <anchorfile>class_bpass_s_e_d_family.html</anchorfile>
      <anchor>ab51e3a4b5ca39dd449ba1dc93cb0cace</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_bpass_s_e_d_family.html</anchorfile>
      <anchor>a03ae042de8ede0e1db472ffab6974d50</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_bpass_s_e_d_family.html</anchorfile>
      <anchor>a6d799417f23b8732b7348f75d405a4ef</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_bpass_s_e_d_family.html</anchorfile>
      <anchor>a616b901cff50fd6dcc898869c33a73e1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_bpass_s_e_d_family.html</anchorfile>
      <anchor>af8566bd8b2ba75127680eb37243324e1</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BpassSEDFamily</name>
      <anchorfile>class_bpass_s_e_d_family.html</anchorfile>
      <anchor>a56ead9c017087f6b068b75b3915e8c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_bpass_s_e_d_family.html</anchorfile>
      <anchor>a0256268fb3b4c820902e8dd446e05b9b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BroadBand</name>
    <filename>class_broad_band.html</filename>
    <base>Band</base>
    <member kind="function">
      <type></type>
      <name>BroadBand</name>
      <anchorfile>class_broad_band.html</anchorfile>
      <anchor>a958d6b19651cfaf2818009a5e308f4bf</anchor>
      <arglist>(SimulationItem *parent, string bandName)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>bandName</name>
      <anchorfile>class_broad_band.html</anchorfile>
      <anchor>a31e335890ce9b9c6186d5ccdedb47b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BroadBand</name>
      <anchorfile>class_broad_band.html</anchorfile>
      <anchor>a4e30cdaf09d6867e1b167ecdd7da3926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>dataSize</name>
      <anchorfile>class_broad_band.html</anchorfile>
      <anchor>add055230ee34b3199b2893e4a4203a58</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_broad_band.html</anchorfile>
      <anchor>ab05435495323d65b1c13f23a39772e2b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const double *</type>
      <name>transmissionData</name>
      <anchorfile>class_broad_band.html</anchorfile>
      <anchor>a203e2eed7084e12641713b0674bc3a35</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const double *</type>
      <name>wavelengthData</name>
      <anchorfile>class_broad_band.html</anchorfile>
      <anchor>a38b035a8a2ee6ac0fb94ee3b8b87da88</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BrokenExpDiskGeometry</name>
    <filename>class_broken_exp_disk_geometry.html</filename>
    <base>SepAxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>breakRadius</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>a2ca02f05d3559cf1f6bc616d7412a6de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleHeight</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>a8ed06b27c5fcad99abfc21169a13cd39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleLengthInner</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>abdd028ac73daf0fab79d544e88755083</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleLengthOuter</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>a2ad9d63e0e7d038260f69f08a97b9310</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sharpness</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>aeb40939c47c066bad176be7439cd95e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BrokenExpDiskGeometry</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>a4a652e536d7e52d4cd89db699266b488</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>a63b98a06f5a985720e6d8a6c6cf0e83f</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>randomCylRadius</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>ab27b17163406f6c93a903114d18c51af</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>randomZ</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>a969198d847bf73d7c1c14e920c825de4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>a91e0b39c75dad785b969243e5f73bc95</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>ab164e926f50fca39fe87017c0bfe036d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>a35f17237858699ce732c13db31b2000d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>radialDensity</name>
      <anchorfile>class_broken_exp_disk_geometry.html</anchorfile>
      <anchor>aadc8a235da6a5244d1883e10ab6ef8fb</anchor>
      <arglist>(double R) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BruzualCharlotSED</name>
    <filename>class_bruzual_charlot_s_e_d.html</filename>
    <base>FamilySED</base>
    <member kind="enumeration">
      <type></type>
      <name>IMF</name>
      <anchorfile>class_bruzual_charlot_s_e_d.html</anchorfile>
      <anchor>aaec20da5b801908eb38d72dbb2597a09</anchor>
      <arglist></arglist>
      <enumvalue file="class_bruzual_charlot_s_e_d.html" anchor="aaec20da5b801908eb38d72dbb2597a09a917c1c3de203aa49cc644e8e204c5437">Chabrier</enumvalue>
      <enumvalue file="class_bruzual_charlot_s_e_d.html" anchor="aaec20da5b801908eb38d72dbb2597a09a8c174efbbe276c19f308ca1f4519d14b">Salpeter</enumvalue>
    </member>
    <member kind="function">
      <type>double</type>
      <name>age</name>
      <anchorfile>class_bruzual_charlot_s_e_d.html</anchorfile>
      <anchor>ad85f3c6461d7a954f0abd6fc040f3989</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IMF</type>
      <name>imf</name>
      <anchorfile>class_bruzual_charlot_s_e_d.html</anchorfile>
      <anchor>a21d1da1c6cd969fe4ca779206d62fcb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_bruzual_charlot_s_e_d.html</anchorfile>
      <anchor>aa783ed024051fd7ef2013837d7ecb361</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BruzualCharlotSED</name>
      <anchorfile>class_bruzual_charlot_s_e_d.html</anchorfile>
      <anchor>a73627fbcd89cb3dfea9afccc5ff75fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SEDFamily *</type>
      <name>getFamilyAndParameters</name>
      <anchorfile>class_bruzual_charlot_s_e_d.html</anchorfile>
      <anchor>ad0e923f927b0c00da8265b08876bcec3</anchor>
      <arglist>(Array &amp;parameters) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BruzualCharlotSEDFamily</name>
    <filename>class_bruzual_charlot_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="enumeration">
      <type></type>
      <name>IMF</name>
      <anchorfile>class_bruzual_charlot_s_e_d_family.html</anchorfile>
      <anchor>a3de796fc1b93ff7d0a2b922967273a4b</anchor>
      <arglist></arglist>
      <enumvalue file="class_bruzual_charlot_s_e_d_family.html" anchor="a3de796fc1b93ff7d0a2b922967273a4ba917c1c3de203aa49cc644e8e204c5437">Chabrier</enumvalue>
      <enumvalue file="class_bruzual_charlot_s_e_d_family.html" anchor="a3de796fc1b93ff7d0a2b922967273a4ba8c174efbbe276c19f308ca1f4519d14b">Salpeter</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Resolution</name>
      <anchorfile>class_bruzual_charlot_s_e_d_family.html</anchorfile>
      <anchor>a1fc449e06ff77cf276a3fcf513766e96</anchor>
      <arglist></arglist>
      <enumvalue file="class_bruzual_charlot_s_e_d_family.html" anchor="a1fc449e06ff77cf276a3fcf513766e96a28d0edd045e05cf5af64e35ae0c4c6ef">Low</enumvalue>
      <enumvalue file="class_bruzual_charlot_s_e_d_family.html" anchor="a1fc449e06ff77cf276a3fcf513766e96a655d20c1ca69519ca647684edbb2db35">High</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>BruzualCharlotSEDFamily</name>
      <anchorfile>class_bruzual_charlot_s_e_d_family.html</anchorfile>
      <anchor>a477862519675785e61917994c97b204d</anchor>
      <arglist>(SimulationItem *parent, IMF imf, Resolution resolution)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_bruzual_charlot_s_e_d_family.html</anchorfile>
      <anchor>a987c7ab684ba446da2ad9ca147298e9a</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>IMF</type>
      <name>imf</name>
      <anchorfile>class_bruzual_charlot_s_e_d_family.html</anchorfile>
      <anchor>ade8bd7a0febed9e28c33b0abf92dd5e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_bruzual_charlot_s_e_d_family.html</anchorfile>
      <anchor>ae39534bab8564ca2cb92882de5d3cb9f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_bruzual_charlot_s_e_d_family.html</anchorfile>
      <anchor>afe11cce1ea680ad5b368584fd2adeab6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Resolution</type>
      <name>resolution</name>
      <anchorfile>class_bruzual_charlot_s_e_d_family.html</anchorfile>
      <anchor>abb370903b429d7a431aa87df26634eb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_bruzual_charlot_s_e_d_family.html</anchorfile>
      <anchor>a31c57ca158aa2ed83d7d4b1c5b565fbc</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BruzualCharlotSEDFamily</name>
      <anchorfile>class_bruzual_charlot_s_e_d_family.html</anchorfile>
      <anchor>adc022fb342b0602b3e1d5219a1049e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_bruzual_charlot_s_e_d_family.html</anchorfile>
      <anchor>a94c6cd84dd2287f670c855179563921c</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BuildInfo</name>
    <filename>class_build_info.html</filename>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>codeVersion</name>
      <anchorfile>class_build_info.html</anchorfile>
      <anchor>a181ca75664dd844a264e8923f2f68047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>projectVersion</name>
      <anchorfile>class_build_info.html</anchorfile>
      <anchor>af7156871c6d6c889c6b4653dab898d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>timestamp</name>
      <anchorfile>class_build_info.html</anchorfile>
      <anchor>a014704114a5739f00b5a79309bebd2ae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Canvas</name>
    <filename>class_canvas.html</filename>
    <member kind="function">
      <type></type>
      <name>Canvas</name>
      <anchorfile>class_canvas.html</anchorfile>
      <anchor>afdb32b7e63a0298a0f723e7432f06b2a</anchor>
      <arglist>(size_t numPixels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>class_canvas.html</anchorfile>
      <anchor>a8256a1431d26cd0596ef4a5ca2d9b393</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBox</name>
      <anchorfile>class_canvas.html</anchorfile>
      <anchor>ac8efa06e2293f04985e2ed349a44d91b</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillConvexPolygon</name>
      <anchorfile>class_canvas.html</anchorfile>
      <anchor>a748c9c0ea5a8da298e886bf31a774a29</anchor>
      <arglist>(const ConvexPolygon &amp;poly)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveToTiff</name>
      <anchorfile>class_canvas.html</anchorfile>
      <anchor>a86f0bb8294771b71acdef59d1c89f00a</anchor>
      <arglist>(string filepath) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>class_canvas.html</anchorfile>
      <anchor>a7dfdbf19f81f6e657cedd14810cb6a7a</anchor>
      <arglist>(double r, double g, double b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>class_canvas.html</anchorfile>
      <anchor>a04e66624700dadc227be728e917b15ca</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>indicesInRange</name>
      <anchorfile>class_canvas.html</anchorfile>
      <anchor>a78c7fb0bb94fca300e899d1df0370b1b</anchor>
      <arglist>(double x1, double x2, size_t &amp;i1, size_t &amp;i2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CartesianSpatialGrid</name>
    <filename>class_cartesian_spatial_grid.html</filename>
    <base>BoxSpatialGrid</base>
    <member kind="function">
      <type>int</type>
      <name>cellIndex</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a5d0cb07e62ecab2781b7011ee46a6bee</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>centralPositionInCell</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a73085086a0c7c6c083cb516c79a5116e</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; PathSegmentGenerator &gt;</type>
      <name>createPathSegmentGenerator</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a276adba7e53155b0e8281e3d1143b3d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a10257312f93207a320961d7c75d5024f</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>MoveableMesh *</type>
      <name>meshX</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a6cf56afb9842b2c17c22ddefd266bac1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MoveableMesh *</type>
      <name>meshY</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>ac7efebe00f838272156a7493712bc110</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MoveableMesh *</type>
      <name>meshZ</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>afe0946edf37bad8baa5c9ea3c5cbd9f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numCells</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a800286b84e2788b6b0505cc1ec4ede3e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>randomPositionInCell</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a965edcfcd9907ffd0556f77bb62bc6e9</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>afd34579a81a6e2a4b21b937370a66d3a</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CartesianSpatialGrid</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a748bb76b7f6fd829a1664a04874ae332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a2c7b5e2e2365f2ef50fc5615866913ed</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xy</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>acfcdfa62d6a59b2b9b3d127e6af64713</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xyz</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a5b88f187943a0e66d781f3e56ade3af4</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xz</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a1f4d248d141cf713be85a4042dbe62e7</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_yz</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>af66994e5f6091442a18f1d0d3f0cad65</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Box</type>
      <name>box</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a46a7d229e12e8369686d9689ed898202</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>index</name>
      <anchorfile>class_cartesian_spatial_grid.html</anchorfile>
      <anchor>a923b8777770687b476ef71a4ac839ff8</anchor>
      <arglist>(int i, int j, int k) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CastelliKuruczSED</name>
    <filename>class_castelli_kurucz_s_e_d.html</filename>
    <base>FamilySED</base>
    <member kind="function">
      <type>double</type>
      <name>gravity</name>
      <anchorfile>class_castelli_kurucz_s_e_d.html</anchorfile>
      <anchor>a2817de0541adbf65344f7e0fe5a0e413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_castelli_kurucz_s_e_d.html</anchorfile>
      <anchor>a5ee61200bb38e25640a8d4725e7b22db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>temperature</name>
      <anchorfile>class_castelli_kurucz_s_e_d.html</anchorfile>
      <anchor>a4c91f0e45eaea41a16b84f9cc647e6fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CastelliKuruczSED</name>
      <anchorfile>class_castelli_kurucz_s_e_d.html</anchorfile>
      <anchor>aaa26bef3f896f132d6cab306ce272bcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SEDFamily *</type>
      <name>getFamilyAndParameters</name>
      <anchorfile>class_castelli_kurucz_s_e_d.html</anchorfile>
      <anchor>ab90c375664f7be982e96c1693cd776c6</anchor>
      <arglist>(Array &amp;parameters) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CastelliKuruczSEDFamily</name>
    <filename>class_castelli_kurucz_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="function">
      <type></type>
      <name>CastelliKuruczSEDFamily</name>
      <anchorfile>class_castelli_kurucz_s_e_d_family.html</anchorfile>
      <anchor>a512b6898ed970bd0b364a2f38878b486</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_castelli_kurucz_s_e_d_family.html</anchorfile>
      <anchor>ad9fd131bf0d0edc767930b7e17471017</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_castelli_kurucz_s_e_d_family.html</anchorfile>
      <anchor>ab53d2f75fb77c4ca9f81a6062d576a8d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_castelli_kurucz_s_e_d_family.html</anchorfile>
      <anchor>ae3bf7c4f18eaa5d6b3b3e4452ada368b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_castelli_kurucz_s_e_d_family.html</anchorfile>
      <anchor>ae6b27482222dd1e9f85b8f5d5ebac9b5</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CastelliKuruczSEDFamily</name>
      <anchorfile>class_castelli_kurucz_s_e_d_family.html</anchorfile>
      <anchor>a6c22bd7cdf68fe9e7596099030816d29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_castelli_kurucz_s_e_d_family.html</anchorfile>
      <anchor>afb7fc68288dd412f50afa70b630e9275</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CellGeometry</name>
    <filename>class_cell_geometry.html</filename>
    <base>ImportedGeometry</base>
    <member kind="enumeration">
      <type></type>
      <name>MassType</name>
      <anchorfile>class_cell_geometry.html</anchorfile>
      <anchor>ac59f2ba3aba9813fec7e6821a992b2cb</anchor>
      <arglist></arglist>
      <enumvalue file="class_cell_geometry.html" anchor="ac59f2ba3aba9813fec7e6821a992b2cba2fb9578dc9ed8897d5474fcdefa6cb72">MassDensity</enumvalue>
      <enumvalue file="class_cell_geometry.html" anchor="ac59f2ba3aba9813fec7e6821a992b2cbaff2864d6f652ee0ac254814f1ae4f4a8">Mass</enumvalue>
      <enumvalue file="class_cell_geometry.html" anchor="ac59f2ba3aba9813fec7e6821a992b2cba7a494ad54edac742fedb68f30236dafd">NumberDensity</enumvalue>
      <enumvalue file="class_cell_geometry.html" anchor="ac59f2ba3aba9813fec7e6821a992b2cbab2ee912b91d69b435159c7c3f6df7f5f">Number</enumvalue>
    </member>
    <member kind="function">
      <type>MassType</type>
      <name>massType</name>
      <anchorfile>class_cell_geometry.html</anchorfile>
      <anchor>ae0f155a9a9d65e77a3622fb8e4bb7b39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CellGeometry</name>
      <anchorfile>class_cell_geometry.html</anchorfile>
      <anchor>ad68106783de77feffd9870a0821e2ceb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_cell_geometry.html</anchorfile>
      <anchor>a3f07ee085d9602b3a997432536a1582f</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CellMedium</name>
    <filename>class_cell_medium.html</filename>
    <base>ImportedMedium</base>
    <member kind="enumeration">
      <type></type>
      <name>MassType</name>
      <anchorfile>class_cell_medium.html</anchorfile>
      <anchor>adeaf9f6c85c1c39799e34384f2362321</anchor>
      <arglist></arglist>
      <enumvalue file="class_cell_medium.html" anchor="adeaf9f6c85c1c39799e34384f2362321a2fb9578dc9ed8897d5474fcdefa6cb72">MassDensity</enumvalue>
      <enumvalue file="class_cell_medium.html" anchor="adeaf9f6c85c1c39799e34384f2362321aff2864d6f652ee0ac254814f1ae4f4a8">Mass</enumvalue>
      <enumvalue file="class_cell_medium.html" anchor="adeaf9f6c85c1c39799e34384f2362321a7a494ad54edac742fedb68f30236dafd">NumberDensity</enumvalue>
      <enumvalue file="class_cell_medium.html" anchor="adeaf9f6c85c1c39799e34384f2362321ab2ee912b91d69b435159c7c3f6df7f5f">Number</enumvalue>
    </member>
    <member kind="function">
      <type>MassType</type>
      <name>massType</name>
      <anchorfile>class_cell_medium.html</anchorfile>
      <anchor>a0e6f08ce1fc7b4186e2bd74b66f537f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CellMedium</name>
      <anchorfile>class_cell_medium.html</anchorfile>
      <anchor>af49e5570dfc5d58c5b819182af6952ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_cell_medium.html</anchorfile>
      <anchor>a19b98f48557bcfd7a493a47de87f5345</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CellSnapshot</name>
    <filename>class_cell_snapshot.html</filename>
    <base>Snapshot</base>
    <member kind="function">
      <type></type>
      <name>~CellSnapshot</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>afb59ae2613989b1759f9daf76f3e3f16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>a5bda1aeee587c4e841de199120b1a3fd</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>ab14deadf9286220660d3c7be7b5f431c</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>extent</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>ae59a8526d22d9587a869ad0b8f6b652f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>a5e071d2a45e495fd6ef04b2d92d1465a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>a373e6b56189eb1a26c5eedd5b471d8f2</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntities</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>a1d31ba6cb73ff9adfbd86fbce1315e1b</anchor>
      <arglist>(EntityCollection &amp;entities, Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntities</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>a29aa11e003523643d8bbaa7e64e9735f</anchor>
      <arglist>(EntityCollection &amp;entities, Position bfr, Direction bfk) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>a23f613db5ecfb904855e031b27881155</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numEntities</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>aefd9accf9b31259ac52820598c8e4f67</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>position</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>a441266dff350a906ef1a7dda145e2908</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAndClose</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>a2d7cdd6eab2224f9f6d13d16157ae5d3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>a612a82a6d854ab64f9ac4cb967c64765</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>nearestEntity</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>a9bae7d554cea95d6b642d126c8a5fcfd</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Array &amp;</type>
      <name>properties</name>
      <anchorfile>class_cell_snapshot.html</anchorfile>
      <anchor>aaceb0f2c35fbb2c283243efa3851a4e7</anchor>
      <arglist>(int m) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CellSource</name>
    <filename>class_cell_source.html</filename>
    <base>ImportedSource</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>CellSource</name>
      <anchorfile>class_cell_source.html</anchorfile>
      <anchor>addea40dec0e4bf7dfe3838c5f4e024f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_cell_source.html</anchorfile>
      <anchor>a7bfc061cbcba78c7ff883dd44130b87c</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CenteredSource</name>
    <filename>class_centered_source.html</filename>
    <base>SpecialtySource</base>
    <member kind="function">
      <type>double</type>
      <name>centerX</name>
      <anchorfile>class_centered_source.html</anchorfile>
      <anchor>aaee09bc816563dbfc348852710a86dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>centerY</name>
      <anchorfile>class_centered_source.html</anchorfile>
      <anchor>a2d09ad4f25e071ea35689d5fbd6fb64a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>centerZ</name>
      <anchorfile>class_centered_source.html</anchorfile>
      <anchor>a82593926e954f9176fa520c19095875a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>geometryDimension</name>
      <anchorfile>class_centered_source.html</anchorfile>
      <anchor>aa008f83546de162eac4323d5ada71a76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>intrinsicDimension</name>
      <anchorfile>class_centered_source.html</anchorfile>
      <anchor>a3c4ddb05e79f89c6580e3f35a9c58d49</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CenteredSource</name>
      <anchorfile>class_centered_source.html</anchorfile>
      <anchor>a2ebc61084ac3cfe5e3a65eb9f00748b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CenterShape</name>
    <filename>class_center_shape.html</filename>
    <base>Shape</base>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>class_center_shape.html</anchorfile>
      <anchor>abe9e6fecf7df1094492931370081f437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>class_center_shape.html</anchorfile>
      <anchor>a8f6c626f01180b1069c29196849505c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CenterShape</name>
      <anchorfile>class_center_shape.html</anchorfile>
      <anchor>ad9701a46eaa5030f6e71a2b9980f3d19</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Chunk</name>
    <filename>class_chunk.html</filename>
    <member kind="function">
      <type></type>
      <name>Chunk</name>
      <anchorfile>class_chunk.html</anchorfile>
      <anchor>acc32e1562cad6664c98ee07edecdbdf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFromConsole</name>
      <anchorfile>class_chunk.html</anchorfile>
      <anchor>a7e12e7f77a8efeb4e143dfaee1110202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>streamline</name>
      <anchorfile>class_chunk.html</anchorfile>
      <anchor>a78059205c26cb526b75916825e278971</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToConsole</name>
      <anchorfile>class_chunk.html</anchorfile>
      <anchor>ad4a88f4226cef7c2f6b2eb9ec0957313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; string &gt;</type>
      <name>_chunk</name>
      <anchorfile>class_chunk.html</anchorfile>
      <anchor>a52925fc61c5d1a8dac51da3564b59f0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChunkMaker</name>
    <filename>class_chunk_maker.html</filename>
    <member kind="function">
      <type></type>
      <name>ChunkMaker</name>
      <anchorfile>class_chunk_maker.html</anchorfile>
      <anchor>aef5dcf8cd816899ad7c10327466a8a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>callForNext</name>
      <anchorfile>class_chunk_maker.html</anchorfile>
      <anchor>ac06c453d6d4b5bb4178cf600fc21526f</anchor>
      <arglist>(const std::function&lt; void(size_t firstIndex, size_t numIndices)&gt; &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_chunk_maker.html</anchorfile>
      <anchor>a30dc3e8f21151d891714583f7164f45a</anchor>
      <arglist>(size_t maxIndex, int numThreads, int numProcs=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>class_chunk_maker.html</anchorfile>
      <anchor>a2e5846fb719a71820564c880add54dc7</anchor>
      <arglist>(size_t &amp;firstIndex, size_t &amp;numIndices)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClearDensityRecipe</name>
    <filename>class_clear_density_recipe.html</filename>
    <base>DynamicStateRecipe</base>
    <member kind="function">
      <type>void</type>
      <name>beginUpdate</name>
      <anchorfile>class_clear_density_recipe.html</anchorfile>
      <anchor>a95d31c59166059e3c042eb2d9d3eb4a1</anchor>
      <arglist>(int numCells) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fieldStrengthThreshold</name>
      <anchorfile>class_clear_density_recipe.html</anchorfile>
      <anchor>a1d38e19433fb738334c2517ecb5804c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UpdateStatus</type>
      <name>update</name>
      <anchorfile>class_clear_density_recipe.html</anchorfile>
      <anchor>a455fcf18631accfad536848da2dab925</anchor>
      <arglist>(MaterialState *state, const Array &amp;Jv) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClearDensityRecipe</name>
      <anchorfile>class_clear_density_recipe.html</anchorfile>
      <anchor>a03a80680ea7c97d671eb71b3b63a6a6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClipGeometryDecorator</name>
    <filename>class_clip_geometry_decorator.html</filename>
    <base>Geometry</base>
    <member kind="enumeration">
      <type></type>
      <name>Remove</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>ac78bd1c3c8136a563d9d438e1e498514</anchor>
      <arglist></arglist>
      <enumvalue file="class_clip_geometry_decorator.html" anchor="ac78bd1c3c8136a563d9d438e1e498514a9b6d3000134648fc9f1e71094ae0847d">Inside</enumvalue>
      <enumvalue file="class_clip_geometry_decorator.html" anchor="ac78bd1c3c8136a563d9d438e1e498514a76fbf0ccd7fcd64879c2ff2119dc15a4">Outside</enumvalue>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>a88ba04ca7db0cab04b7984a081dcbc26</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>a72a57d9bb64a71815b83d653f79ee394</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>geometry</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>a9834d41608efd147f35f79879a906870</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Remove</type>
      <name>remove</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>aed1ec55b240794aa69cc33d30d54cb82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>a9702cd40f69b7c8fe5348f1edfaff651</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>a4a68a589c425f0f1b7c49382923e2d3f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>ae78b53287c962856abdb5d2ae1a29554</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClipGeometryDecorator</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>a05d7b336751c9a70bea26ab4a1c51375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>inside</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>a2a09ee3d9d419a586601c830cc529018</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>norm</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>ab9170d35fda2a6c289ddbe474304d205</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_clip_geometry_decorator.html</anchorfile>
      <anchor>a930397cc224e17a8ffb342c0c6098ecf</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClumpyGeometryDecorator</name>
    <filename>class_clumpy_geometry_decorator.html</filename>
    <base>GenGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>clumpFraction</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>a9bf08ce995e10f32bce8cab19d8194b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clumpRadius</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>a8d81c745b43806b239576b778b7e012c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cutoffClumps</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>afb89c2223f4d54910d01975772ba5298</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>a3e19097f0ee879e906843597cd214196</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>ab4266f83e98f70181ae53d8ed8952ffb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>geometry</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>a82c8d76f41b99e72e10c7ccb68b1df48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numClumps</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>a243f3427a7388dc48b946634fd9b2e11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seed</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>a9b7e5e88d7e893f2d574a399f6aa78fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>a9b05bd35849cd1464b371b6d4504f47e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>ad216099ba3b4e17b10f7c21fbeca42e9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>a204e14cb84909ada0c804eb07aa82056</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>SmoothingKernel *</type>
      <name>smoothingKernel</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>a0ca628b89aa172e50bd48d964cb03436</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClumpyGeometryDecorator</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>a22d88970a527263e443b78f53f3433c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_clumpy_geometry_decorator.html</anchorfile>
      <anchor>a4dc618e5e91508656c680fba384621cd</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColorDecorator</name>
    <filename>class_color_decorator.html</filename>
    <base>ShapeDecorator</base>
    <member kind="enumeration">
      <type></type>
      <name>Color</name>
      <anchorfile>class_color_decorator.html</anchorfile>
      <anchor>ace8ec9c67ff2c497eff35c96752a0d65</anchor>
      <arglist></arglist>
      <enumvalue file="class_color_decorator.html" anchor="ace8ec9c67ff2c497eff35c96752a0d65a25a81701fbfa4a1efdf660a950c1d006">White</enumvalue>
      <enumvalue file="class_color_decorator.html" anchor="ace8ec9c67ff2c497eff35c96752a0d65aee38e4d5dd68c4e440825018d549cb47">Red</enumvalue>
      <enumvalue file="class_color_decorator.html" anchor="ace8ec9c67ff2c497eff35c96752a0d65ad382816a3cbeed082c9e216e7392eed1">Green</enumvalue>
      <enumvalue file="class_color_decorator.html" anchor="ace8ec9c67ff2c497eff35c96752a0d65a9594eec95be70e7b1710f730fdda33d9">Blue</enumvalue>
      <enumvalue file="class_color_decorator.html" anchor="ace8ec9c67ff2c497eff35c96752a0d65a023c239d2f2538f140a20e72c7b73f20">Cyan</enumvalue>
      <enumvalue file="class_color_decorator.html" anchor="ace8ec9c67ff2c497eff35c96752a0d65ab91cc2c1416fcca942b61c7ac5b1a9ac">Magenta</enumvalue>
      <enumvalue file="class_color_decorator.html" anchor="ace8ec9c67ff2c497eff35c96752a0d65a51e6cd92b6c45f9affdc158ecca2b8b8">Yellow</enumvalue>
      <enumvalue file="class_color_decorator.html" anchor="ace8ec9c67ff2c497eff35c96752a0d65ae90dfb84e30edf611e326eeb04d680de">Black</enumvalue>
      <enumvalue file="class_color_decorator.html" anchor="ace8ec9c67ff2c497eff35c96752a0d65a90589c47f06eb971d548591f23c285af">Custom</enumvalue>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>color</name>
      <anchorfile>class_color_decorator.html</anchorfile>
      <anchor>afc52449a767ce80f272b88433a7c2ab5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>rgb</name>
      <anchorfile>class_color_decorator.html</anchorfile>
      <anchor>a05aaf2cd46c57cf70d35f5cb824f1ded</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ColorDecorator</name>
      <anchorfile>class_color_decorator.html</anchorfile>
      <anchor>a95a3a3450137d28ba56b7509552b1ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintSelf</name>
      <anchorfile>class_color_decorator.html</anchorfile>
      <anchor>a89ef5e0c02fc5f3eb4c71b6949d2945b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CombineGeometryDecorator</name>
    <filename>class_combine_geometry_decorator.html</filename>
    <base>Geometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>a66bf69f13ccbe6315e5acd5537d0f626</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>a6429e6ed28525cd2682e27b811ee18ab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>firstGeometry</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>ad5a61a3685a507541b1af1413807f906</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>firstWeight</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>ae47487fe42c132e29783879b2d355d15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>a23e36ca4a5217df00b33c00d79e509c4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>secondGeometry</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>a143078f5f286e49320662c26781859ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>secondWeight</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>aa8c7b8e3ee5b57ad6866d4bb98f2b452</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>aae4750b8a8229918f42836eca84c3ed8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>aeb8a23d3d52b4bef8df8f5f6ae9618e0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>a026aa9d68cb8619ec0d393a55dea95a7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CombineGeometryDecorator</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>acd9d253f4008e36d1742e02b7ff92214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_combine_geometry_decorator.html</anchorfile>
      <anchor>a1fe36b9cb2a874f1b2e215cf60c56c2a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CommandLineArguments</name>
    <filename>class_command_line_arguments.html</filename>
    <member kind="function">
      <type></type>
      <name>CommandLineArguments</name>
      <anchorfile>class_command_line_arguments.html</anchorfile>
      <anchor>a9c0a096b150d669bdb27f7d78ebede02</anchor>
      <arglist>(const vector&lt; string &gt; &amp;, string options)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>class_command_line_arguments.html</anchorfile>
      <anchor>ac462affe1501c9427e0d2e737e2000a5</anchor>
      <arglist>(string option) const</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>filepaths</name>
      <anchorfile>class_command_line_arguments.html</anchorfile>
      <anchor>a87406ae52272330a60354f6763a2f338</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFilepaths</name>
      <anchorfile>class_command_line_arguments.html</anchorfile>
      <anchor>a6ad9d24331046017fed58a450cbe943d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOptions</name>
      <anchorfile>class_command_line_arguments.html</anchorfile>
      <anchor>ad879fee1dcaf9a85e9dc1e186dfbf705</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>intValue</name>
      <anchorfile>class_command_line_arguments.html</anchorfile>
      <anchor>a959141035e7de8b6e45f2dd3a40ca4f8</anchor>
      <arglist>(string option) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPresent</name>
      <anchorfile>class_command_line_arguments.html</anchorfile>
      <anchor>a500e124f8999eb85f532da262f6cf1a2</anchor>
      <arglist>(string option) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>class_command_line_arguments.html</anchorfile>
      <anchor>a7f11f4b26a9f299de973d63575c8caae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>value</name>
      <anchorfile>class_command_line_arguments.html</anchorfile>
      <anchor>a0f8fee88912e9af0635cf32f6d0950c5</anchor>
      <arglist>(string option) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CompositeWavelengthGrid</name>
    <filename>class_composite_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="function">
      <type>bool</type>
      <name>log</name>
      <anchorfile>class_composite_wavelength_grid.html</anchorfile>
      <anchor>ab2da8970062d7faf55c042de704c472e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; DisjointWavelengthGrid * &gt; &amp;</type>
      <name>wavelengthGrids</name>
      <anchorfile>class_composite_wavelength_grid.html</anchorfile>
      <anchor>a71e25f50a865b16ce381524bdf8a1b1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CompositeWavelengthGrid</name>
      <anchorfile>class_composite_wavelength_grid.html</anchorfile>
      <anchor>ad9b87a920f5a3a5a5006effb29ff0079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_composite_wavelength_grid.html</anchorfile>
      <anchor>a8b772c4d4af981cd9551c57653172acb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComptonPhaseFunction</name>
    <filename>class_compton_phase_function.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_compton_phase_function.html</anchorfile>
      <anchor>a888bb54130333564bc2bf60abd3a8682</anchor>
      <arglist>(Random *random)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peeloffScattering</name>
      <anchorfile>class_compton_phase_function.html</anchorfile>
      <anchor>afd2bdeeee32b0fb9c2345bfd2bea0d06</anchor>
      <arglist>(double &amp;I, double &amp;lambda, Direction bfk, Direction bfkobs) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>performScattering</name>
      <anchorfile>class_compton_phase_function.html</anchorfile>
      <anchor>a340e2213335087a55eced86c11b3e0cf</anchor>
      <arglist>(double &amp;lambda, Direction bfk) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionSca</name>
      <anchorfile>class_compton_phase_function.html</anchorfile>
      <anchor>adebb5383a7997d791e4691df15a0818b</anchor>
      <arglist>(double lambda) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>generateCosineFromPhaseFunction</name>
      <anchorfile>class_compton_phase_function.html</anchorfile>
      <anchor>a093aff15cbb93a3c7161612e31236b8a</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>phaseFunctionValueForCosine</name>
      <anchorfile>class_compton_phase_function.html</anchorfile>
      <anchor>a0af295533efd03ca7ec03d0329a0dea6</anchor>
      <arglist>(double x, double costheta) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConfigurableBandWavelengthGrid</name>
    <filename>class_configurable_band_wavelength_grid.html</filename>
    <base>BandWavelengthGrid</base>
    <member kind="function">
      <type>const vector&lt; Band * &gt; &amp;</type>
      <name>bands</name>
      <anchorfile>class_configurable_band_wavelength_grid.html</anchorfile>
      <anchor>a0ecba19a8a238b473e3d406ae990b20a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigurableBandWavelengthGrid</name>
      <anchorfile>class_configurable_band_wavelength_grid.html</anchorfile>
      <anchor>ac56a0c9e13eae893003d6355992e91c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vector&lt; Band * &gt;</type>
      <name>bandList</name>
      <anchorfile>class_configurable_band_wavelength_grid.html</anchorfile>
      <anchor>afedfe1f094e753572627d1beb79fa93d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConfigurableDustMix</name>
    <filename>class_configurable_dust_mix.html</filename>
    <base>MultiGrainDustMix</base>
    <member kind="enumeration">
      <type></type>
      <name>ScatteringType</name>
      <anchorfile>class_configurable_dust_mix.html</anchorfile>
      <anchor>a21981ab42ea63bc8cbdd93aed48349b1</anchor>
      <arglist></arglist>
      <enumvalue file="class_configurable_dust_mix.html" anchor="a21981ab42ea63bc8cbdd93aed48349b1adf03fa94525bed29cd8cd726fb338735">HenyeyGreenstein</enumvalue>
      <enumvalue file="class_configurable_dust_mix.html" anchor="a21981ab42ea63bc8cbdd93aed48349b1ae1f691a01e0e3edb7adee4b84ab4e13c">MaterialPhaseFunction</enumvalue>
      <enumvalue file="class_configurable_dust_mix.html" anchor="a21981ab42ea63bc8cbdd93aed48349b1ab02b4090d4958ca37bd4762064df2907">SphericalPolarization</enumvalue>
      <enumvalue file="class_configurable_dust_mix.html" anchor="a21981ab42ea63bc8cbdd93aed48349b1a6d36c530edffccc776359ef014a09679">SpheroidalPolarization</enumvalue>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPolarizedEmission</name>
      <anchorfile>class_configurable_dust_mix.html</anchorfile>
      <anchor>ae20695150b4279947f559e33d15ba884</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPolarizedScattering</name>
      <anchorfile>class_configurable_dust_mix.html</anchorfile>
      <anchor>a1ca35c64cc00b823cf8e46a12f4572ba</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; GrainPopulation * &gt; &amp;</type>
      <name>populations</name>
      <anchorfile>class_configurable_dust_mix.html</anchorfile>
      <anchor>a92e625306581ceaded328c910e540b60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScatteringMode</type>
      <name>scatteringMode</name>
      <anchorfile>class_configurable_dust_mix.html</anchorfile>
      <anchor>a25abca0ce21b3c9ac249e11e5a9b2da5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ScatteringType</type>
      <name>scatteringType</name>
      <anchorfile>class_configurable_dust_mix.html</anchorfile>
      <anchor>a3600e35267e0929f8649f6f21e5e9167</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigurableDustMix</name>
      <anchorfile>class_configurable_dust_mix.html</anchorfile>
      <anchor>adcfd9b025b5cec67f6199026328528a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_configurable_dust_mix.html</anchorfile>
      <anchor>afa3ad1c617ac0e2ad93c0349417415fb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Configuration</name>
    <filename>class_configuration.html</filename>
    <base>SimulationItem</base>
    <member kind="enumeration">
      <type></type>
      <name>LyaAccelerationScheme</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ace83eb650eb3cf54d12f2f8b2b37c3a1</anchor>
      <arglist></arglist>
      <enumvalue file="class_configuration.html" anchor="ace83eb650eb3cf54d12f2f8b2b37c3a1a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="class_configuration.html" anchor="ace83eb650eb3cf54d12f2f8b2b37c3a1acb17869fe51048b5a5c4c6106551a255">Constant</enumvalue>
      <enumvalue file="class_configuration.html" anchor="ace83eb650eb3cf54d12f2f8b2b37c3a1a47c14840d8e15331fa420b9b2f757cd9">Variable</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>Configuration</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ad0c165f67f5ab2ab40e86d28de696989</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>angularDiameterDistance</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a6592ac4d431f245e54e839d8b81f0177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpatialCellLibrary *</type>
      <name>cellLibrary</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a9153c543a8b5a5652dfbde68c81acd08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dustEmissionSourceWeight</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a56c0909ec6bc0dc8d00005ffc846faaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dustEmissionWavelengthBias</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a97522b10f794305492066c7305eae714</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WavelengthDistribution *</type>
      <name>dustEmissionWavelengthBiasDistribution</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ab8fab9647c25aa330d80292c90ecc32c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DisjointWavelengthGrid *</type>
      <name>dustEmissionWLG</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a9a1f6b7958f00e00478203ea560b4cce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emulationMode</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a193ad9b670415e34968196ea68cceb4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>explicitAbsorption</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a6364d474fe5c984d2a40b2dca42e2296</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>forceScattering</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a604426d9e096e1f6d75107782ea422b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gridDimension</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a3e6c5ade893874c6a50626e1db46fa70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasConstantPerceivedWavelength</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a101f2a430a3cf09a8ed0bfcba3f1e229</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDustEmission</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a4c6f7797a94faec8f26136995b76c09f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDynamicStateRecipes</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a3ff3a338f464e9687072026ea1d4533a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGasEmission</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a9ddd568da28a6ed8b50a1c62f6f6e84a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMagneticField</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ae93c7f88a3d3709327a63f48cd5ad6e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMedium</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ac6f3a3322cd2ae1a82b57541ecafcb97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMergedIterations</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ad1f54147e6624e3f4b48840a1c87b9be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMovingMedia</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ae34679ee9f8055813752ca29123c339c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMultipleConstantSectionMedia</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a1ead8d994b5029e75a38b97815e7c019</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNegativeExtinction</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>aaceb83d3063b380e8a01b2f88371793c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPanRadiationField</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a7591537e77eee5b4aa643f0989ca95dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPolarization</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>af3962f82c35fb861399126813f936c37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPrimaryDynamicState</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a9685e21279cd6860288f9b55fbc32b66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPrimaryDynamicStateMedia</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a089f70de298653e7aaf921224f641a24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPrimaryIterations</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a278f11ca71c318ff19edba269b0a26b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRadiationField</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ad794931eb884eca78278934841894d91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScatteringDispersion</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ac730c4ac875567cce6205b0dea23b42a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSecondaryDynamicState</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>abd54a576e52aa5d46318ff3169b56f03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSecondaryDynamicStateMedia</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a0f974bc3ad5add9ccf0748ac666b4ca9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSecondaryEmission</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a0d6e41070a38be8e5ae438f302b0d42d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSecondaryIterations</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ab01908821f022630dd38dbdc489799d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSecondaryRadiationField</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a40b7367191242bd92b4b713d3b6fef4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSingleConstantSectionMedium</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ac7c9a61ebad45f25533b754e8e4485c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSpheroidalPolarization</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>af35dffa6544cc0f849ff3975bad4c4a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStochasticDustEmission</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a18ed2a40fe8f0eef6ae92a716634c2dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVariableMedia</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a89b16b4c5ff3aaff0c5f392d1f06b7bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hubbleExpansionRate</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a66eda6107f1e8c91f9fab21820d4dc44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includeHeatingByCMB</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>af0ccfc585934b55f6ec6667aca712851</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>luminosityDistance</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a7ae7860d2e1a0cae76dc9e6b58c1b2d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LyaAccelerationScheme</type>
      <name>lyaAccelerationScheme</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a9a37534810a0c51e38535d95d03c0010</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lyaAccelerationStrength</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a361f8625f316887961cf7e1215f3c901</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>magneticFieldMediumIndex</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a584cb7762ffc47d887871ac57c140a1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxFractionOfPrevious</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a7034783ed0ba27955cd9cf6c4d56a5a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxFractionOfPrimary</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ad5cbc087f4c972f1aef24cd806796912</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxPrimaryIterations</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a62d515666b52841623d5af32a2be0cd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxSecondaryIterations</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a420d3605fe3b6df2212117bb90bed814</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mediaNeedGeneratePosition</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a2e3ec33c416f16752a21994026af58d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>minPrimaryIterations</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ae03ecf1a2ed61f362067a995105dcc32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>minScattEvents</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>aec269e9cf124ef327ee23c786e3960b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>minSecondaryIterations</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a072dbef1f7d67382c82a31270b28a9db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWeightReduction</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a2322b2f3bb12fcc50616338e6ee8ce63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>modelDimension</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>aa576d7c52e06b1b3d57776fd333c08d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numDensitySamples</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a3082d4d7eb6def259c70e80a0b3c99fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numPrimaryIterationPackets</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ad527ba9a8013d15329b806150c1d32b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numPrimaryPackets</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a822453fb3508e956aef0d13181dbbf28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPropertySamples</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a4557db3e777b9054d378139bc5c25361</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numSecondaryIterationPackets</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>aad92335e6320f264a96c354f801e89d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numSecondaryPackets</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a438f96288f09000e17c933f8494e21fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>oligochromatic</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>afb94883c99a4212b1f207ecc962c4e4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WavelengthDistribution *</type>
      <name>oligoWavelengthBiasDistribution</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a933f0ccd248655d44e12dbaeffae4995</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pathLengthBias</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a28cbc2496951d75e37ed91acdb9ae98a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DisjointWavelengthGrid *</type>
      <name>radiationFieldWLG</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a9a0ddc174a47037ee6529738d2135eb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>redshift</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ab599b4808f213c3a314a14487638c165</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>secondarySourceBias</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ab0f44863c402d3da419da82498397dfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>secondarySpatialBias</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a7a47f83aae18fac0c4f22c2d3ba40cea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmulationMode</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>ad0f50ad8d32eda32ffdbbd8c6653f3be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>simulationWavelengthRange</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a05a99df9fd64f469227216d655566f68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; double &gt;</type>
      <name>simulationWavelengths</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a352de2c1e9db7f06cc46af1e187a523e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>snapshotsNeedGetEntities</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>afb564a4e92e53c7333bda13e51724701</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>sourceWavelengthRange</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>aa521c0b4a9b50188a46242dd5019b123</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>storeEmissionRadiationField</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a5ebc0ed57730a64be6ce68096bd1f727</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WavelengthGrid *</type>
      <name>wavelengthGrid</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>af93ebe70eaeb4b81183cad6b6ceec836</anchor>
      <arglist>(WavelengthGrid *localWavelengthGrid) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>a5f59325e49f01afb49200fc33cca9d8e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_configuration.html</anchorfile>
      <anchor>aca0bd56e4941f54d9761ebb46c84c8ed</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConicalAngularDistribution</name>
    <filename>class_conical_angular_distribution.html</filename>
    <base>AxAngularDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>generateInclinationCosine</name>
      <anchorfile>class_conical_angular_distribution.html</anchorfile>
      <anchor>a76c56bac592a618d77ef3cc791f0f2cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>openingAngle</name>
      <anchorfile>class_conical_angular_distribution.html</anchorfile>
      <anchor>a4888b4b70b4e891388ac27f44dd61206</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probabilityForInclinationCosine</name>
      <anchorfile>class_conical_angular_distribution.html</anchorfile>
      <anchor>ac809d35fa28323e40b1291d446449f82</anchor>
      <arglist>(double costheta) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConicalAngularDistribution</name>
      <anchorfile>class_conical_angular_distribution.html</anchorfile>
      <anchor>a64073a0c2ffe20e430dd67c2a57a5639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_conical_angular_distribution.html</anchorfile>
      <anchor>adb36cc082c60e70570d4a22c61a78d30</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConicalShellGeometry</name>
    <filename>class_conical_shell_geometry.html</filename>
    <base>AxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>cutoffRadius</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>adcf5f72c844fe15bd01df11866f283cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>a299d8ea23248f6c60f427086dabd1b6e</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponent</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>a1c44d86395cf6bc6911f70b3faf54b3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>a2ba11b258864585049ac4aab6f76a7fc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>index</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>ab691535aea9454f95c570367af523e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxAngle</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>a9f962a9720b19c91c6dd677517cc9d43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxRadius</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>aa7668d1353a26e97c8bda81a45d66279</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minAngle</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>add22d5d524c6485af2ba0f28af37cef1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minRadius</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>a6e648d98c30502f95467276967ff70fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reshapeInnerRadius</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>ae813164e6980225d35b6ef0d851e5091</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>af455a8f3478d41e199b24b7dc4a310e3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>a889b36e4d46b844d21feef2f42ae51e5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConicalShellGeometry</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>aaaf096aebbcbb1d62b7818d0577ccf94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_conical_shell_geometry.html</anchorfile>
      <anchor>a3e8f2c213a142f57f487e35d12d4c530</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Console</name>
    <filename>class_console.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>error</name>
      <anchorfile>class_console.html</anchorfile>
      <anchor>a4a332f6de7256b6f02a256d20c5d2880</anchor>
      <arglist>(string message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>info</name>
      <anchorfile>class_console.html</anchorfile>
      <anchor>a1db2c71b4e727ef76f068dd83740e3e0</anchor>
      <arglist>(string message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>promptForBool</name>
      <anchorfile>class_console.html</anchorfile>
      <anchor>a8528dc1eb4d318d4cf0152c7cead9797</anchor>
      <arglist>(string message, bool hasDef, bool def)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>promptForChoice</name>
      <anchorfile>class_console.html</anchorfile>
      <anchor>ad36b168e0e43a9c0a79a40410d9389f6</anchor>
      <arglist>(string message, const vector&lt; string &gt; &amp;choices, bool hasDef=false, int defIndex=-1, bool allowNoChoice=false, string noChoiceMessage=string())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>promptForInt</name>
      <anchorfile>class_console.html</anchorfile>
      <anchor>a225d31b12741bca30812f8bb6fec1cbd</anchor>
      <arglist>(string message, int min, int max, bool hasDef, int def)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>promptForString</name>
      <anchorfile>class_console.html</anchorfile>
      <anchor>a957a5a058075418392eb77e2e7afea8e</anchor>
      <arglist>(string message, bool hasDef, string def)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>success</name>
      <anchorfile>class_console.html</anchorfile>
      <anchor>a74f691f03246b2785b53ecd36bb8dd8a</anchor>
      <arglist>(string message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>warning</name>
      <anchorfile>class_console.html</anchorfile>
      <anchor>acbe0dbdce1c6b2d902985a28f7d2d1f8</anchor>
      <arglist>(string message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConsoleHierarchyCreator</name>
    <filename>class_console_hierarchy_creator.html</filename>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Item &gt;</type>
      <name>create</name>
      <anchorfile>class_console_hierarchy_creator.html</anchorfile>
      <anchor>a9d93f1dee9f4b0ff872988377bf12b0e</anchor>
      <arglist>(const SchemaDef *schema)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>promptForDouble</name>
      <anchorfile>class_console_hierarchy_creator.html</anchorfile>
      <anchor>a411b8d73b326053a2a98bc2cb250ddcb</anchor>
      <arglist>(string prefix, const DoublePropertyHandler *handler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector&lt; double &gt;</type>
      <name>promptForDoubleList</name>
      <anchorfile>class_console_hierarchy_creator.html</anchorfile>
      <anchor>a8c07185f0a88e66e012cb485ae55cd58</anchor>
      <arglist>(string prefix, const DoubleListPropertyHandler *handler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConsoleLog</name>
    <filename>class_console_log.html</filename>
    <base>Log</base>
    <member kind="function">
      <type></type>
      <name>ConsoleLog</name>
      <anchorfile>class_console_log.html</anchorfile>
      <anchor>a683fde8fdfcb010a1b7cba6ec69a2ac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConsoleLog</name>
      <anchorfile>class_console_log.html</anchorfile>
      <anchor>a7fc7947cc92d505d83855453cd5625e0</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>output</name>
      <anchorfile>class_console_log.html</anchorfile>
      <anchor>abd1e6a9095fba9cfe5ff0fa0eaefcd35</anchor>
      <arglist>(string message, Level level) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ContGasSecondarySource</name>
    <filename>class_cont_gas_secondary_source.html</filename>
    <base>SecondarySource</base>
    <member kind="function">
      <type></type>
      <name>ContGasSecondarySource</name>
      <anchorfile>class_cont_gas_secondary_source.html</anchorfile>
      <anchor>a668e958fa07227a03ca5083452724aec</anchor>
      <arglist>(SimulationItem *parent, int h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launch</name>
      <anchorfile>class_cont_gas_secondary_source.html</anchorfile>
      <anchor>a55b560d184e7e740561d913a0484998c</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double L) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>prepareLuminosities</name>
      <anchorfile>class_cont_gas_secondary_source.html</anchorfile>
      <anchor>a15474d96e84174f0fadbac2ccd8f9c32</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preparePacketMap</name>
      <anchorfile>class_cont_gas_secondary_source.html</anchorfile>
      <anchor>aeec05e44419bb2a9be5c4cf9c484a552</anchor>
      <arglist>(size_t firstIndex, size_t numIndices) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ContSED</name>
    <filename>class_cont_s_e_d.html</filename>
    <base>SED</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_cont_s_e_d.html</anchorfile>
      <anchor>a30af51d865817792c73d9bb2c9332b6c</anchor>
      <arglist>(double wavelength) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>specificLuminosityArray</name>
      <anchorfile>class_cont_s_e_d.html</anchorfile>
      <anchor>a37f2da7ff4adb14beb19dda3154c0cf9</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, const Range &amp;wavelengthRange) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ContSED</name>
      <anchorfile>class_cont_s_e_d.html</anchorfile>
      <anchor>aadc2dab672c1f0c8a6126730fdb58717</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConvergenceCutsProbe</name>
    <filename>class_convergence_cuts_probe.html</filename>
    <base>SpecialtyWhenProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConvergenceCutsProbe</name>
      <anchorfile>class_convergence_cuts_probe.html</anchorfile>
      <anchor>acd07a3a6ad72eba8999d1a8b82be00bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_convergence_cuts_probe.html</anchorfile>
      <anchor>a525cfb9c2eef7efac5e3000917660f9f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_convergence_cuts_probe.html</anchorfile>
      <anchor>adfeb02d3f9d1a6e0478fb17021e599ab</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConvergenceInfoProbe</name>
    <filename>class_convergence_info_probe.html</filename>
    <base>SpecialtyWavelengthProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConvergenceInfoProbe</name>
      <anchorfile>class_convergence_info_probe.html</anchorfile>
      <anchor>a4b6c46d0a0470b80350b6ef9bae468f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_convergence_info_probe.html</anchorfile>
      <anchor>a9f4a9990b8e356e5dcd8e9ffbb490518</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConvexPolygon</name>
    <filename>class_convex_polygon.html</filename>
    <member kind="function">
      <type></type>
      <name>ConvexPolygon</name>
      <anchorfile>class_convex_polygon.html</anchorfile>
      <anchor>a8e1041c1037e5c3e9d218f22ec786e82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_convex_polygon.html</anchorfile>
      <anchor>a88d41a7acb59b49971ba18db91dd5f9c</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bottom</name>
      <anchorfile>class_convex_polygon.html</anchorfile>
      <anchor>af12656aaab4644fa067b64adc78517b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>count</name>
      <anchorfile>class_convex_polygon.html</anchorfile>
      <anchor>a6ad6b727f063eb3bd10210c4a3cb7b0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>leftFor</name>
      <anchorfile>class_convex_polygon.html</anchorfile>
      <anchor>a4cd1da1577b0876ec46b79711c2b4094</anchor>
      <arglist>(double y) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rightFor</name>
      <anchorfile>class_convex_polygon.html</anchorfile>
      <anchor>a7d391d2fb27811e59f822f105755ff3e</anchor>
      <arglist>(double y) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>top</name>
      <anchorfile>class_convex_polygon.html</anchorfile>
      <anchor>a14c2b526bf5cdd9d98461792dbc20e2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>class_convex_polygon.html</anchorfile>
      <anchor>a86bb44d517516f276692ed7dbcdd9d07</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>class_convex_polygon.html</anchorfile>
      <anchor>a8427ebba5c24541757cbf31dc365c821</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>maxPoints</name>
      <anchorfile>class_convex_polygon.html</anchorfile>
      <anchor>a1e574deb2335e1f73f5bf8017b42e52c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Cosmology</name>
    <filename>class_cosmology.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>angularDiameterDistance</name>
      <anchorfile>class_cosmology.html</anchorfile>
      <anchor>a4129712cc32de64cae3cd601c8315722</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>luminosityDistance</name>
      <anchorfile>class_cosmology.html</anchorfile>
      <anchor>a77982b3b662fa59f09ef56f8861bf633</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>modelRedshift</name>
      <anchorfile>class_cosmology.html</anchorfile>
      <anchor>ad60142a46aeba00571efcbed93d60c05</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>relativeExpansionRate</name>
      <anchorfile>class_cosmology.html</anchorfile>
      <anchor>a42dbc179f99dcf6efcfe06d9b6ba5282</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cosmology</name>
      <anchorfile>class_cosmology.html</anchorfile>
      <anchor>a65605ac821284585c4b7cec76506c0cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CreateRootWizardPane</name>
    <filename>class_create_root_wizard_pane.html</filename>
    <member kind="slot">
      <type>void</type>
      <name>selectTypeFor</name>
      <anchorfile>class_create_root_wizard_pane.html</anchorfile>
      <anchor>a9d6cc9f99a45dbe9ea1630edc5d061fb</anchor>
      <arglist>(QAbstractButton *button)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>rootTypeChanged</name>
      <anchorfile>class_create_root_wizard_pane.html</anchorfile>
      <anchor>a6a4072d88b3ba97c07f4b5c16d9d7f8c</anchor>
      <arglist>(string newRootType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CreateRootWizardPane</name>
      <anchorfile>class_create_root_wizard_pane.html</anchorfile>
      <anchor>ad34dee09e7b95aa33346e61b935c6547</anchor>
      <arglist>(const SchemaDef *schema, string initialType, QObject *target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CrystalEnstatiteGrainComposition</name>
    <filename>class_crystal_enstatite_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_crystal_enstatite_grain_composition.html</anchorfile>
      <anchor>a21c879539fa7df06a163d2cb6348baab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_crystal_enstatite_grain_composition.html</anchorfile>
      <anchor>aa01921c75729c5d5887e0caa8fcf3c36</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_crystal_enstatite_grain_composition.html</anchorfile>
      <anchor>accbefa91114452823e1239ddbc4ed9b7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_crystal_enstatite_grain_composition.html</anchorfile>
      <anchor>ae4e47d1d335179ec5f461cb144d15883</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CrystalEnstatiteGrainComposition</name>
      <anchorfile>class_crystal_enstatite_grain_composition.html</anchorfile>
      <anchor>a51aa5e7218b359beb1d97326894a8574</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CrystalForsteriteGrainComposition</name>
    <filename>class_crystal_forsterite_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_crystal_forsterite_grain_composition.html</anchorfile>
      <anchor>ab785e118d1fdaba9a6948ebacfb20e50</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_crystal_forsterite_grain_composition.html</anchorfile>
      <anchor>acd259ae530b8760d4e2a222eefa64526</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_crystal_forsterite_grain_composition.html</anchorfile>
      <anchor>ae5fac1453f8a586462be7919d065f9de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_crystal_forsterite_grain_composition.html</anchorfile>
      <anchor>a1f1ac11912d707e66f082f256fcb656c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CrystalForsteriteGrainComposition</name>
      <anchorfile>class_crystal_forsterite_grain_composition.html</anchorfile>
      <anchor>a804ab03af36254fb13c1f43c0e85c2bf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CubicalBackgroundSource</name>
    <filename>class_cubical_background_source.html</filename>
    <base>CenteredSource</base>
    <member kind="function">
      <type>double</type>
      <name>edgeLength</name>
      <anchorfile>class_cubical_background_source.html</anchorfile>
      <anchor>a3ee049c49c03c9acc26170062189d2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>intrinsicDimension</name>
      <anchorfile>class_cubical_background_source.html</anchorfile>
      <anchor>a2e61735b1e775050cfb0f4519cd4e874</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launchSpecialty</name>
      <anchorfile>class_cubical_background_source.html</anchorfile>
      <anchor>a0f25d3d55c7dcb9a0b0e4c1f8f238a49</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double lambda, double Lw, VelocityInterface *bvi) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CubicalBackgroundSource</name>
      <anchorfile>class_cubical_background_source.html</anchorfile>
      <anchor>a1e59efeae0fbd23db0c3617cdef456c0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CubicSplineSmoothingKernel</name>
    <filename>class_cubic_spline_smoothing_kernel.html</filename>
    <base>SmoothingKernel</base>
    <member kind="function">
      <type>double</type>
      <name>columnDensity</name>
      <anchorfile>class_cubic_spline_smoothing_kernel.html</anchorfile>
      <anchor>a0aecac01f9407c0e1cf199395d31be45</anchor>
      <arglist>(double q) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_cubic_spline_smoothing_kernel.html</anchorfile>
      <anchor>ad29f2cca8dfac7236c22a19114454f1b</anchor>
      <arglist>(double u) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>generateRadius</name>
      <anchorfile>class_cubic_spline_smoothing_kernel.html</anchorfile>
      <anchor>abaab31793ee4b1b94707a48d851d9778</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CubicSplineSmoothingKernel</name>
      <anchorfile>class_cubic_spline_smoothing_kernel.html</anchorfile>
      <anchor>afd8782d8395444b455fd7d1b89d1adac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_cubic_spline_smoothing_kernel.html</anchorfile>
      <anchor>a9555071ca25d738498f6d7194f0753ad</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CustomStateProbe</name>
    <filename>class_custom_state_probe.html</filename>
    <base>SpatialGridWhenFormProbe</base>
    <member kind="function">
      <type>string</type>
      <name>indices</name>
      <anchorfile>class_custom_state_probe.html</anchorfile>
      <anchor>a9c4b4118ab6fc286fcc2f3a4a542311c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_custom_state_probe.html</anchorfile>
      <anchor>a40ae367ff861b7494bb5fcd29d2963f3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CustomStateProbe</name>
      <anchorfile>class_custom_state_probe.html</anchorfile>
      <anchor>a0b294a34f856a4a2cffe1baf8f9cb0e3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Cylinder2DSpatialGrid</name>
    <filename>class_cylinder2_d_spatial_grid.html</filename>
    <base>CylinderSpatialGrid</base>
    <member kind="function">
      <type>int</type>
      <name>cellIndex</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>adf7b7413691855ba751aae5c03dda97d</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>centralPositionInCell</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>a83f9d6f00c5bde52514b218b9eab098c</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; PathSegmentGenerator &gt;</type>
      <name>createPathSegmentGenerator</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>a06f1a77292517493d9ad1c4c0a0faaf4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>a60340eaeed571c20302de27acdfa6d5d</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>a7bb3063d047ff29ab6bd403b512c4538</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Mesh *</type>
      <name>meshRadial</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>a08b341d78b4908f35eeb4a1e56b26203</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MoveableMesh *</type>
      <name>meshZ</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>ab7f82350fe315a1d8def13bc36ddbc62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numCells</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>a760e9876b936aa86347eed46e0f8e911</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>randomPositionInCell</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>a95aec8af45d2e7de321dea1c9bee8e23</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>abf8cceed7ff2c1c8af93bba585f79f85</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>addc75041d3335c7410b92b87549e124e</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cylinder2DSpatialGrid</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>ac1e8ed2cd7222af3ed6995ec25b5a464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xy</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>a37d2d0a64bac4e4bde4c45928af83ce8</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xz</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>a9dc9a2691e8b69a923f0d80f3502414f</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>index</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>a2c744599f55d33a0361c694d7fb5321e</anchor>
      <arglist>(int i, int k) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>invertIndex</name>
      <anchorfile>class_cylinder2_d_spatial_grid.html</anchorfile>
      <anchor>acfae8bc9ffb98083640810fb02754941</anchor>
      <arglist>(int m, int &amp;i, int &amp;k) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CylinderSpatialGrid</name>
    <filename>class_cylinder_spatial_grid.html</filename>
    <base>SpatialGrid</base>
    <member kind="function">
      <type>double</type>
      <name>maxRadius</name>
      <anchorfile>class_cylinder_spatial_grid.html</anchorfile>
      <anchor>a5856d66f1ad43ca40c820508f77d2f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxZ</name>
      <anchorfile>class_cylinder_spatial_grid.html</anchorfile>
      <anchor>aa4c0ef6c1cabcc6863ab12d809accbe8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minZ</name>
      <anchorfile>class_cylinder_spatial_grid.html</anchorfile>
      <anchor>ac5a68e5e953df29521e8768a40014852</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CylinderSpatialGrid</name>
      <anchorfile>class_cylinder_spatial_grid.html</anchorfile>
      <anchor>ae7477ca43c5da42602065cc85a76b945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Box</type>
      <name>boundingBox</name>
      <anchorfile>class_cylinder_spatial_grid.html</anchorfile>
      <anchor>ab5fb6293573d2666e5a17ac4126bd9c9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_cylinder_spatial_grid.html</anchorfile>
      <anchor>a3710c579feb92ba1dc5993812c976119</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CylindricalClipGeometryDecorator</name>
    <filename>class_cylindrical_clip_geometry_decorator.html</filename>
    <base>ClipGeometryDecorator</base>
    <member kind="function">
      <type>double</type>
      <name>clipRadius</name>
      <anchorfile>class_cylindrical_clip_geometry_decorator.html</anchorfile>
      <anchor>a2b9550e2394f9622544347b6123b4e78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_cylindrical_clip_geometry_decorator.html</anchorfile>
      <anchor>a8b8a816b672c513681b238db79f419a0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>class_cylindrical_clip_geometry_decorator.html</anchorfile>
      <anchor>ae2809298196ef8ea586d178271ce7101</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_cylindrical_clip_geometry_decorator.html</anchorfile>
      <anchor>add33a24bbca007400510d2a3593123f8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_cylindrical_clip_geometry_decorator.html</anchorfile>
      <anchor>a49c9e136c9f677bc217c54a9ead7b519</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_cylindrical_clip_geometry_decorator.html</anchorfile>
      <anchor>af37395bbcec6abd4252c5b572dbaa725</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CylindricalClipGeometryDecorator</name>
      <anchorfile>class_cylindrical_clip_geometry_decorator.html</anchorfile>
      <anchor>a357765630590c2b028718e4cd0e5b387</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CylindricalVectorField</name>
    <filename>class_cylindrical_vector_field.html</filename>
    <base>VectorField</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_cylindrical_vector_field.html</anchorfile>
      <anchor>a6d7800f74c747295c7f3f83d5c25c44b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponent</name>
      <anchorfile>class_cylindrical_vector_field.html</anchorfile>
      <anchor>aae4232743f2730510697f206631ccdaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unityRadius</name>
      <anchorfile>class_cylindrical_vector_field.html</anchorfile>
      <anchor>ac5c4e07fa5d12a76f07a9f3ccd130385</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>vector</name>
      <anchorfile>class_cylindrical_vector_field.html</anchorfile>
      <anchor>aa961155d1157d891db5f63d9e40e54a4</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CylindricalVectorField</name>
      <anchorfile>class_cylindrical_vector_field.html</anchorfile>
      <anchor>a08bbcfb531ebaf2e9ee98732844a4cf8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultCutsForm</name>
    <filename>class_default_cuts_form.html</filename>
    <base>SpatialGridForm</base>
    <member kind="function">
      <type></type>
      <name>DefaultCutsForm</name>
      <anchorfile>class_default_cuts_form.html</anchorfile>
      <anchor>ab2924874427f490852002bc881a0516b</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_default_cuts_form.html</anchorfile>
      <anchor>a5c165acbe681371511c5b3960beb70fd</anchor>
      <arglist>(const ProbeFormBridge *bridge) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DefaultCutsForm</name>
      <anchorfile>class_default_cuts_form.html</anchorfile>
      <anchor>a251f490834d343f3c452228b9cf4881d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DensityInCellInterface</name>
    <filename>class_density_in_cell_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DensityInCellInterface</name>
      <anchorfile>class_density_in_cell_interface.html</anchorfile>
      <anchor>a23c276394128bca175c5b2ee8302b8c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>numberDensity</name>
      <anchorfile>class_density_in_cell_interface.html</anchorfile>
      <anchor>a7a4819aa3d19e5137e1e711459f827b1</anchor>
      <arglist>(int h, int m) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DensityInCellInterface</name>
      <anchorfile>class_density_in_cell_interface.html</anchorfile>
      <anchor>a0542496849d0a8d9f4f50dce50db689f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DensityProbe</name>
    <filename>class_density_probe.html</filename>
    <base>SpatialGridWhenFormProbe</base>
    <member kind="enumeration">
      <type></type>
      <name>Aggregation</name>
      <anchorfile>class_density_probe.html</anchorfile>
      <anchor>aec0fc56574adb7b9ae440cbdb091a96f</anchor>
      <arglist></arglist>
      <enumvalue file="class_density_probe.html" anchor="aec0fc56574adb7b9ae440cbdb091a96fa2cb05e4bb7830be982f0922fed86b4cd">Component</enumvalue>
      <enumvalue file="class_density_probe.html" anchor="aec0fc56574adb7b9ae440cbdb091a96faa1fa27779242b4902f7ae3bdd5c6d508">Type</enumvalue>
    </member>
    <member kind="function">
      <type>Aggregation</type>
      <name>aggregation</name>
      <anchorfile>class_density_probe.html</anchorfile>
      <anchor>a35d35ecd96ba9b5c39b0230c43494d42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_density_probe.html</anchorfile>
      <anchor>ac7e21ba11dfdc0553dc16b7de8ce3930</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DensityProbe</name>
      <anchorfile>class_density_probe.html</anchorfile>
      <anchor>ab518f74c7d0fed987e3070936424312c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DensityTreePolicy</name>
    <filename>class_density_tree_policy.html</filename>
    <base>TreePolicy</base>
    <base>MaterialWavelengthRangeInterface</base>
    <member kind="function">
      <type>vector&lt; TreeNode * &gt;</type>
      <name>constructTree</name>
      <anchorfile>class_density_tree_policy.html</anchorfile>
      <anchor>ae8421792110143f8d0de3a160daa69ab</anchor>
      <arglist>(TreeNode *root) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxDustDensityDispersion</name>
      <anchorfile>class_density_tree_policy.html</anchorfile>
      <anchor>a1827c0d9a07eb6b99e07758bf64d5e2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxDustFraction</name>
      <anchorfile>class_density_tree_policy.html</anchorfile>
      <anchor>a12c7b58ca4bfadf9dae53a3944ff973c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxDustOpticalDepth</name>
      <anchorfile>class_density_tree_policy.html</anchorfile>
      <anchor>a5518eace9b8debe62981054ea11ba3a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxElectronFraction</name>
      <anchorfile>class_density_tree_policy.html</anchorfile>
      <anchor>ab5ec62c4bf207170d25f645d3c8428ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxGasFraction</name>
      <anchorfile>class_density_tree_policy.html</anchorfile>
      <anchor>adeab5653177ac0e5229fffa0523ac79a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelength</name>
      <anchorfile>class_density_tree_policy.html</anchorfile>
      <anchor>ae7b9ac0e307956f8123d7d5fd7e09172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_density_tree_policy.html</anchorfile>
      <anchor>a85f0d2d9c8ba79d2304e384cd3d9f1d1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DensityTreePolicy</name>
      <anchorfile>class_density_tree_policy.html</anchorfile>
      <anchor>a5fd3f7188e65953804d7453775a690e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_density_tree_policy.html</anchorfile>
      <anchor>a8b40c193acf448acfa79417fcc5bd6bb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>needsSubdivide</name>
      <anchorfile>class_density_tree_policy.html</anchorfile>
      <anchor>a8950ba85a2227e08bc5997991b7c034e</anchor>
      <arglist>(TreeNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DipolePhaseFunction</name>
    <filename>class_dipole_phase_function.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_dipole_phase_function.html</anchorfile>
      <anchor>a27c4c5d4ef68f37d65252c4507bc271b</anchor>
      <arglist>(Random *random, bool includePolarization=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peeloffScattering</name>
      <anchorfile>class_dipole_phase_function.html</anchorfile>
      <anchor>ac3d86107bd7ec42d9241840f998bc398</anchor>
      <arglist>(double &amp;I, double &amp;Q, double &amp;U, double &amp;V, Direction bfk, Direction bfkobs, Direction bfky, const StokesVector *sv) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>performScattering</name>
      <anchorfile>class_dipole_phase_function.html</anchorfile>
      <anchor>af28a4b2f01b81e7fc749a7613b2cb6d5</anchor>
      <arglist>(Direction bfk, StokesVector *sv) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyMueller</name>
      <anchorfile>class_dipole_phase_function.html</anchorfile>
      <anchor>a6670e22476ebf469c56a5a739fdca4c2</anchor>
      <arglist>(double theta, StokesVector *sv) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; double, double &gt;</type>
      <name>generateAnglesFromPhaseFunction</name>
      <anchorfile>class_dipole_phase_function.html</anchorfile>
      <anchor>a9230201cae87b6880d60368dbdb2c8f1</anchor>
      <arglist>(const StokesVector *sv) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>generateCosineFromPhaseFunction</name>
      <anchorfile>class_dipole_phase_function.html</anchorfile>
      <anchor>a246bffcd968a2eab5f2cbc69f47d23b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>phaseFunctionValue</name>
      <anchorfile>class_dipole_phase_function.html</anchorfile>
      <anchor>a79b30e04d2f4266cd411dd8769661c37</anchor>
      <arglist>(double theta, double phi, const StokesVector *sv) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>phaseFunctionValueForCosine</name>
      <anchorfile>class_dipole_phase_function.html</anchorfile>
      <anchor>ae1e458c04861a14338622f6dbc13ecc0</anchor>
      <arglist>(double costheta) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Direction</name>
    <filename>class_direction.html</filename>
    <base>Vec</base>
    <member kind="function">
      <type></type>
      <name>Direction</name>
      <anchorfile>class_direction.html</anchorfile>
      <anchor>aba0c848f9db9831e6feb64d978e6d019</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Direction</name>
      <anchorfile>class_direction.html</anchorfile>
      <anchor>a716a266d8373423f95d54dc5fc6b467f</anchor>
      <arglist>(double kx, double ky, double kz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Direction</name>
      <anchorfile>class_direction.html</anchorfile>
      <anchor>aee893456d21d9a99f09e1c5dd9f89117</anchor>
      <arglist>(double theta, double phi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Direction</name>
      <anchorfile>class_direction.html</anchorfile>
      <anchor>a9e86db4d1249792313ec7c3e8ca7f998</anchor>
      <arglist>(Vec k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartesian</name>
      <anchorfile>class_direction.html</anchorfile>
      <anchor>adff5b90b0285033cf87037a15b2cc6be</anchor>
      <arglist>(double &amp;kx, double &amp;ky, double &amp;kz) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>kx</name>
      <anchorfile>class_direction.html</anchorfile>
      <anchor>a49d6398930986371355522774f600722</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ky</name>
      <anchorfile>class_direction.html</anchorfile>
      <anchor>a37e2246ff583eaefa416d4a342c86182</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>kz</name>
      <anchorfile>class_direction.html</anchorfile>
      <anchor>a3789ff8b5ed71cc7e0da540017ecd187</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>operator-</name>
      <anchorfile>class_direction.html</anchorfile>
      <anchor>a0f056b8e60ba7ab9e1b6206722af1cbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spherical</name>
      <anchorfile>class_direction.html</anchorfile>
      <anchor>a0780e994e83a4f636574c069b695d4b5</anchor>
      <arglist>(double &amp;theta, double &amp;phi) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DiscreteWavelengthDistribution</name>
    <filename>class_discrete_wavelength_distribution.html</filename>
    <base>WavelengthDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_discrete_wavelength_distribution.html</anchorfile>
      <anchor>a05471104cfeba75be6f91a4943125ab1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probability</name>
      <anchorfile>class_discrete_wavelength_distribution.html</anchorfile>
      <anchor>a82638793333e193e357da58b9eacc2da</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function">
      <type>DisjointWavelengthGrid *</type>
      <name>wavelengthGrid</name>
      <anchorfile>class_discrete_wavelength_distribution.html</anchorfile>
      <anchor>a460a435b84735447ca1a6ab2131f5f77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiscreteWavelengthDistribution</name>
      <anchorfile>class_discrete_wavelength_distribution.html</anchorfile>
      <anchor>a8fb1f7beda05f65d0a8c835cb7354785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_discrete_wavelength_distribution.html</anchorfile>
      <anchor>adc672644a551d4bc5ec48fd21f6154e5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DisjointWavelengthGrid</name>
    <filename>class_disjoint_wavelength_grid.html</filename>
    <base>WavelengthGrid</base>
    <member kind="function">
      <type>int</type>
      <name>bin</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>aa7e51af5dd00489750f1b122a4c447eb</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; int &gt;</type>
      <name>bins</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a9137d0624df6aa6017248b9d059e4871</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>const Array &amp;</type>
      <name>dlambdav</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>ab337ae32450df8547f026fb8c912df52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>effectiveWidth</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a72e0ce2866e784293bb8f2c864beff46</anchor>
      <arglist>(int ell) const override</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>extdlambdav</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>aed95823b2ffd91edd6f3ad2096d65e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>extlambdav</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a08951eb40d8b2e6c905ae6f9ed13da2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Array &amp;</type>
      <name>lambdav</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a21e77754d280cbd2efbd41c60c1c3203</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>leftBorder</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a07f8116ba18f9dbfa127841164aedfe0</anchor>
      <arglist>(int ell) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numBins</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a6c0885b298cf94cf45cd084c80fd621f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rightBorder</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a10d3335447a4fd0819fdb63dc68eda51</anchor>
      <arglist>(int ell) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>transmission</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a0944692b8e53a74fd2a8ad3a9402c03e</anchor>
      <arglist>(int ell, double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelength</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>aca426ace4b2feeffbb8cc198516bfd53</anchor>
      <arglist>(int ell) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DisjointWavelengthGrid</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>adc110d9a2a341f96650833a7cb0bbb77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a81c925c6a3ba02b5360db5e70fd30b29</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWavelengthBins</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a3408d8d98b365656dff4392573938b85</anchor>
      <arglist>(const Array &amp;lambdav, double relativeHalfWidth, bool constantWidth=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWavelengthBorders</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>ac7b9249b0e8674ed75ba0857c1989046</anchor>
      <arglist>(const Array &amp;borderv, bool logScale)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWavelengthRange</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>acaf787138aaa0239d287b78ac8a80015</anchor>
      <arglist>(const Array &amp;lambdav, bool logScale)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWavelengthSegments</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a68c4ef67b5fc9a093d86933a1c3ac383</anchor>
      <arglist>(const Array &amp;bordcharv)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWavelengthSegments</name>
      <anchorfile>class_disjoint_wavelength_grid.html</anchorfile>
      <anchor>a6f77b9a1ba3a69d2470a319a5409ec7f</anchor>
      <arglist>(const vector&lt; double &gt; &amp;borderv, const vector&lt; double &gt; &amp;characv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DistantInstrument</name>
    <filename>class_distant_instrument.html</filename>
    <base>Instrument</base>
    <member kind="function">
      <type>double</type>
      <name>azimuth</name>
      <anchorfile>class_distant_instrument.html</anchorfile>
      <anchor>a4e1812ffd7de1855f74cf8976b358d53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>bfkobs</name>
      <anchorfile>class_distant_instrument.html</anchorfile>
      <anchor>a129247cbfa184b929d430ec4c055a299</anchor>
      <arglist>(const Position &amp;bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>bfky</name>
      <anchorfile>class_distant_instrument.html</anchorfile>
      <anchor>a91babc9ecc4f3f6746e1b020e9c95a80</anchor>
      <arglist>(const Position &amp;bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>determineSameObserverAsPreceding</name>
      <anchorfile>class_distant_instrument.html</anchorfile>
      <anchor>a131002a4f5f78363425ef3dab8746d67</anchor>
      <arglist>(const Instrument *precedingInstrument) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>class_distant_instrument.html</anchorfile>
      <anchor>a06d4c69cddd4f3b93ac90741194b1c71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inclination</name>
      <anchorfile>class_distant_instrument.html</anchorfile>
      <anchor>afe89f43e4e55278ab56f267dd71b3d7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>roll</name>
      <anchorfile>class_distant_instrument.html</anchorfile>
      <anchor>ac0007be5035cafac5c33213f2f9fbcec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistantInstrument</name>
      <anchorfile>class_distant_instrument.html</anchorfile>
      <anchor>a0c979f58c53bb735917ba11e1a71f2de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_distant_instrument.html</anchorfile>
      <anchor>a8925ebf9fc126892c988bbfa156b6a40</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoubleListPropertyHandler</name>
    <filename>class_double_list_property_handler.html</filename>
    <base>AbstractDoublePropertyHandler</base>
    <member kind="function">
      <type>void</type>
      <name>acceptVisitor</name>
      <anchorfile>class_double_list_property_handler.html</anchorfile>
      <anchor>ae5591ee2cc0741fdcee4fffd37111488</anchor>
      <arglist>(PropertyHandlerVisitor *visitor) override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; double &gt;</type>
      <name>defaultValue</name>
      <anchorfile>class_double_list_property_handler.html</anchorfile>
      <anchor>ad05120e502dfd26abedf67ad34b3ce88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNames</name>
      <anchorfile>class_double_list_property_handler.html</anchorfile>
      <anchor>ab33b1e87b63b1e4eac0ae5f425c844cb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidValue</name>
      <anchorfile>class_double_list_property_handler.html</anchorfile>
      <anchor>a3a8f61b8b19824422f44caca9748ac09</anchor>
      <arglist>(string value) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>class_double_list_property_handler.html</anchorfile>
      <anchor>af5dab81b46f22350982d3bd2c949e411</anchor>
      <arglist>(vector&lt; double &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; double &gt;</type>
      <name>value</name>
      <anchorfile>class_double_list_property_handler.html</anchorfile>
      <anchor>aeae549b5924759990fdc7ac049a4f984</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoubleListPropertyWizardPane</name>
    <filename>class_double_list_property_wizard_pane.html</filename>
    <base>PropertyWizardPane</base>
    <member kind="slot">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>class_double_list_property_wizard_pane.html</anchorfile>
      <anchor>af89bd9e9577813569c93c50c9df6a1b1</anchor>
      <arglist>(const QString &amp;text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleListPropertyWizardPane</name>
      <anchorfile>class_double_list_property_wizard_pane.html</anchorfile>
      <anchor>a2650af34df79711957bf4bbcb264b0d7</anchor>
      <arglist>(std::unique_ptr&lt; PropertyHandler &gt; handler, QObject *target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateInterface</name>
      <anchorfile>class_double_list_property_wizard_pane.html</anchorfile>
      <anchor>a250f5380b423558e9166df2731e72596</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoublePropertyHandler</name>
    <filename>class_double_property_handler.html</filename>
    <base>AbstractDoublePropertyHandler</base>
    <member kind="function">
      <type>void</type>
      <name>acceptVisitor</name>
      <anchorfile>class_double_property_handler.html</anchorfile>
      <anchor>ae1892225bc00135f0e0946021cc13fb3</anchor>
      <arglist>(PropertyHandlerVisitor *visitor) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>defaultValue</name>
      <anchorfile>class_double_property_handler.html</anchorfile>
      <anchor>ae6166163447c6d457252044d5f88bef0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNames</name>
      <anchorfile>class_double_property_handler.html</anchorfile>
      <anchor>a0c24fe7983da8b848bb155ddafda5c44</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidValue</name>
      <anchorfile>class_double_property_handler.html</anchorfile>
      <anchor>a84b07c62155763c43ba13107a129be74</anchor>
      <arglist>(string value) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>class_double_property_handler.html</anchorfile>
      <anchor>a6bb558ef9be520c03e35a3662032908b</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>class_double_property_handler.html</anchorfile>
      <anchor>a68c2ce95a2c58fbad953057f0dc99e52</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DoublePropertyWizardPane</name>
    <filename>class_double_property_wizard_pane.html</filename>
    <base>PropertyWizardPane</base>
    <member kind="slot">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>class_double_property_wizard_pane.html</anchorfile>
      <anchor>a4d888abc5c530a560f9f8b09b3dfa0e8</anchor>
      <arglist>(const QString &amp;text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoublePropertyWizardPane</name>
      <anchorfile>class_double_property_wizard_pane.html</anchorfile>
      <anchor>a39445e662d5009b4b641e4d8f557e61a</anchor>
      <arglist>(std::unique_ptr&lt; PropertyHandler &gt; handler, QObject *target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateInterface</name>
      <anchorfile>class_double_property_wizard_pane.html</anchorfile>
      <anchor>a4a248ff69c681f1a6bcffe32dcceaa60</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DraineGraphiteGrainComposition</name>
    <filename>class_draine_graphite_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type></type>
      <name>DraineGraphiteGrainComposition</name>
      <anchorfile>class_draine_graphite_grain_composition.html</anchorfile>
      <anchor>ae3ae16b18022a6a1f80ad92b6bb7502a</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_draine_graphite_grain_composition.html</anchorfile>
      <anchor>a039a525c79d3e5a387ae12ce75d26892</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_draine_graphite_grain_composition.html</anchorfile>
      <anchor>a08ff651eac99b9658f982ac6d3e959ac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_draine_graphite_grain_composition.html</anchorfile>
      <anchor>ae101b4b5c82791dd65e97ba371971f45</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_draine_graphite_grain_composition.html</anchorfile>
      <anchor>abd13eabc775acb81900e75e7a169a7df</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DraineGraphiteGrainComposition</name>
      <anchorfile>class_draine_graphite_grain_composition.html</anchorfile>
      <anchor>a28a8ffbc329b28bd5263cf8ed5dac428</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DraineIonizedPAHGrainComposition</name>
    <filename>class_draine_ionized_p_a_h_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type></type>
      <name>DraineIonizedPAHGrainComposition</name>
      <anchorfile>class_draine_ionized_p_a_h_grain_composition.html</anchorfile>
      <anchor>aeee9d672fffacc7c0db4897cfc684e9d</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_draine_ionized_p_a_h_grain_composition.html</anchorfile>
      <anchor>a964affa989488673422e803323286c8d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_draine_ionized_p_a_h_grain_composition.html</anchorfile>
      <anchor>a278aa8813335e65484be77d0e07d7e0b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_draine_ionized_p_a_h_grain_composition.html</anchorfile>
      <anchor>a5cf66bbae76ac719bc69a3b4b4f50658</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_draine_ionized_p_a_h_grain_composition.html</anchorfile>
      <anchor>a4bb4d490d108351d59427aacc0fac5c5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DraineIonizedPAHGrainComposition</name>
      <anchorfile>class_draine_ionized_p_a_h_grain_composition.html</anchorfile>
      <anchor>aba2d20e7577c5768d519f930d4cf9a72</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DraineLiDustMix</name>
    <filename>class_draine_li_dust_mix.html</filename>
    <base>MultiGrainDustMix</base>
    <member kind="function">
      <type>int</type>
      <name>numGraphiteSizes</name>
      <anchorfile>class_draine_li_dust_mix.html</anchorfile>
      <anchor>a89ed12dd8a9348a9c8011bef33f11eea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPAHSizes</name>
      <anchorfile>class_draine_li_dust_mix.html</anchorfile>
      <anchor>a397683515561f08b8aae8f6107900337</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSilicateSizes</name>
      <anchorfile>class_draine_li_dust_mix.html</anchorfile>
      <anchor>a11c8ece141b02a7478d5dac46beb5d27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DraineLiDustMix</name>
      <anchorfile>class_draine_li_dust_mix.html</anchorfile>
      <anchor>ad1bb437e777a35875a7b06f13270fdc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_draine_li_dust_mix.html</anchorfile>
      <anchor>a32df0952e67b59660055189a042d4dc1</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DraineNeutralPAHGrainComposition</name>
    <filename>class_draine_neutral_p_a_h_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type></type>
      <name>DraineNeutralPAHGrainComposition</name>
      <anchorfile>class_draine_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>ad5d49957e62d38df9f94823cfc5773ca</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_draine_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>a3282ffb8604cda5b30610e2443589a06</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_draine_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>acc93af19e8ddb74c1f015837cfe32da8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_draine_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>a34b9dfa9a418fc4f7618129432ce7776</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_draine_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>a6b441f45bf05145aaffa472b970cd107</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DraineNeutralPAHGrainComposition</name>
      <anchorfile>class_draine_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>ad461733d7cdc952dd7008fb8a3950319</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DraineSilicateGrainComposition</name>
    <filename>class_draine_silicate_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type></type>
      <name>DraineSilicateGrainComposition</name>
      <anchorfile>class_draine_silicate_grain_composition.html</anchorfile>
      <anchor>a3176c3778bd2f96e86175c34c39faf6d</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_draine_silicate_grain_composition.html</anchorfile>
      <anchor>acf4dd8e0c7c3f7d99bc714aa6769b358</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_draine_silicate_grain_composition.html</anchorfile>
      <anchor>aa1cc0ddd036ed9cf63b7621742fe8219</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_draine_silicate_grain_composition.html</anchorfile>
      <anchor>a1d60445864cb08742950b4b5ab28f611</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_draine_silicate_grain_composition.html</anchorfile>
      <anchor>a6b88b36ba4ddd15a9f598d2c3b547ce7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DraineSilicateGrainComposition</name>
      <anchorfile>class_draine_silicate_grain_composition.html</anchorfile>
      <anchor>a9b2532cbb2df72ca43fb640186b50589</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DustAbsorptionPerCellProbe</name>
    <filename>class_dust_absorption_per_cell_probe.html</filename>
    <base>SpecialtyProbe</base>
    <member kind="function">
      <type>bool</type>
      <name>writeWavelengthGrid</name>
      <anchorfile>class_dust_absorption_per_cell_probe.html</anchorfile>
      <anchor>a087f872c20d9a0cf62e65607305f4859</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DustAbsorptionPerCellProbe</name>
      <anchorfile>class_dust_absorption_per_cell_probe.html</anchorfile>
      <anchor>afea88809e5908cf2002a0bff29005d17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_dust_absorption_per_cell_probe.html</anchorfile>
      <anchor>a5710338e4738b35418febb7822952faa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>When</type>
      <name>when</name>
      <anchorfile>class_dust_absorption_per_cell_probe.html</anchorfile>
      <anchor>a95ea2a8542b6597247e3e0f41a18e904</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DustDestructionRecipe</name>
    <filename>class_dust_destruction_recipe.html</filename>
    <base>DynamicStateRecipe</base>
    <member kind="function">
      <type>void</type>
      <name>beginUpdate</name>
      <anchorfile>class_dust_destruction_recipe.html</anchorfile>
      <anchor>a6763fdfb37d74f383603878bcda101e1</anchor>
      <arglist>(int numCells) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>densityFraction</name>
      <anchorfile>class_dust_destruction_recipe.html</anchorfile>
      <anchor>a93de449a06fba5152b60c4806ef60295</anchor>
      <arglist>(bool graphite, double a, const Array &amp;Jv, double T) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>densityFractionTolerance</name>
      <anchorfile>class_dust_destruction_recipe.html</anchorfile>
      <anchor>a2da1f716a54b299b0141f2af045a6f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UpdateStatus</type>
      <name>update</name>
      <anchorfile>class_dust_destruction_recipe.html</anchorfile>
      <anchor>a9e12be38cf9f5aedd8b31888c2bcf808</anchor>
      <arglist>(MaterialState *state, const Array &amp;Jv) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DustDestructionRecipe</name>
      <anchorfile>class_dust_destruction_recipe.html</anchorfile>
      <anchor>ad60df0de3a285b41a9a98a959b0376ff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DustEmGrainComposition</name>
    <filename>class_dust_em_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="enumeration">
      <type></type>
      <name>GrainType</name>
      <anchorfile>class_dust_em_grain_composition.html</anchorfile>
      <anchor>a19a71d2f89a5d61f75528a685e1ff20a</anchor>
      <arglist></arglist>
      <enumvalue file="class_dust_em_grain_composition.html" anchor="a19a71d2f89a5d61f75528a685e1ff20aaddf628d4c882e0a732c4c599864b2b71">aSil</enumvalue>
      <enumvalue file="class_dust_em_grain_composition.html" anchor="a19a71d2f89a5d61f75528a685e1ff20aab1bef137839cb8525260d0742d674254">Gra</enumvalue>
      <enumvalue file="class_dust_em_grain_composition.html" anchor="a19a71d2f89a5d61f75528a685e1ff20aa8826abad677a46837c52d5bc027a10b6">PAH0DL07</enumvalue>
      <enumvalue file="class_dust_em_grain_composition.html" anchor="a19a71d2f89a5d61f75528a685e1ff20aa1a379d53402bffb3a4db3ec8994a5a61">PAH1DL07</enumvalue>
      <enumvalue file="class_dust_em_grain_composition.html" anchor="a19a71d2f89a5d61f75528a685e1ff20aa7e929065acdc63af28375ff0554d06cd">PAH0MC10</enumvalue>
      <enumvalue file="class_dust_em_grain_composition.html" anchor="a19a71d2f89a5d61f75528a685e1ff20aa8ef7a61b8c4a40b7605aa4aa01bde340">PAH1MC10</enumvalue>
      <enumvalue file="class_dust_em_grain_composition.html" anchor="a19a71d2f89a5d61f75528a685e1ff20aa09877b5eb49d17f392fd14f4f8169991">CM20</enumvalue>
      <enumvalue file="class_dust_em_grain_composition.html" anchor="a19a71d2f89a5d61f75528a685e1ff20aa23e05c94edcb45e4a839912e3d00c01f">aOlM5</enumvalue>
      <enumvalue file="class_dust_em_grain_composition.html" anchor="a19a71d2f89a5d61f75528a685e1ff20aadb82235c42393b423839e2b1523e6214">aPyM5</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>DustEmGrainComposition</name>
      <anchorfile>class_dust_em_grain_composition.html</anchorfile>
      <anchor>a07386890de9def6ee6416b62a5c4f174</anchor>
      <arglist>(SimulationItem *parent, GrainType grainType, double bulkMassDensity)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_dust_em_grain_composition.html</anchorfile>
      <anchor>a71b45b0e188e0ae12c7f0d05b66de590</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bulkMassDensity</name>
      <anchorfile>class_dust_em_grain_composition.html</anchorfile>
      <anchor>aff9b981a6419a6d28ea46098eea6eae3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GrainType</type>
      <name>grainType</name>
      <anchorfile>class_dust_em_grain_composition.html</anchorfile>
      <anchor>ad2ccf0a2d244d83dd165d8d94df508ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_dust_em_grain_composition.html</anchorfile>
      <anchor>a26439b33895d58d361f620f7aad8fced</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_dust_em_grain_composition.html</anchorfile>
      <anchor>ab4dc8a28c5d97b8b6928e25bbb98e41e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_dust_em_grain_composition.html</anchorfile>
      <anchor>a60f1835427758aac31728e0d7838e903</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DustEmGrainComposition</name>
      <anchorfile>class_dust_em_grain_composition.html</anchorfile>
      <anchor>a97ef6f580e6bc0b3b44b4bae7e966141</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DustEmissionOptions</name>
    <filename>class_dust_emission_options.html</filename>
    <base>SimulationItem</base>
    <base>SourceWavelengthRangeInterface</base>
    <member kind="enumeration">
      <type></type>
      <name>EmissionType</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>a885b344f12bd68fe42ff37931dad4b0a</anchor>
      <arglist></arglist>
      <enumvalue file="class_dust_emission_options.html" anchor="a885b344f12bd68fe42ff37931dad4b0aaa75f36525e4c25f25b3a1e1251b2a67a">Equilibrium</enumvalue>
      <enumvalue file="class_dust_emission_options.html" anchor="a885b344f12bd68fe42ff37931dad4b0aa7034d72178527959767784e9faadfca7">Stochastic</enumvalue>
    </member>
    <member kind="function">
      <type>SpatialCellLibrary *</type>
      <name>cellLibrary</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>abfaafda91e954f5504b3c8d8e143f7e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EmissionType</type>
      <name>dustEmissionType</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>a95defe3e64cad4cbe2f96974f5d752a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DisjointWavelengthGrid *</type>
      <name>dustEmissionWLG</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>af1f8bc78985bed9103931eb9bbfb75d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includeHeatingByCMB</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>a8e0228c6723516ffdc747a1de681fc91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxFractionOfPrevious</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>a1eef1cf30c9de08dfd337d20063356f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxFractionOfPrimary</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>a1e66137bbe8c31635bb4186fcdcca563</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sourceWeight</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>a5dd86c2cc95abcd88baf595fdb4132a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelengthBias</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>ad3a2db2f861b2645d8a4df9be35e7106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WavelengthDistribution *</type>
      <name>wavelengthBiasDistribution</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>aac70d4939a8451516997c9a204853dfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>acd636f0f6f9e3506eadd1c7bea0bff52</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DustEmissionOptions</name>
      <anchorfile>class_dust_emission_options.html</anchorfile>
      <anchor>a8fd1008725e20f6a04ca2214b5a7dd98</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DustEmissionWavelengthGridProbe</name>
    <filename>class_dust_emission_wavelength_grid_probe.html</filename>
    <base>SpecialtyProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>DustEmissionWavelengthGridProbe</name>
      <anchorfile>class_dust_emission_wavelength_grid_probe.html</anchorfile>
      <anchor>ad6780f5d5ca5bf840d055ee062f4bbc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_dust_emission_wavelength_grid_probe.html</anchorfile>
      <anchor>a80fdd29df368d49326c5e11ed92d6f4c</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DustEmissivityProbe</name>
    <filename>class_dust_emissivity_probe.html</filename>
    <base>SpecialtyProbe</base>
    <member kind="function">
      <type>bool</type>
      <name>writeWavelengthGrid</name>
      <anchorfile>class_dust_emissivity_probe.html</anchorfile>
      <anchor>a2ce11dc550274fe34014c9f6f385a663</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DustEmissivityProbe</name>
      <anchorfile>class_dust_emissivity_probe.html</anchorfile>
      <anchor>adabfe96f013888ed25181814f8b5df89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_dust_emissivity_probe.html</anchorfile>
      <anchor>a81b062b94fbec6efd75e92e3e06361be</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DustGrainPopulationsProbe</name>
    <filename>class_dust_grain_populations_probe.html</filename>
    <base>SpecialtyProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>DustGrainPopulationsProbe</name>
      <anchorfile>class_dust_grain_populations_probe.html</anchorfile>
      <anchor>adc0967c22f475d7c12dd5fd5e524e322</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_dust_grain_populations_probe.html</anchorfile>
      <anchor>abe5b8caf8477557d017b71ff434e190d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DustGrainSizeDistributionProbe</name>
    <filename>class_dust_grain_size_distribution_probe.html</filename>
    <base>SpecialtyProbe</base>
    <member kind="function">
      <type>int</type>
      <name>numSamples</name>
      <anchorfile>class_dust_grain_size_distribution_probe.html</anchorfile>
      <anchor>a6a5d7aa323bebc9fbc469a95c2b31119</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DustGrainSizeDistributionProbe</name>
      <anchorfile>class_dust_grain_size_distribution_probe.html</anchorfile>
      <anchor>a0eb82bc203642ed7fa00a8f038c8074a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_dust_grain_size_distribution_probe.html</anchorfile>
      <anchor>a296a1bb895e2cee3d938a645fdaaf158</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DustMix</name>
    <filename>class_dust_mix.html</filename>
    <base>MaterialMix</base>
    <member kind="enumeration">
      <type></type>
      <name>ScatteringMode</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>aa6f94e7445420a838912c1253d91d2ea</anchor>
      <arglist></arglist>
      <enumvalue file="class_dust_mix.html" anchor="aa6f94e7445420a838912c1253d91d2eaadf03fa94525bed29cd8cd726fb338735">HenyeyGreenstein</enumvalue>
      <enumvalue file="class_dust_mix.html" anchor="aa6f94e7445420a838912c1253d91d2eaae1f691a01e0e3edb7adee4b84ab4e13c">MaterialPhaseFunction</enumvalue>
      <enumvalue file="class_dust_mix.html" anchor="aa6f94e7445420a838912c1253d91d2eaab02b4090d4958ca37bd4762064df2907">SphericalPolarization</enumvalue>
      <enumvalue file="class_dust_mix.html" anchor="aa6f94e7445420a838912c1253d91d2eaa6d36c530edffccc776359ef014a09679">SpheroidalPolarization</enumvalue>
    </member>
    <member kind="function">
      <type>double</type>
      <name>asymmpar</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a91d408017654c5f7a71b72804f64ebeb</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>emissionSpectrum</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>af4e7ef348f1b9bc5a90a4b8a8df4cf95</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>DisjointWavelengthGrid *</type>
      <name>emissionWavelengthGrid</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>ae60071a0322c0fd74e08075ae3bc0ef9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>emissivity</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a6c0a58d81186267621db5bc96e8841ab</anchor>
      <arglist>(const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasContinuumEmission</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a465d82e8e02cd9f708e7ff20a864aad4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeTemperature</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a2090f63dfb82b5151b28477c3f752988</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a01742b964a0b3d76323e1b5b9d3fcf24</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>MaterialType</type>
      <name>materialType</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>ace1267d092b28189abd917dedb0caa51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityAbs</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a1f9ed6a0f9c3249911058de4a315fba5</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>af870530a860a17d89f452b4c12a6842e</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacitySca</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>aded4566f412db22327550e453cc8e1a2</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peeloffScattering</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a66e739947da33eab4ede2d6222c80846</anchor>
      <arglist>(double &amp;I, double &amp;Q, double &amp;U, double &amp;V, double &amp;lambda, Direction bfkobs, Direction bfky, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performScattering</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a8e7cd558b17616d97ca1ddf2ff66a1e0</anchor>
      <arglist>(double lambda, const MaterialState *state, PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScatteringMode</type>
      <name>scatteringMode</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>abe8d15133605cb188325903378534a7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionAbs</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>ab6539bad0eb7daec3ac32d2cbf2d3833</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionExt</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a8a9a74f0e89cc21a92187c9257ddc442</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>const Array &amp;</type>
      <name>sectionsAbs</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a20704adfdbc7a20dbbe8d392427a6336</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>const Array &amp;</type>
      <name>sectionsAbspol</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>acf0be48d90f31fea255fa0731b8cb6cf</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionSca</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a716fa8c5df619813b512154863052109</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; StateVariable &gt;</type>
      <name>specificStateVariableInfo</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a3830ff2320b426d70d673d2c808e9c92</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Array &amp;</type>
      <name>thetaGrid</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a2981ae5e3ee6bc12892897bc4079d4c6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DustMix</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>ad033602a189bf808037e03a943bf50a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>getOpticalProperties</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>ad6b775f4831ca3208504fc76b065672d</anchor>
      <arglist>(const Array &amp;lambdav, const Array &amp;thetav, Array &amp;sigmaabsv, Array &amp;sigmascav, Array &amp;asymmparv, Table&lt; 2 &gt; &amp;S11vv, Table&lt; 2 &gt; &amp;S12vv, Table&lt; 2 &gt; &amp;S33vv, Table&lt; 2 &gt; &amp;S34vv, ArrayTable&lt; 2 &gt; &amp;sigmaabsvv, ArrayTable&lt; 2 &gt; &amp;sigmaabspolvv)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>informAvailableWavelengthRange</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a106246c173f48cf60efad6107c678075</anchor>
      <arglist>(Range available)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual size_t</type>
      <name>initializeExtraProperties</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>aaeea16bfa2a6570d415446fa3538440e</anchor>
      <arglist>(const Array &amp;lambdav)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a664f909cf1384b24d8f83f8d42d1bcf9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyMueller</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a2394a4f187a22f26873bbd34ce60eea3</anchor>
      <arglist>(double lambda, double theta, StokesVector *sv) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; double, double &gt;</type>
      <name>generateAnglesFromPhaseFunction</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a39951276ea8ad23131b8e9ba88988a12</anchor>
      <arglist>(double lambda, const StokesVector *sv) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>generateCosineFromPhaseFunction</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a7393fcf64d13e9e7b29f635624f23b51</anchor>
      <arglist>(double lambda) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>indexForLambda</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>ad02f4713c010abd7f880d7b013e83b05</anchor>
      <arglist>(double lambda) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>indexForTheta</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a28f289a5432e50cf46bfa3b45c7ffc5c</anchor>
      <arglist>(double theta) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>phaseFunctionValue</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>a3531b344e48abc73b87401fda8bb88a3</anchor>
      <arglist>(double lambda, double theta, double phi, const StokesVector *sv) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>phaseFunctionValueForCosine</name>
      <anchorfile>class_dust_mix.html</anchorfile>
      <anchor>ac24e862860dc2017c915cc348b0932ad</anchor>
      <arglist>(double lambda, double costheta) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DustMixFragment</name>
    <filename>class_dust_mix_fragment.html</filename>
    <base>MultiGrainDustMix</base>
    <member kind="function">
      <type></type>
      <name>DustMixFragment</name>
      <anchorfile>class_dust_mix_fragment.html</anchorfile>
      <anchor>a54afa014ca74c0441d996f0b7d305e32</anchor>
      <arglist>(SimulationItem *parent, ScatteringMode scatteringMode, const GrainPopulation *population)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DustMixFragment</name>
      <anchorfile>class_dust_mix_fragment.html</anchorfile>
      <anchor>adc46ec53fe5b5836e5c98e61b4dc7019</anchor>
      <arglist>(SimulationItem *parent, ScatteringMode scatteringMode, const GrainPopulation *population, double amin, double amax, double normalization)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>grainRadius</name>
      <anchorfile>class_dust_mix_fragment.html</anchorfile>
      <anchor>add60b2dbba6017da32f8391a7ea957df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGraphite</name>
      <anchorfile>class_dust_mix_fragment.html</anchorfile>
      <anchor>a45c51fe7ffbca92468a68ba4a2cd40b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScatteringMode</type>
      <name>scatteringMode</name>
      <anchorfile>class_dust_mix_fragment.html</anchorfile>
      <anchor>ae99a2cc98c41e4b256ad57b23dcf6499</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_dust_mix_fragment.html</anchorfile>
      <anchor>a1781a11c502a7b735ad44c06631a6d56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_dust_mix_fragment.html</anchorfile>
      <anchor>ab19118a2721ca315078e84ac804298fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>type</name>
      <anchorfile>class_dust_mix_fragment.html</anchorfile>
      <anchor>a316ab51309b77d3019aad4b97b2c5a69</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DustSecondarySource</name>
    <filename>class_dust_secondary_source.html</filename>
    <base>SecondarySource</base>
    <member kind="function">
      <type>void</type>
      <name>launch</name>
      <anchorfile>class_dust_secondary_source.html</anchorfile>
      <anchor>a87adf17727b75ea7d4d8ec9d180cbcab</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double L) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>prepareLuminosities</name>
      <anchorfile>class_dust_secondary_source.html</anchorfile>
      <anchor>a368b176f7a97a7c658d7e205314c9e42</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preparePacketMap</name>
      <anchorfile>class_dust_secondary_source.html</anchorfile>
      <anchor>a3b9c1cf39ce8e7ab31771850e4cca574</anchor>
      <arglist>(size_t firstIndex, size_t numIndices) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SecondarySource</name>
      <anchorfile>class_dust_secondary_source.html</anchorfile>
      <anchor>a08d3b1214d549381fb44d2308e0d6be4</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynamicStateOptions</name>
    <filename>class_dynamic_state_options.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>const vector&lt; DynamicStateRecipe * &gt; &amp;</type>
      <name>recipes</name>
      <anchorfile>class_dynamic_state_options.html</anchorfile>
      <anchor>a7a035b463cc61a1c8a875bc39b3067f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DynamicStateOptions</name>
      <anchorfile>class_dynamic_state_options.html</anchorfile>
      <anchor>a435900ea81f7fba21fad8e8b0c460f68</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynamicStateRecipe</name>
    <filename>class_dynamic_state_recipe.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>beginUpdate</name>
      <anchorfile>class_dynamic_state_recipe.html</anchorfile>
      <anchor>a3a50f6dab51e3d7b4b38a76fec351386</anchor>
      <arglist>(int numCells)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>endUpdate</name>
      <anchorfile>class_dynamic_state_recipe.html</anchorfile>
      <anchor>a2f773a0bd79a7273ab519c4b501c9c16</anchor>
      <arglist>(int numCells, int numUpdated, int numNotConverged)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxNotConvergedCells</name>
      <anchorfile>class_dynamic_state_recipe.html</anchorfile>
      <anchor>a21cc677be28d5b3e5622c5f5783fbb0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UpdateStatus</type>
      <name>update</name>
      <anchorfile>class_dynamic_state_recipe.html</anchorfile>
      <anchor>af3a0dd1e5a3226c868e80ed7a57ae489</anchor>
      <arglist>(MaterialState *state, const Array &amp;Jv)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DynamicStateRecipe</name>
      <anchorfile>class_dynamic_state_recipe.html</anchorfile>
      <anchor>aec84d4cc1aed5ecf7ff1b37434e13d8a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EinastoGeometry</name>
    <filename>class_einasto_geometry.html</filename>
    <base>SpheGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_einasto_geometry.html</anchorfile>
      <anchor>ae136b675e8bdcc7d572c6a7436c94a8d</anchor>
      <arglist>(double r) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>halfMassRadius</name>
      <anchorfile>class_einasto_geometry.html</anchorfile>
      <anchor>ae07292dcdd6b37de779808400f0f99d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>index</name>
      <anchorfile>class_einasto_geometry.html</anchorfile>
      <anchor>aa10ef2594de4f2c473679375759a6139</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomRadius</name>
      <anchorfile>class_einasto_geometry.html</anchorfile>
      <anchor>aa41ee9ed79c313d2add8aa050c0f8b24</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sigmar</name>
      <anchorfile>class_einasto_geometry.html</anchorfile>
      <anchor>a67ecac7dad7babb4f8e7dfdd6a9150fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EinastoGeometry</name>
      <anchorfile>class_einasto_geometry.html</anchorfile>
      <anchor>a78481a7b435f194de433a4c0ef0d90dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_einasto_geometry.html</anchorfile>
      <anchor>a0afce8799fd48ebcdb4aa79babb3c436</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ElectronMix</name>
    <filename>class_electron_mix.html</filename>
    <base>MaterialMix</base>
    <member kind="function">
      <type>double</type>
      <name>defaultTemperature</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a00b06d2152e6f1f5f19af0aa4dfa13bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPolarizedScattering</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a28f552f183b4eecbf3fe0761fea69ca7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScatteringDispersion</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a787535d36a450dd148705144b9fc2965</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includePolarization</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a44a9303472f1aabb391fa3151f866c17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includeThermalDispersion</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a04adf920f51fbb2501702c3c55d9ac22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeTemperature</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a601fd4e00892b4ecb1b2a2e24d6f15bd</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSpecificState</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a063a341faaaa3fa17a37bb27ad1cd725</anchor>
      <arglist>(MaterialState *state, double metallicity, double temperature, const Array &amp;params) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>aadbba8859a0a43685d90f738053a07fa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>MaterialType</type>
      <name>materialType</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a6ff2ebcdd92b741f0da2e8dd85fb3586</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityAbs</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a476514ef42314b1ffe76bf8b790ae27c</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a7e9110778dae42fc89ec9678aa24994a</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacitySca</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>ad364ca049cc53f2ec96539aac70368a8</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peeloffScattering</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a50eccc6c31d4fb6a54b4b9157807a8f2</anchor>
      <arglist>(double &amp;I, double &amp;Q, double &amp;U, double &amp;V, double &amp;lambda, Direction bfkobs, Direction bfky, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performScattering</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>aa2ed176785a36249b50bcda95ece4d84</anchor>
      <arglist>(double lambda, const MaterialState *state, PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionAbs</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a10b4689ae42cdf8bddf34f30a6804a00</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionExt</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a668ade56227bb232530c9323749f7435</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionSca</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>ae5e0ce74e08880d0cf1f63dc99dac790</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; StateVariable &gt;</type>
      <name>specificStateVariableInfo</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a8bee9d0f2dd79e7fb92889faab4fc564</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ElectronMix</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a7d7c3cde601b479bfde1043264e0df7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_electron_mix.html</anchorfile>
      <anchor>a0d23e37fdb7cb1a71076fdc4be5a734d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EmittingGasMix</name>
    <filename>class_emitting_gas_mix.html</filename>
    <base>MaterialMix</base>
    <base>SourceWavelengthRangeInterface</base>
    <member kind="function">
      <type>MaterialType</type>
      <name>materialType</name>
      <anchorfile>class_emitting_gas_mix.html</anchorfile>
      <anchor>a02e7e2856c5906348c0393b1f7bed9c9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sourceWeight</name>
      <anchorfile>class_emitting_gas_mix.html</anchorfile>
      <anchor>a0aff6bbaadba22630a4a629b3af843df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelengthBias</name>
      <anchorfile>class_emitting_gas_mix.html</anchorfile>
      <anchor>a369f5fb6521e0071799d9128f69195c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WavelengthDistribution *</type>
      <name>wavelengthBiasDistribution</name>
      <anchorfile>class_emitting_gas_mix.html</anchorfile>
      <anchor>a69452f132c4a265904e16caddf464ebf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_emitting_gas_mix.html</anchorfile>
      <anchor>a3c1224e9d1363c289a06a912a0367a03</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EmittingGasMix</name>
      <anchorfile>class_emitting_gas_mix.html</anchorfile>
      <anchor>aae7d492ee59581dc4887ae091841b906</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EntityCollection</name>
    <filename>class_entity_collection.html</filename>
    <member kind="typedef">
      <type>std::unordered_map&lt; int, double &gt;</type>
      <name>Map</name>
      <anchorfile>class_entity_collection.html</anchorfile>
      <anchor>aa4302139148c9b5e284c9be9bb52cdd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityCollection</name>
      <anchorfile>class_entity_collection.html</anchorfile>
      <anchor>a6f5824373233e2a817a60a362cd14d30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>accumulate</name>
      <anchorfile>class_entity_collection.html</anchorfile>
      <anchor>ad962a8a444a4b77e95cb571d8f5dcc90</anchor>
      <arglist>(std::function&lt; double(int m)&gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_entity_collection.html</anchorfile>
      <anchor>adf6e3b854b27353c17ab28894b31edc8</anchor>
      <arglist>(int m, double w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSingle</name>
      <anchorfile>class_entity_collection.html</anchorfile>
      <anchor>abaf607a3b529f1f16a221b013fa96490</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>average</name>
      <anchorfile>class_entity_collection.html</anchorfile>
      <anchor>aa03fb578d3558e4ac98b11a7def27dac</anchor>
      <arglist>(std::function&lt; double(int m)&gt; value, std::function&lt; double(int m)&gt; weight)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Vec, double &gt;</type>
      <name>average</name>
      <anchorfile>class_entity_collection.html</anchorfile>
      <anchor>a332ba70f658a886d431c073affc7e33d</anchor>
      <arglist>(std::function&lt; Vec(int m)&gt; value, std::function&lt; double(int m)&gt; weight)</arglist>
    </member>
    <member kind="function">
      <type>Map::const_iterator</type>
      <name>begin</name>
      <anchorfile>class_entity_collection.html</anchorfile>
      <anchor>aa6cd7e89bab5823b71a534c6bda53876</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_entity_collection.html</anchorfile>
      <anchor>a32f9a6bd74f31ea7bb8513a8e90f135a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Map::const_iterator</type>
      <name>end</name>
      <anchorfile>class_entity_collection.html</anchorfile>
      <anchor>a1db8fd710d57c1440bd058fa72872f11</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnumPropertyHandler</name>
    <filename>class_enum_property_handler.html</filename>
    <base>PropertyHandler</base>
    <member kind="function">
      <type>void</type>
      <name>acceptVisitor</name>
      <anchorfile>class_enum_property_handler.html</anchorfile>
      <anchor>a8fd497a788d0b00bdbc5f78368664417</anchor>
      <arglist>(PropertyHandlerVisitor *visitor) override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>defaultValue</name>
      <anchorfile>class_enum_property_handler.html</anchorfile>
      <anchor>a96391ecddf70b12d37bac564ff2fb291</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertNames</name>
      <anchorfile>class_enum_property_handler.html</anchorfile>
      <anchor>abd4c6bc702d0681513c831a7a30782db</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidValue</name>
      <anchorfile>class_enum_property_handler.html</anchorfile>
      <anchor>a809d5d8a6498d022edc6296b7b2dd647</anchor>
      <arglist>(string value) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_enum_property_handler.html</anchorfile>
      <anchor>a842d0c91ab41aee39f48c0b2159ad785</anchor>
      <arglist>(const PropertyHandler &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_enum_property_handler.html</anchorfile>
      <anchor>a70cc449cdf73913e21c3b1951baa6d2c</anchor>
      <arglist>(Item *target, const PropertyDef *property, const SchemaDef *schema, NameManager *nameMgr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>class_enum_property_handler.html</anchorfile>
      <anchor>a966884fd3cdba6ed8c929d6087adf3af</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>titleForValue</name>
      <anchorfile>class_enum_property_handler.html</anchorfile>
      <anchor>a4d5aab15ddf0573278b5da913aa72e8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>titlesForValues</name>
      <anchorfile>class_enum_property_handler.html</anchorfile>
      <anchor>ad81e14aa867a8174e3cb23076245449b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>value</name>
      <anchorfile>class_enum_property_handler.html</anchorfile>
      <anchor>a97f584c4d809e64bdc16569e9800771e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>values</name>
      <anchorfile>class_enum_property_handler.html</anchorfile>
      <anchor>a9f6330117be67e8f2c225c98846ec160</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnumPropertyWizardPane</name>
    <filename>class_enum_property_wizard_pane.html</filename>
    <base>PropertyWizardPane</base>
    <member kind="slot">
      <type>void</type>
      <name>updateValueFor</name>
      <anchorfile>class_enum_property_wizard_pane.html</anchorfile>
      <anchor>a9595a82bf0d5435500a14f10a1951f76</anchor>
      <arglist>(QAbstractButton *button)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumPropertyWizardPane</name>
      <anchorfile>class_enum_property_wizard_pane.html</anchorfile>
      <anchor>aadd09821abbe7e1f5476a51be01f305d</anchor>
      <arglist>(std::unique_ptr&lt; PropertyHandler &gt; handler, QObject *target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EquilibriumDustEmissionCalculator</name>
    <filename>class_equilibrium_dust_emission_calculator.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>allocatedBytes</name>
      <anchorfile>class_equilibrium_dust_emission_calculator.html</anchorfile>
      <anchor>aed463c180bbdb9643b3ec81bcca565de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>emissivity</name>
      <anchorfile>class_equilibrium_dust_emission_calculator.html</anchorfile>
      <anchor>a1e14d2bad5167d40a3f83bc4963a04c8</anchor>
      <arglist>(const Array &amp;Jv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>equilibriumTemperature</name>
      <anchorfile>class_equilibrium_dust_emission_calculator.html</anchorfile>
      <anchor>abecfaacd56447a4bf86caf3079b0e6e2</anchor>
      <arglist>(int b, const Array &amp;Jv) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numBins</name>
      <anchorfile>class_equilibrium_dust_emission_calculator.html</anchorfile>
      <anchor>a40cc3dcb7aa17cc348427088f1617bb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precalculate</name>
      <anchorfile>class_equilibrium_dust_emission_calculator.html</anchorfile>
      <anchor>abf8e4f89242c9cab99815e71f30fb5b4</anchor>
      <arglist>(SimulationItem *item, const Array &amp;lambdav, const Array &amp;sigmaabsv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExpDiskGeometry</name>
    <filename>class_exp_disk_geometry.html</filename>
    <base>SepAxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>maxRadius</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>aada36eab69cd6920d079b51aa2afd8ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxZ</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>aed2b3cfacb4914c4528c3b8b9fd6be11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minRadius</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>a24489817f1bf04cf4906327be9c2887f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleHeight</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>a520203599042cc76b12e28cc41445eb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleLength</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>a4ef564d0dd3947db02fd3e8184108932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExpDiskGeometry</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>ac2404f6b2539e78346f481043b528e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>a877293ff4e00a220a0ebf8ed23386f4c</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>randomCylRadius</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>aee1566a5f4ae3b8226f617467d467394</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>randomZ</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>abf539ce8c701cd73d543d2eb53bf85b2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>a85091d659092ccd8c68139e3124ca6a5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>a7c8799ce01574f571b343d4c5640675e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_exp_disk_geometry.html</anchorfile>
      <anchor>a2e20c8e60c83d6ab2ba76d0a18ff1726</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExtragalacticUnits</name>
    <filename>class_extragalactic_units.html</filename>
    <base>Units</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExtragalacticUnits</name>
      <anchorfile>class_extragalactic_units.html</anchorfile>
      <anchor>a9108ce48c841fccf9aa14477c2024bde</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FamilySED</name>
    <filename>class_family_s_e_d.html</filename>
    <base>ContSED</base>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_family_s_e_d.html</anchorfile>
      <anchor>afff77601474a686072dfb5e6d08d0edf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>integratedLuminosity</name>
      <anchorfile>class_family_s_e_d.html</anchorfile>
      <anchor>a102918db9b7f353697c89341308b4f9d</anchor>
      <arglist>(const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_family_s_e_d.html</anchorfile>
      <anchor>a080b89d6be6ef0d778e9d28cb903e5f8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_family_s_e_d.html</anchorfile>
      <anchor>a25edd07aa4c0f537663dd645904a0662</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>specificLuminosityArray</name>
      <anchorfile>class_family_s_e_d.html</anchorfile>
      <anchor>a5ace7a92858fcc6a53516985452a3cab</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FamilySED</name>
      <anchorfile>class_family_s_e_d.html</anchorfile>
      <anchor>a4530116a50b877c1fde3f06c95559ef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const SEDFamily *</type>
      <name>getFamilyAndParameters</name>
      <anchorfile>class_family_s_e_d.html</anchorfile>
      <anchor>a0414d048b3df851e594866625e94a90d</anchor>
      <arglist>(Array &amp;parameters)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_family_s_e_d.html</anchorfile>
      <anchor>acbe17e5f8a535affa0231b02952d73eb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FatalError</name>
    <filename>class_fatal_error.html</filename>
    <member kind="function">
      <type></type>
      <name>FatalError</name>
      <anchorfile>class_fatal_error.html</anchorfile>
      <anchor>a044d3c564cce16a957499abe6549dbc0</anchor>
      <arglist>(string message, const char *file, int line, const char *function)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>message</name>
      <anchorfile>class_fatal_error.html</anchorfile>
      <anchor>ab4adfbb686fb9bd9ed1812dbe94a383c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FieldStrengthCellLibrary</name>
    <filename>class_field_strength_cell_library.html</filename>
    <base>SpatialCellLibrary</base>
    <member kind="function">
      <type>int</type>
      <name>numFieldStrengths</name>
      <anchorfile>class_field_strength_cell_library.html</anchorfile>
      <anchor>a35db60fd895860de48ab7706f2d13bd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FieldStrengthCellLibrary</name>
      <anchorfile>class_field_strength_cell_library.html</anchorfile>
      <anchor>a528d5485bce6de12abb6d47379f38620</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>mapping</name>
      <anchorfile>class_field_strength_cell_library.html</anchorfile>
      <anchor>a19afb7b3f8ff934c45b414fce538da19</anchor>
      <arglist>(const Array &amp;bv) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numEntries</name>
      <anchorfile>class_field_strength_cell_library.html</anchorfile>
      <anchor>a6d12c32b8a564d50a43a2d9892f5a89a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileBand</name>
    <filename>class_file_band.html</filename>
    <base>TabulatedBand</base>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_file_band.html</anchorfile>
      <anchor>a10b455f0d20ce802a02934595401d076</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileBand</name>
      <anchorfile>class_file_band.html</anchorfile>
      <anchor>a63589c3e81f136c589a2a9c4b5d1e9c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getWavelengthsAndTransmissions</name>
      <anchorfile>class_file_band.html</anchorfile>
      <anchor>a9747b23da7f11f39b36a43bd958eb9ba</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;transv) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileBorderWavelengthGrid</name>
    <filename>class_file_border_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="enumeration">
      <type></type>
      <name>Characteristic</name>
      <anchorfile>class_file_border_wavelength_grid.html</anchorfile>
      <anchor>aefe3a7911c009e7b8c0a19bd1c36be0b</anchor>
      <arglist></arglist>
      <enumvalue file="class_file_border_wavelength_grid.html" anchor="aefe3a7911c009e7b8c0a19bd1c36be0ba32a843da6ea40ab3b17a3421ccdf671b">Linear</enumvalue>
      <enumvalue file="class_file_border_wavelength_grid.html" anchor="aefe3a7911c009e7b8c0a19bd1c36be0ba2f8e38ec1a5832670c5011a71603c929">Logarithmic</enumvalue>
      <enumvalue file="class_file_border_wavelength_grid.html" anchor="aefe3a7911c009e7b8c0a19bd1c36be0bab4b379bf7ded74c07595ccb85bc6fdc3">Specified</enumvalue>
    </member>
    <member kind="function">
      <type>Characteristic</type>
      <name>characteristic</name>
      <anchorfile>class_file_border_wavelength_grid.html</anchorfile>
      <anchor>ad8d3cb7ec82d64ca1c774e7a393a7f4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_file_border_wavelength_grid.html</anchorfile>
      <anchor>a4e8e1ad90a914e83dd058abdd2cdb5e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileBorderWavelengthGrid</name>
      <anchorfile>class_file_border_wavelength_grid.html</anchorfile>
      <anchor>a0eda8cdab1c70c917d88ee0c25b7dcb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_file_border_wavelength_grid.html</anchorfile>
      <anchor>a3a561017482b887a8e940e35286dccb8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileGrainSizeDistribution</name>
    <filename>class_file_grain_size_distribution.html</filename>
    <base>GrainSizeDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>amax</name>
      <anchorfile>class_file_grain_size_distribution.html</anchorfile>
      <anchor>a6aa1373524003d0a08be2b835d2a60c8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>amin</name>
      <anchorfile>class_file_grain_size_distribution.html</anchorfile>
      <anchor>af41fdea2fc100cc3e9a6257625852118</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnda</name>
      <anchorfile>class_file_grain_size_distribution.html</anchorfile>
      <anchor>a67b5ce072aeb37041fc3fa86b9f6516a</anchor>
      <arglist>(double a) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_file_grain_size_distribution.html</anchorfile>
      <anchor>a69d79bd8c052d3145c1abc7b23f4bd73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileGrainSizeDistribution</name>
      <anchorfile>class_file_grain_size_distribution.html</anchorfile>
      <anchor>ab6990062fb7e6bebfd2536c080e8db0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_file_grain_size_distribution.html</anchorfile>
      <anchor>ae213c7ac7b42e2da28b14aeb95ea9389</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileIndexedSEDFamily</name>
    <filename>class_file_indexed_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_file_indexed_s_e_d_family.html</anchorfile>
      <anchor>a7cc54838ac606c8d7b293c1af9cce851</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_file_indexed_s_e_d_family.html</anchorfile>
      <anchor>a52e15b9efc693a978af50f650140b335</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_file_indexed_s_e_d_family.html</anchorfile>
      <anchor>a4f54b9b72dd90860de9af4a43d68c0d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_file_indexed_s_e_d_family.html</anchorfile>
      <anchor>aabb432739ca034c08ac5c56f7d60a2c0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_file_indexed_s_e_d_family.html</anchorfile>
      <anchor>a0b8bf5d58c6c49f184748f18ced075f9</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileIndexedSEDFamily</name>
      <anchorfile>class_file_indexed_s_e_d_family.html</anchorfile>
      <anchor>a70dd46532bc6b3eab481a7184d10a806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_file_indexed_s_e_d_family.html</anchorfile>
      <anchor>ad06e0d51e6dc15b76abcd4c9a9e40d9d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileLineSED</name>
    <filename>class_file_line_s_e_d.html</filename>
    <base>LineSED</base>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_file_line_s_e_d.html</anchorfile>
      <anchor>aaf7a25b23ca787ab95bb343f35707d8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileLineSED</name>
      <anchorfile>class_file_line_s_e_d.html</anchorfile>
      <anchor>a5d3719be68d3c5e772b1e6cc9bfc5deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getWavelengthsAndLuminosities</name>
      <anchorfile>class_file_line_s_e_d.html</anchorfile>
      <anchor>a6451133baf2fc9373fef9ac2cc328370</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;Lv) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileLog</name>
    <filename>class_file_log.html</filename>
    <base>Log</base>
    <member kind="function">
      <type></type>
      <name>FileLog</name>
      <anchorfile>class_file_log.html</anchorfile>
      <anchor>a86c36d4b3001126b9ada6f584908d27d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileLog</name>
      <anchorfile>class_file_log.html</anchorfile>
      <anchor>a7e54847fa81d539728400651cb44ca8b</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>output</name>
      <anchorfile>class_file_log.html</anchorfile>
      <anchor>a7a1f8d3637c61493d5d9f033d746f70e</anchor>
      <arglist>(string message, Level level) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_file_log.html</anchorfile>
      <anchor>a9dd539045055395d3d4eb40957807f8f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>open</name>
      <anchorfile>class_file_log.html</anchorfile>
      <anchor>a5a21dc1d6d95577a86a63c2962b60230</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileMesh</name>
    <filename>class_file_mesh.html</filename>
    <base>TabulatedMesh</base>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_file_mesh.html</anchorfile>
      <anchor>a06b65a37e6e21dea4b6440525a88fb81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileMesh</name>
      <anchorfile>class_file_mesh.html</anchorfile>
      <anchor>adaa8fb85071a05a43c6e8aca42923654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>vector&lt; double &gt;</type>
      <name>getMeshBorderPoints</name>
      <anchorfile>class_file_mesh.html</anchorfile>
      <anchor>a8f2e782a541e40938b1bd78b97a05266</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilePaths</name>
    <filename>class_file_paths.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type></type>
      <name>FilePaths</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>a3502d3b6f2684ac254a6d29c77c7e52f</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>input</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>adde888f88d784d3bfd08d855263964f9</anchor>
      <arglist>(string name) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>inputPath</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>a8208c9b453b39b4bb65c11437e55f806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>output</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>a3f22cdefd7632abb425ef7abc1b396af</anchor>
      <arglist>(string name) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>outputPath</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>ab83d6873e8ebb57fd413cf0b91225b72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>outputPrefix</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>aad935426dc5a28f4be06969a6b289f11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputPath</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>a5f0fa575a4356e5006fb8020cfc2df20</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputPath</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>a16eccc575c5feb27a66a1fd667a05cd0</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputPrefix</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>a6e13d2eb247418617e57f941f22d8bc5</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector&lt; string &gt;</type>
      <name>expectedPacks</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>a6cd4ec8c676cdc0d4a06ff6129d1cdd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>expectedPackVersion</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>aa0488a49e5515f56d32403f3a523122a</anchor>
      <arglist>(string name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>installedPackVersion</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>aed549ce0a407d391275a750cea04346f</anchor>
      <arglist>(string name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>resource</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>a0572ce7576698b15587f6d9b7a3d85d7</anchor>
      <arglist>(string name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>resourceName</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>a5d1680479b10034e04c7c12638916844</anchor>
      <arglist>(string type, const vector&lt; string &gt; &amp;segments)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_file_paths.html</anchorfile>
      <anchor>ab17479024491ca8b52213498add2849f</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileSED</name>
    <filename>class_file_s_e_d.html</filename>
    <base>TabulatedSED</base>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_file_s_e_d.html</anchorfile>
      <anchor>a8f46a95766727c05ad299535230fc53e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileSED</name>
      <anchorfile>class_file_s_e_d.html</anchorfile>
      <anchor>a98880e593d141de59cb93a18c50ed280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getWavelengthsAndLuminosities</name>
      <anchorfile>class_file_s_e_d.html</anchorfile>
      <anchor>a5f167d420650934c6a56045e7df1dbcb</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileSSPSEDFamily</name>
    <filename>class_file_s_s_p_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_file_s_s_p_s_e_d_family.html</anchorfile>
      <anchor>aecf1d6eb15fa5493189a45d371a736bd</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_file_s_s_p_s_e_d_family.html</anchorfile>
      <anchor>a6d94383c76177a9f72735aa5f4c54c56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasIonizationParameter</name>
      <anchorfile>class_file_s_s_p_s_e_d_family.html</anchorfile>
      <anchor>ab14e458076df75ec6c62c3a480b898db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_file_s_s_p_s_e_d_family.html</anchorfile>
      <anchor>a8ace487afbf0750248e4231a4eb537e5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_file_s_s_p_s_e_d_family.html</anchorfile>
      <anchor>a81972a2ccd3fcadd16a37707fd461184</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_file_s_s_p_s_e_d_family.html</anchorfile>
      <anchor>addf0c490f4593233b167f42ec306dd38</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileSSPSEDFamily</name>
      <anchorfile>class_file_s_s_p_s_e_d_family.html</anchorfile>
      <anchor>a0d49d218e263e9819d4104ab76fb1565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_file_s_s_p_s_e_d_family.html</anchorfile>
      <anchor>a7648e41d28b1833f7c7876bbdf4811f9</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileTreeSpatialGrid</name>
    <filename>class_file_tree_spatial_grid.html</filename>
    <base>TreeSpatialGrid</base>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_file_tree_spatial_grid.html</anchorfile>
      <anchor>a7656224a9b351c9140e2702396368c05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileTreeSpatialGrid</name>
      <anchorfile>class_file_tree_spatial_grid.html</anchorfile>
      <anchor>a38a03f015c9d6661de6a3c2563ab2a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vector&lt; TreeNode * &gt;</type>
      <name>constructTree</name>
      <anchorfile>class_file_tree_spatial_grid.html</anchorfile>
      <anchor>aca6c9bbcff4bbd837df14f93faac473b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileWavelengthDistribution</name>
    <filename>class_file_wavelength_distribution.html</filename>
    <base>TabulatedWavelengthDistribution</base>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_file_wavelength_distribution.html</anchorfile>
      <anchor>ad9d4db0c529a125aaceb28c82a34e2a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileWavelengthDistribution</name>
      <anchorfile>class_file_wavelength_distribution.html</anchorfile>
      <anchor>a0a0fd5430026a29120ce5638ba944e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getWavelengthsAndProbabilities</name>
      <anchorfile>class_file_wavelength_distribution.html</anchorfile>
      <anchor>a9df6c881dc1c06fa1d94c7de13e43232</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileWavelengthGrid</name>
    <filename>class_file_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_file_wavelength_grid.html</anchorfile>
      <anchor>a40e3739976457b66317b32ec64526553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>log</name>
      <anchorfile>class_file_wavelength_grid.html</anchorfile>
      <anchor>a7b67a93df514bef0e91c1cb2ce25e9f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>relativeHalfWidth</name>
      <anchorfile>class_file_wavelength_grid.html</anchorfile>
      <anchor>aa091860c40aab0e9e00af5df3de1a13f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileWavelengthGrid</name>
      <anchorfile>class_file_wavelength_grid.html</anchorfile>
      <anchor>a4860b0091840ec13d5a169de81cb8e04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_file_wavelength_grid.html</anchorfile>
      <anchor>a7c239bc2b4d59d87d6ef34a7a358d13f</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FITSInOut</name>
    <filename>class_f_i_t_s_in_out.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>read</name>
      <anchorfile>class_f_i_t_s_in_out.html</anchorfile>
      <anchor>a732d70a6f54be12657a75b76c079f776</anchor>
      <arglist>(const SimulationItem *item, string filename, Array &amp;data, int &amp;nx, int &amp;ny, int &amp;nz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>class_f_i_t_s_in_out.html</anchorfile>
      <anchor>a7978178b30ee200f70ba7fc616e0e852</anchor>
      <arglist>(const SimulationItem *item, string description, string filename, const Array &amp;data, string dataUnits, int nx, int ny, double incx, double incy, double xc, double yc, string xyUnits, const Array &amp;z=Array(), string zUnits=string())</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>read</name>
      <anchorfile>class_f_i_t_s_in_out.html</anchorfile>
      <anchor>a53c67e89222239ddae2293d77fb6531b</anchor>
      <arglist>(string filepath, Array &amp;data, int &amp;nx, int &amp;ny, int &amp;nz)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>readColumn</name>
      <anchorfile>class_f_i_t_s_in_out.html</anchorfile>
      <anchor>a5c41b4aa3987261a6e26303dc3456fad</anchor>
      <arglist>(string filepath, Array &amp;data, int n)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>class_f_i_t_s_in_out.html</anchorfile>
      <anchor>a689da7525845f61d04e822a2f2ec9d7b</anchor>
      <arglist>(string filepath, const Array &amp;data, string dataUnits, int nx, int ny, double incx, double incy, double xc, double yc, string xyUnits, const Array &amp;z, string zUnits)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlatUniverseCosmology</name>
    <filename>class_flat_universe_cosmology.html</filename>
    <base>Cosmology</base>
    <member kind="function">
      <type>double</type>
      <name>angularDiameterDistance</name>
      <anchorfile>class_flat_universe_cosmology.html</anchorfile>
      <anchor>a1c925aca2ca365321b673d74dcdee34c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>luminosityDistance</name>
      <anchorfile>class_flat_universe_cosmology.html</anchorfile>
      <anchor>a5f4defc905b89877c33ef0d6d0bf9382</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>matterDensityFraction</name>
      <anchorfile>class_flat_universe_cosmology.html</anchorfile>
      <anchor>ae2ddfdc0eff4dd66408bdcb743cb4aaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>modelRedshift</name>
      <anchorfile>class_flat_universe_cosmology.html</anchorfile>
      <anchor>abc27847ae0a9462fa4cb27d0b4ffd3b6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>redshift</name>
      <anchorfile>class_flat_universe_cosmology.html</anchorfile>
      <anchor>ad03d6437fe832a59764c49dfead53290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>reducedHubbleConstant</name>
      <anchorfile>class_flat_universe_cosmology.html</anchorfile>
      <anchor>a97da889f3b5d5dc210ae7abc35e3704a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>relativeExpansionRate</name>
      <anchorfile>class_flat_universe_cosmology.html</anchorfile>
      <anchor>ab2891926499ceeae0a01705117777e66</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FlatUniverseCosmology</name>
      <anchorfile>class_flat_universe_cosmology.html</anchorfile>
      <anchor>a329ffb6d130fa68d0639ae2c5253f19d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FluxRecorder</name>
    <filename>class_flux_recorder.html</filename>
    <class kind="class">FluxRecorder::Contribution</class>
    <class kind="class">FluxRecorder::ContributionList</class>
    <member kind="function">
      <type></type>
      <name>FluxRecorder</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>a4b09f3c74615561dd01ce87018bd7825</anchor>
      <arglist>(const SimulationItem *parentItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calibrateAndWrite</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>ac0ae8a597dff1b05e471d12c071b8a3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>detect</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>ace9500edfd527120608b7847d2ef1625</anchor>
      <arglist>(PhotonPacket *pp, int l, double distance=std::numeric_limits&lt; double &gt;::infinity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalizeConfiguration</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>a5a4fe3424e80d24223943d67694c0647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>ab7cc9d3243328fdba2da2c318079e820</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>includeFluxDensityForDistant</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>a713d763475f4021bb5453b16a59c3aaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>includeSurfaceBrightnessForDistant</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>a82c7a41b5411386c4fec0d0183f1d659</anchor>
      <arglist>(int numPixelsX, int numPixelsY, double pixelSizeX, double pixelSizeY, double centerX, double centerY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>includeSurfaceBrightnessForLocal</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>a1ed16242309a18fd1f5ab195ba493bad</anchor>
      <arglist>(int numPixelsX, int numPixelsY, double solidAnglePerPixel, double incrementX, double incrementY, double centerX, double centerY, string quantityXY=string())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObserverFrameRedshift</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>a914c82658ba510c05fcf302acf5c8848</anchor>
      <arglist>(double redshift, double angularDiameterDistance, double luminosityDistance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestFrameDistance</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>a9320350c4d7a90ee01a2500ed627e420</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimulationInfo</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>af4f600565e859a834691c2a88dc6f96d</anchor>
      <arglist>(string instrumentName, const WavelengthGrid *lambdagrid, bool hasMedium, bool hasMediumEmission)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserFlags</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>a1d37d674de3204535c22d13bfe843a1b</anchor>
      <arglist>(bool recordComponents, int numScatteringLevels, bool recordPolarization, bool recordStatistics)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>recordContributions</name>
      <anchorfile>class_flux_recorder.html</anchorfile>
      <anchor>a43d11bceb0bf80ec393786026fc18206</anchor>
      <arglist>(ContributionList *contributionList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FluxRecorder::Contribution</name>
    <filename>class_flux_recorder_1_1_contribution.html</filename>
  </compound>
  <compound kind="class">
    <name>FluxRecorder::ContributionList</name>
    <filename>class_flux_recorder_1_1_contribution_list.html</filename>
  </compound>
  <compound kind="class">
    <name>Form</name>
    <filename>class_form.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeQuantity</name>
      <anchorfile>class_form.html</anchorfile>
      <anchor>a29524e4afefe03714700853f143c49c2</anchor>
      <arglist>(const ProbeFormBridge *bridge) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Form</name>
      <anchorfile>class_form.html</anchorfile>
      <anchor>a74d41f789dbfcfd081b241e2c44e576a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FragmentDustMixDecorator</name>
    <filename>class_fragment_dust_mix_decorator.html</filename>
    <base>MaterialMix</base>
    <base>MultiGrainPopulationInterface</base>
    <member kind="function">
      <type>double</type>
      <name>asymmpar</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>afd8682d53ea16c28d31b14dfe9faf6ba</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>MultiGrainDustMix *</type>
      <name>dustMix</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a21d5f40a9a3c4a01ff6f3cef9eee70c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>emissionSpectrum</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a175068ce2fc5f4727d7670031c5f8311</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>DisjointWavelengthGrid *</type>
      <name>emissionWavelengthGrid</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a902558994da2253a1847dde15af2a472</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>emissivity</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>ad85ca42f65a14aa3f66c8f9ed8477b43</anchor>
      <arglist>(const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fragmentSizeBins</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>afd6ddd6c608843c8f09e78db6c4ed33d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasContinuumEmission</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>aedf194b3e8210b41e70a07e48d638ad9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDynamicDensities</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>afa1b453e51eb15efe9607d56b946a47b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasExtraSpecificState</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a8021e2b58a843ee87f88ac2294ad91af</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPolarizedScattering</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a29b020bf093a50c76757f109c2345505</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStochasticDustEmission</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a9514caffd90e36a765b79a1b8f7460fc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeTemperature</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a01859c7baaabd38050d08670180a9e0a</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initialDensityFraction</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>afdd7d60bc9dd69d01d42407baf693614</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSpecificState</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a1d1b29f1fba38585b0d105655bdfa4f9</anchor>
      <arglist>(MaterialState *state, double metallicity, double temperature, const Array &amp;params) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a157b2dfbb1a2ee64f09ed3d4473090b1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>MaterialType</type>
      <name>materialType</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a37b6f2095918922e2149abc983db2baf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPopulations</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a489dd6afdcc34ba3d98117f873d20a22</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityAbs</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a86a4d4ea343a77c88c756b6489bac043</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>ae14e8c4ebdf974f89778c2374db18da1</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacitySca</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a4443bc282d1362ede5e3f48adcc7945c</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>aa44027f0db8f87c4e71f689829c032be</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peeloffScattering</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a00b99718c303793bacc955d42e19da89</anchor>
      <arglist>(double &amp;I, double &amp;Q, double &amp;U, double &amp;V, double &amp;lambda, Direction bfkobs, Direction bfky, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performScattering</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>ada9d1d009f891668314ed80157d9ecef</anchor>
      <arglist>(double lambda, const MaterialState *state, PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>populationBulkDensity</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>ad3ab9b16690a32475cfe8729e6656614</anchor>
      <arglist>(int f) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>populationGrainRadius</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>ac99222530ae01e699745213a49b13a95</anchor>
      <arglist>(int f) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>populationGrainType</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a77cf8d3a0728fdd73189f4c5fb67ade0</anchor>
      <arglist>(int f) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>populationIsGraphite</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a4c0207e4064bb8792ea013a3e844edc0</anchor>
      <arglist>(int f) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>populationMass</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a2caa0f28031f4124994e722173159268</anchor>
      <arglist>(int f) const override</arglist>
    </member>
    <member kind="function">
      <type>const GrainSizeDistribution *</type>
      <name>populationSizeDistribution</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a8f26de2f8cae1cb171eb10f70747cf67</anchor>
      <arglist>(int f) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>populationSizeRange</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>acb7ad2d59842f36151ca763451ceb2aa</anchor>
      <arglist>(int f) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>populationTemperature</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a1c26b8e45538c10f5b34d3313b655c5b</anchor>
      <arglist>(int f, const Array &amp;Jv) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionAbs</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>aaa5abfd1abb4333e426fdf8f93a0580b</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionExt</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a24bcbf68ad4a69ae122a4952cce8137f</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionSca</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a7bdb4c354b78ce528577c5204115a53c</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; StateVariable &gt;</type>
      <name>specificStateVariableInfo</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>adc70a9c0f87cab7a2e320ab83e34e4f9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalMass</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a1ea0afc1ceff592caac3af4fb7acb753</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FragmentDustMixDecorator</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>a92776f813b54d01de56167be401d8ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_fragment_dust_mix_decorator.html</anchorfile>
      <anchor>ad2f348949b119e81a27c4e5fd34315dc</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FrameInstrument</name>
    <filename>class_frame_instrument.html</filename>
    <base>DistantInstrument</base>
    <member kind="function">
      <type>double</type>
      <name>centerX</name>
      <anchorfile>class_frame_instrument.html</anchorfile>
      <anchor>a55c13691f1d694ccf87f7954f0e00d43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>centerY</name>
      <anchorfile>class_frame_instrument.html</anchorfile>
      <anchor>a1100cac194ed2c2572f92d0e99825aae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>detect</name>
      <anchorfile>class_frame_instrument.html</anchorfile>
      <anchor>a714e01a74dfac7aacdc0e6e86b9f251a</anchor>
      <arglist>(PhotonPacket *pp) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fieldOfViewX</name>
      <anchorfile>class_frame_instrument.html</anchorfile>
      <anchor>ab9ff3ede8cddee0c3b9408a2f84fbd02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fieldOfViewY</name>
      <anchorfile>class_frame_instrument.html</anchorfile>
      <anchor>a3d2f37b2c1d40598d25cae261c4f5c93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsX</name>
      <anchorfile>class_frame_instrument.html</anchorfile>
      <anchor>a1b325adbbbffc95162eafaabbe59cac8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsY</name>
      <anchorfile>class_frame_instrument.html</anchorfile>
      <anchor>ad81184887bd3540aa02ff1eb5af27f84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FrameInstrument</name>
      <anchorfile>class_frame_instrument.html</anchorfile>
      <anchor>a7526dde146376e79667b514a87511801</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_frame_instrument.html</anchorfile>
      <anchor>a389eed09e2c8c7d6ec73ea2b20b322df</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>pixelOnDetector</name>
      <anchorfile>class_frame_instrument.html</anchorfile>
      <anchor>a7eadf047191b66954d9b63177787252f</anchor>
      <arglist>(const PhotonPacket *pp) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FSPSSED</name>
    <filename>class_f_s_p_s_s_e_d.html</filename>
    <base>FamilySED</base>
    <member kind="enumeration">
      <type></type>
      <name>IMF</name>
      <anchorfile>class_f_s_p_s_s_e_d.html</anchorfile>
      <anchor>a44a537b3c7bf202dfb93fe6dfb91744c</anchor>
      <arglist></arglist>
      <enumvalue file="class_f_s_p_s_s_e_d.html" anchor="a44a537b3c7bf202dfb93fe6dfb91744ca917c1c3de203aa49cc644e8e204c5437">Chabrier</enumvalue>
      <enumvalue file="class_f_s_p_s_s_e_d.html" anchor="a44a537b3c7bf202dfb93fe6dfb91744ca8f7e038ea09140070ee5bdb1b233d03c">Kroupa</enumvalue>
      <enumvalue file="class_f_s_p_s_s_e_d.html" anchor="a44a537b3c7bf202dfb93fe6dfb91744ca8c174efbbe276c19f308ca1f4519d14b">Salpeter</enumvalue>
    </member>
    <member kind="function">
      <type>double</type>
      <name>age</name>
      <anchorfile>class_f_s_p_s_s_e_d.html</anchorfile>
      <anchor>ab22b9af275b33facef25c0afaf7e2249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IMF</type>
      <name>imf</name>
      <anchorfile>class_f_s_p_s_s_e_d.html</anchorfile>
      <anchor>a1991546011e18f213ea2f9a78a7094c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_f_s_p_s_s_e_d.html</anchorfile>
      <anchor>a15bf4a0cc37e82091fff2048e6f6b000</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FSPSSED</name>
      <anchorfile>class_f_s_p_s_s_e_d.html</anchorfile>
      <anchor>ae47e50419ca91b5abfe6721e83dac60f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SEDFamily *</type>
      <name>getFamilyAndParameters</name>
      <anchorfile>class_f_s_p_s_s_e_d.html</anchorfile>
      <anchor>a0a12b5652bd65da4f4bd7a5bf0d35a93</anchor>
      <arglist>(Array &amp;parameters) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FSPSSEDFamily</name>
    <filename>class_f_s_p_s_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="enumeration">
      <type></type>
      <name>IMF</name>
      <anchorfile>class_f_s_p_s_s_e_d_family.html</anchorfile>
      <anchor>a7f0aa21bbed5591822f10e69c76f3c5e</anchor>
      <arglist></arglist>
      <enumvalue file="class_f_s_p_s_s_e_d_family.html" anchor="a7f0aa21bbed5591822f10e69c76f3c5ea917c1c3de203aa49cc644e8e204c5437">Chabrier</enumvalue>
      <enumvalue file="class_f_s_p_s_s_e_d_family.html" anchor="a7f0aa21bbed5591822f10e69c76f3c5ea8f7e038ea09140070ee5bdb1b233d03c">Kroupa</enumvalue>
      <enumvalue file="class_f_s_p_s_s_e_d_family.html" anchor="a7f0aa21bbed5591822f10e69c76f3c5ea8c174efbbe276c19f308ca1f4519d14b">Salpeter</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>FSPSSEDFamily</name>
      <anchorfile>class_f_s_p_s_s_e_d_family.html</anchorfile>
      <anchor>a0a4afc92231fe1ac3094cb8547dc9c99</anchor>
      <arglist>(SimulationItem *parent, IMF imf)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_f_s_p_s_s_e_d_family.html</anchorfile>
      <anchor>a50fb6f31c817c9e5b1388a26a542a987</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>IMF</type>
      <name>imf</name>
      <anchorfile>class_f_s_p_s_s_e_d_family.html</anchorfile>
      <anchor>a64af4cfd65e49c45b0f8928a567b6bb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_f_s_p_s_s_e_d_family.html</anchorfile>
      <anchor>af220b5b7596248f377101ccf88f56ebf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_f_s_p_s_s_e_d_family.html</anchorfile>
      <anchor>a4d2269401471de3059ecfba71dff5ad1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_f_s_p_s_s_e_d_family.html</anchorfile>
      <anchor>afaae061abf636ea22a6bd94912fb9e11</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FSPSSEDFamily</name>
      <anchorfile>class_f_s_p_s_s_e_d_family.html</anchorfile>
      <anchor>a07a9eb394c0d94aeefdbaf531e60a78c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_f_s_p_s_s_e_d_family.html</anchorfile>
      <anchor>a2de30e97989b5875a33df100440bc661</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FullInstrument</name>
    <filename>class_full_instrument.html</filename>
    <base>FrameInstrument</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>FullInstrument</name>
      <anchorfile>class_full_instrument.html</anchorfile>
      <anchor>ae1f23da3f93e04ff6cc08cb9a6706edd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_full_instrument.html</anchorfile>
      <anchor>a93743cfcc63b8cf2975208168512098b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GammaGeometry</name>
    <filename>class_gamma_geometry.html</filename>
    <base>SpheGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_gamma_geometry.html</anchorfile>
      <anchor>a33a32efc1a8e25ebf7223dd0de9eb50b</anchor>
      <arglist>(double r) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>class_gamma_geometry.html</anchorfile>
      <anchor>ade8d877dca4e8e064bca6d8f865b8f2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomRadius</name>
      <anchorfile>class_gamma_geometry.html</anchorfile>
      <anchor>aa763abdd3663eaae2c870c8ae5cbaf75</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleLength</name>
      <anchorfile>class_gamma_geometry.html</anchorfile>
      <anchor>ab82ac796d31813ae871b1d2eb31684af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sigmar</name>
      <anchorfile>class_gamma_geometry.html</anchorfile>
      <anchor>ad4355f6c26cff7db753b1106e8199538</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GammaGeometry</name>
      <anchorfile>class_gamma_geometry.html</anchorfile>
      <anchor>a619618e9273797d44e1cd982ec5f8122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_gamma_geometry.html</anchorfile>
      <anchor>a6e43a392ffc5958d47e7936b0c34de35</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GaussianGeometry</name>
    <filename>class_gaussian_geometry.html</filename>
    <base>SpheGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_gaussian_geometry.html</anchorfile>
      <anchor>aba30779ecfc0d881b0b3d72303377dfb</anchor>
      <arglist>(double r) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dispersion</name>
      <anchorfile>class_gaussian_geometry.html</anchorfile>
      <anchor>ae29684ca17dff303e331319895912eb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomRadius</name>
      <anchorfile>class_gaussian_geometry.html</anchorfile>
      <anchor>a6a0c007022063f137479337e7c122a6a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sigmar</name>
      <anchorfile>class_gaussian_geometry.html</anchorfile>
      <anchor>ad7e3e5e17bffa97e9ed4f9c8655ecc3a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GaussianGeometry</name>
      <anchorfile>class_gaussian_geometry.html</anchorfile>
      <anchor>a0c0ca659d21d975d778afbc3f0660f85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_gaussian_geometry.html</anchorfile>
      <anchor>a14b1a769df788f3ec8c9af9a357ccda6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericForm</name>
    <filename>class_generic_form.html</filename>
    <base>Form</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericForm</name>
      <anchorfile>class_generic_form.html</anchorfile>
      <anchor>a4311086e744b22aae4bc583bf662e590</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenGeometry</name>
    <filename>class_gen_geometry.html</filename>
    <base>Geometry</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_gen_geometry.html</anchorfile>
      <anchor>a5a3180f92727191271d8ab932b81016f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenGeometry</name>
      <anchorfile>class_gen_geometry.html</anchorfile>
      <anchor>ae7e9c465acc6b73f7a8172fdb2ab463a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeometricMedium</name>
    <filename>class_geometric_medium.html</filename>
    <base>Medium</base>
    <member kind="function">
      <type>Geometry *</type>
      <name>geometry</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a784b8cef9de447a66c6ea9036e00a334</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorField *</type>
      <name>magneticFieldDistribution</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a6245fd04975182a349fe4e0f6f0f55fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>magneticFieldStrength</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>afaab3acbc908e7209a8c26a170dd8365</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaterialMix *</type>
      <name>materialMix</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a60c47c1fde6eb4d8b45866436c8aa8b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaterialNormalization *</type>
      <name>normalization</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a4d9ec36af7e8510115d80850aaa46f9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorField *</type>
      <name>velocityDistribution</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a3a4eb8f919ac8ac7d5d1d083e26c028b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>velocityMagnitude</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a2ebb4a25e8b791db35cd7e6c01cc44ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GeometricMedium</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a7c1287f79679b0c68c1f80f60317436e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vec</type>
      <name>bulkVelocity</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a7d462c8ac4b0fa2abf707d2e14c2f540</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>ae84399e6d6bb938bed045ef28def0011</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a8a743e25d1ef15942d25ff76b1ef1dfa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasMagneticField</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>aecee1abbc596fdd449d5485a883fe50b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasMetallicity</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a63ffcb93ac350e269763ce7d83a62a4b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasParameters</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a46608d759e0b6fd44d0b430224ba1a10</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasTemperature</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>ace041ec214bed12689fdf248d7a1f827</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasVariableMix</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a3b5743299cad7e7ba7c724d89332cd0f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasVelocity</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>ab742f78cfcb3b9cbb0ec62b726ef6233</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vec</type>
      <name>magneticField</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a54a9ac44cd2d1fefa9159dc461cd64af</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a9f80ad97cba7b5f511b3bbfc12e71c52</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>massDensity</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a8c5e4d276ad89bd4e6f1fd09fd801067</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>aa0e1a754c797f5b10eb71b27d77a4fcb</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const MaterialMix *</type>
      <name>mix</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a0dfbb640a94ed80e185c9bdbbcc716aa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const MaterialMix *</type>
      <name>mix</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>abcd9b19d174334665c7248ca69b91b9b</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>number</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>acdec2fab8a1f5da0d25a7be7b52f3901</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>numberDensity</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>aa495acb76e539ba4ec19e439b960aec7</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>opticalDepthX</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a420e58e93a19a104a56d669d12bc3ff0</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>opticalDepthY</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>aef17973de33962b9f7392d824be9bb7f</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>opticalDepthZ</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>abdf77b5add50b1053faaf8694fd2eedc</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parameters</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a67655f68877aa6b10dad93ca42b9e0c9</anchor>
      <arglist>(Position bfr, Array &amp;params) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a0b4e00d6c0842f2ef8b22534f568d064</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>temperature</name>
      <anchorfile>class_geometric_medium.html</anchorfile>
      <anchor>a19cae94f766ce96e13c5e886727a3610</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeometricSource</name>
    <filename>class_geometric_source.html</filename>
    <base>NormalizedSource</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_geometric_source.html</anchorfile>
      <anchor>acbb98cabe6d7946f63a0796fa709ecdd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>geometry</name>
      <anchorfile>class_geometric_source.html</anchorfile>
      <anchor>a50b07f101afe50c2b492fdbe9a0889c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVelocity</name>
      <anchorfile>class_geometric_source.html</anchorfile>
      <anchor>af7fba03c89204f9cc4a2c2e6ff382b0d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launchNormalized</name>
      <anchorfile>class_geometric_source.html</anchorfile>
      <anchor>a6553c6763d8427270fa0d3015317b07f</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double lambda, double Lw) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorField *</type>
      <name>velocityDistribution</name>
      <anchorfile>class_geometric_source.html</anchorfile>
      <anchor>a4552ef256e0995158d4208a26101e4bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>velocityMagnitude</name>
      <anchorfile>class_geometric_source.html</anchorfile>
      <anchor>a64fdb8030b8536e69cd0078633850ae7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GeometricSource</name>
      <anchorfile>class_geometric_source.html</anchorfile>
      <anchor>a2574620cd6d72fa218992880e684132c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_geometric_source.html</anchorfile>
      <anchor>afc7f0c2ca8d7ea41efd51f48eb188f42</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Geometry</name>
    <filename>class_geometry.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>density</name>
      <anchorfile>class_geometry.html</anchorfile>
      <anchor>a9f56438899697e0a6458625648073636</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dimension</name>
      <anchorfile>class_geometry.html</anchorfile>
      <anchor>ac61c830e2e5ba77eb3dc2dbd90650b30</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Position</type>
      <name>generatePosition</name>
      <anchorfile>class_geometry.html</anchorfile>
      <anchor>ae4c8a44dd3080a9476cfeebe5375ed8a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>SigmaX</name>
      <anchorfile>class_geometry.html</anchorfile>
      <anchor>ae98e421831941ca1586fe668edaebc9a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>SigmaY</name>
      <anchorfile>class_geometry.html</anchorfile>
      <anchor>a4dc2d35a861c67c167a186067f12615a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>SigmaZ</name>
      <anchorfile>class_geometry.html</anchorfile>
      <anchor>a9f1eeac05bc138121a7706b9517254fd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Geometry</name>
      <anchorfile>class_geometry.html</anchorfile>
      <anchor>a4c301c163c63d21ed08c17b0f4e131d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Random *</type>
      <name>random</name>
      <anchorfile>class_geometry.html</anchorfile>
      <anchor>a82f582959a47fa3189466c1e0c3591c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_geometry.html</anchorfile>
      <anchor>a407d3a6ce0d10e3fa59561aad0cbab3b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GhostItem</name>
    <filename>class_ghost_item.html</filename>
    <base>Item</base>
    <member kind="function">
      <type></type>
      <name>GhostItem</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a029901254814c113273fdeb29e9fe294</anchor>
      <arglist>(string type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearItemListProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a6d11668b7462f50efd5968a1589ac6d6</anchor>
      <arglist>(const PropertyDef *property) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBoolProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>aab88bda531536afd7afe66a22c8e17ed</anchor>
      <arglist>(const PropertyDef *property) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; double &gt;</type>
      <name>getDoubleListProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a44985d65d34a4871522027531d7d6469</anchor>
      <arglist>(const PropertyDef *property) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a01b790957a9ebdcd71c0f3f30fc1cffb</anchor>
      <arglist>(const PropertyDef *property) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getEnumProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>afbb025413f3e0038eb8d3ba362e01efa</anchor>
      <arglist>(const PropertyDef *property) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a2539f5a3d6922dae53ca19c86275aeb7</anchor>
      <arglist>(const PropertyDef *property) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Item * &gt;</type>
      <name>getItemListProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a068703429931297de20334aba89a7663</anchor>
      <arglist>(const PropertyDef *property) const override</arglist>
    </member>
    <member kind="function">
      <type>Item *</type>
      <name>getItemProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>ac06602d763b5917135230b0e7475e48f</anchor>
      <arglist>(const PropertyDef *property) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getStringProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a1af313a405b33c69167e4a00e60eb39f</anchor>
      <arglist>(const PropertyDef *property) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertIntoItemListProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>af0bfcc6789925d5a9dae1353af9fb014</anchor>
      <arglist>(const PropertyDef *property, int index, Item *item) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromItemListProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a39541951775c804b970bc69ca5c13ff4</anchor>
      <arglist>(const PropertyDef *property, int index) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoolProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a174b487cb44d3a8334e1a76b44210d2d</anchor>
      <arglist>(const PropertyDef *property, bool value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDoubleListProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a00eee4b937dde84b979f362fd1034d2a</anchor>
      <arglist>(const PropertyDef *property, vector&lt; double &gt; value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDoubleProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>ae5598fb64c0029c3221cac508e789e41</anchor>
      <arglist>(const PropertyDef *property, double value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnumProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a9647cf0998dd0d9041dc370cd4064c8e</anchor>
      <arglist>(const PropertyDef *property, string value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>abe0a89bd8d08e6e138b2ece89802490c</anchor>
      <arglist>(const PropertyDef *property, int value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItemProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>aeab3f9c922ab55434e8e8f785ba3bec0</anchor>
      <arglist>(const PropertyDef *property, Item *item) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStringProperty</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a3a15f36931d243422049f68bfa14b026</anchor>
      <arglist>(const PropertyDef *property, string value) override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>type</name>
      <anchorfile>class_ghost_item.html</anchorfile>
      <anchor>a141a558bca6fb0f3a80b8f1dc1431f03</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GrainComposition</name>
    <filename>class_grain_composition.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>bulkDensity</name>
      <anchorfile>class_grain_composition.html</anchorfile>
      <anchor>a847ecef5b59010eb4c6457b738e838ec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual string</type>
      <name>name</name>
      <anchorfile>class_grain_composition.html</anchorfile>
      <anchor>acff4ba9f1c81519305abd7a308d25698</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_grain_composition.html</anchorfile>
      <anchor>a9d1eeaf8253cb6de59976b8ba118ea43</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>resourceNameForMuellerMatrix</name>
      <anchorfile>class_grain_composition.html</anchorfile>
      <anchor>a0cb656165ee6637ec0fd62225d3ea29c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_grain_composition.html</anchorfile>
      <anchor>a76b655fa9b171cfca8dca58416fe8782</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resourcesForSpheroidalEmission</name>
      <anchorfile>class_grain_composition.html</anchorfile>
      <anchor>a96c1d6d9193af6103793c3caba947d8f</anchor>
      <arglist>(bool &amp;resource, double &amp;interpol, string &amp;tableName1, string &amp;tableName2) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GrainComposition</name>
      <anchorfile>class_grain_composition.html</anchorfile>
      <anchor>a816c59efcd319ef455e7e530c9b6d4b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GrainPopulation</name>
    <filename>class_grain_population.html</filename>
    <base>SimulationItem</base>
    <member kind="enumeration">
      <type></type>
      <name>NormalizationType</name>
      <anchorfile>class_grain_population.html</anchorfile>
      <anchor>a351b4a285ed25355b87144b17f57f123</anchor>
      <arglist></arglist>
      <enumvalue file="class_grain_population.html" anchor="a351b4a285ed25355b87144b17f57f123a1b8db659eaf2dc39fe26f84f5a326ad7">DustMassPerHydrogenAtom</enumvalue>
      <enumvalue file="class_grain_population.html" anchor="a351b4a285ed25355b87144b17f57f123aeb57c57df8568ede1eba0b610482ec0f">DustMassPerHydrogenMass</enumvalue>
      <enumvalue file="class_grain_population.html" anchor="a351b4a285ed25355b87144b17f57f123a269e35b3cc241661a02d33e76cd4ad90">FactorOnSizeDistribution</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>GrainPopulation</name>
      <anchorfile>class_grain_population.html</anchorfile>
      <anchor>a63220767b66a95ffd77ae6cf72abda88</anchor>
      <arglist>(SimulationItem *parent, GrainComposition *composition, GrainSizeDistribution *sizeDistribution, int numSizes, NormalizationType normType, double normValue)</arglist>
    </member>
    <member kind="function">
      <type>GrainComposition *</type>
      <name>composition</name>
      <anchorfile>class_grain_population.html</anchorfile>
      <anchor>ad0b3c286082a677827b50dc1e2816eaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dustMassPerHydrogenAtom</name>
      <anchorfile>class_grain_population.html</anchorfile>
      <anchor>abe8743732bf21973fc21e30fd440e487</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dustMassPerHydrogenMass</name>
      <anchorfile>class_grain_population.html</anchorfile>
      <anchor>ab5fd220c32463a1b9ee9ae1bda92418a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>factorOnSizeDistribution</name>
      <anchorfile>class_grain_population.html</anchorfile>
      <anchor>a49a94a129ebd27d20c1fb115d1408713</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalizationType</type>
      <name>normalizationType</name>
      <anchorfile>class_grain_population.html</anchorfile>
      <anchor>aad10c85e0b791ddaa2c3522e6e1f8e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSizes</name>
      <anchorfile>class_grain_population.html</anchorfile>
      <anchor>a7d6656fc7d6b23f8fd63c8b33ae77f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GrainSizeDistribution *</type>
      <name>sizeDistribution</name>
      <anchorfile>class_grain_population.html</anchorfile>
      <anchor>acfb3969427b30531c5714017c3c21cd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GrainPopulation</name>
      <anchorfile>class_grain_population.html</anchorfile>
      <anchor>a0277404cb62f29d0f53d8626fbd9ce31</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GrainSizeDistribution</name>
    <filename>class_grain_size_distribution.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>amax</name>
      <anchorfile>class_grain_size_distribution.html</anchorfile>
      <anchor>ad295b6b26a202b8318eef798019fbe74</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>amin</name>
      <anchorfile>class_grain_size_distribution.html</anchorfile>
      <anchor>ac2eb34631dc7e9f2102ec8e45be6b7b3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>dnda</name>
      <anchorfile>class_grain_size_distribution.html</anchorfile>
      <anchor>abc4218d80ef795402ebeb238c6a49acf</anchor>
      <arglist>(double a) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GrainSizeDistribution</name>
      <anchorfile>class_grain_size_distribution.html</anchorfile>
      <anchor>a1ba2cd53004b2f3d58cd00d847b6c46b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HammerAitoffProjection</name>
    <filename>class_hammer_aitoff_projection.html</filename>
    <base>AllSkyProjection</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromGlobeToRectangle</name>
      <anchorfile>class_hammer_aitoff_projection.html</anchorfile>
      <anchor>af7c7c10713bdf4536a812831f0d17cd1</anchor>
      <arglist>(double longitude, double latitude, double &amp;x, double &amp;y) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>fromRectangleToGlobe</name>
      <anchorfile>class_hammer_aitoff_projection.html</anchorfile>
      <anchor>a3b679256000ca997ee0cc8f0fd0f8a4b</anchor>
      <arglist>(double x, double y, double &amp;longitude, double &amp;latitude) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HammerAitoffProjection</name>
      <anchorfile>class_hammer_aitoff_projection.html</anchorfile>
      <anchor>aedd3d9690537707c79b85ea710a91b0f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HEALPixSkyInstrument</name>
    <filename>class_h_e_a_l_pix_sky_instrument.html</filename>
    <base>Instrument</base>
    <member kind="function">
      <type>Direction</type>
      <name>bfkobs</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>a60634524518e1207bd58ccd3358983b6</anchor>
      <arglist>(const Position &amp;bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>bfky</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>ae42ab11646006b494fe70daae56c8eed</anchor>
      <arglist>(const Position &amp;bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossX</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>a43307881826860ea149f38ad54a44d0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossY</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>a1dec6741488b384dbea0230c15449754</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossZ</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>a61968b4821ba4ee3aa82588a931b3baf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>determineSameObserverAsPreceding</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>aa2b4524429f5e16000f7fbc7d858a576</anchor>
      <arglist>(const Instrument *precedingInstrument) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>observerX</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>a928d69e41716c4ce1f508f1676ca888f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>observerY</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>a3be8aee8ffdb38a6b9d0dbf8acb6724f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>observerZ</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>a796e3804791351c0007346a594b33fd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>order</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>a74261d4d32049931fc2633a8f6dff156</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radius</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>ac775890820bec3eaa18a3bbdc944e80a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upX</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>a65f18d9264e585ed972129866a2eca28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upY</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>ad2b11c8a2825211a74c4327197882b2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upZ</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>a85b9ccc850d544ccd13de761203b82c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HEALPixSkyInstrument</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>aba5098167980e408e804adac9e43c85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>detect</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>ae37ebd5d3ec0739d32126ea33689cc7d</anchor>
      <arglist>(PhotonPacket *pp) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_h_e_a_l_pix_sky_instrument.html</anchorfile>
      <anchor>a88982ef116fe232aadf1a40df29c35dd</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HollowRadialVectorField</name>
    <filename>class_hollow_radial_vector_field.html</filename>
    <base>VectorField</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_hollow_radial_vector_field.html</anchorfile>
      <anchor>ab5b39d2839fae2705b579f010687a6fa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponent</name>
      <anchorfile>class_hollow_radial_vector_field.html</anchorfile>
      <anchor>a7249f14dd8c248bf78e6eec5110a94f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>vector</name>
      <anchorfile>class_hollow_radial_vector_field.html</anchorfile>
      <anchor>a8b70ba5d3c5a18ad2b2736daa09bc3b6</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zeroRadius</name>
      <anchorfile>class_hollow_radial_vector_field.html</anchorfile>
      <anchor>a1d37b4fd5d370cf046568fcbfbcef402</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HollowRadialVectorField</name>
      <anchorfile>class_hollow_radial_vector_field.html</anchorfile>
      <anchor>a185ef65c9318631ff93b7c3e3bbe5166</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HomogeneousTransform</name>
    <filename>class_homogeneous_transform.html</filename>
    <member kind="function">
      <type></type>
      <name>HomogeneousTransform</name>
      <anchorfile>class_homogeneous_transform.html</anchorfile>
      <anchor>aecbf1f1e9d0e535878c5c940ee0d4d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>concatenate</name>
      <anchorfile>class_homogeneous_transform.html</anchorfile>
      <anchor>a0b1b413a8a8109a53152143d3f6c3f6e</anchor>
      <arglist>(const HomogeneousTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perspectiveZ</name>
      <anchorfile>class_homogeneous_transform.html</anchorfile>
      <anchor>a0ced0bcff7ba3fff1ff8eff489294e21</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotateX</name>
      <anchorfile>class_homogeneous_transform.html</anchorfile>
      <anchor>a33fe1e742a5db3049f58cc05023c9a39</anchor>
      <arglist>(double cos, double sin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotateY</name>
      <anchorfile>class_homogeneous_transform.html</anchorfile>
      <anchor>aa1df3d544901db6f9abcceae5e036f5e</anchor>
      <arglist>(double cos, double sin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotateZ</name>
      <anchorfile>class_homogeneous_transform.html</anchorfile>
      <anchor>a60ae8863eb8d9bd379b3491a3e612e2d</anchor>
      <arglist>(double cos, double sin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>class_homogeneous_transform.html</anchorfile>
      <anchor>ad61f410450b2b335b348bfd5a25a0998</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>class_homogeneous_transform.html</anchorfile>
      <anchor>a69f0650028abea01ff56cb4e8e4fe705</anchor>
      <arglist>(double x, double y, double z, double w, double &amp;outx, double &amp;outy, double &amp;outz, double &amp;outw) const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>transform</name>
      <anchorfile>class_homogeneous_transform.html</anchorfile>
      <anchor>aff91e2a0b998e657b1824726ffd28f26</anchor>
      <arglist>(Vec p) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>class_homogeneous_transform.html</anchorfile>
      <anchor>a42d699c569055d22a5c4b044d5c42cc9</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HyperboloidGeometry</name>
    <filename>class_hyperboloid_geometry.html</filename>
    <base>AxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>cutoffRadius</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>a4be9e0fcfffc71c9724f03d2b2b49333</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>aec1bded9720aef46cbc18b835b95f47f</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>aa129afdb4d1b979a6c2415ef3bb18fec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minRadius</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>af9aede006c20c8ab983a09cfeebce87d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>openingAngle</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>aeda8d709b1ead0b61a3cfb7f53488ca9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radialExtent</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>af13df0bcf22cdd80d5f24b87920b2684</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>realAxis</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>a2ca8e9671790adf7549fab3b1a5d53c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reshapeInnerRadius</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>afdb10e6ff896450f9a70c659d0b9d447</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>a040b4c1595d5a395f96519d29b992091</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>a67559afcc19654821f0f5ab838ff3136</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HyperboloidGeometry</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>a2d9a2f7272f2dcf4bdec627328fa55d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_hyperboloid_geometry.html</anchorfile>
      <anchor>a38cc35bbef5a9aceee7ba6d6b67317d6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HyperboloidShellGeometry</name>
    <filename>class_hyperboloid_shell_geometry.html</filename>
    <base>AxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_hyperboloid_shell_geometry.html</anchorfile>
      <anchor>ac62758775908fe46bd12669dfbb98a05</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_hyperboloid_shell_geometry.html</anchorfile>
      <anchor>af846d8416ac2ad008616f7241ac9a496</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>innerOpeningAngle</name>
      <anchorfile>class_hyperboloid_shell_geometry.html</anchorfile>
      <anchor>ab2ba576cd3414f2638e8347de04f8f2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>innerRealAxis</name>
      <anchorfile>class_hyperboloid_shell_geometry.html</anchorfile>
      <anchor>ab6ca442485fa56ccb815460b026517af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>outerOpeningAngle</name>
      <anchorfile>class_hyperboloid_shell_geometry.html</anchorfile>
      <anchor>a0cd8370a76366db9fef076150bdab21d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>outerRadialExtent</name>
      <anchorfile>class_hyperboloid_shell_geometry.html</anchorfile>
      <anchor>a4f059e6a870eeb0de4a8f71cf45b494c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>outerRealAxis</name>
      <anchorfile>class_hyperboloid_shell_geometry.html</anchorfile>
      <anchor>afed2093bfabba59096a8aa44477b70ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_hyperboloid_shell_geometry.html</anchorfile>
      <anchor>a5eb0c5b10d53285bf7d282dafa9e2a69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_hyperboloid_shell_geometry.html</anchorfile>
      <anchor>ad5cb6d8bdbc64ac19dc22f3b68093dd9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HyperboloidShellGeometry</name>
      <anchorfile>class_hyperboloid_shell_geometry.html</anchorfile>
      <anchor>a870b240fe8211ffd7478372654c63bb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_hyperboloid_shell_geometry.html</anchorfile>
      <anchor>aa85006cf72310e6ab304a37ae2a1dedb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedGeometry</name>
    <filename>class_imported_geometry.html</filename>
    <base>GenGeometry</base>
    <base>SiteListInterface</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>a20fc563677a8c9e8a3aefd5dbeb0eff7</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>aa406edced4497520dee5bf6659c1f51d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>aad0e0385d69d4e4c2f114dc2405d8991</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importMetallicity</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>a9678468c3cea2440ab7d28ea772a8ae2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importTemperature</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>a82396b5ba355af504bff21c91d014797</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxTemperature</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>a660c581abd43dd9f9d8fa4da63984ac3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSites</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>ac5b96214e20b24fa46c104e45fb96b73</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>ad20dd34d55d91cde9779b054f20fa008</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>a46ab46ba450f0a3b883d6430f45eb09e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>a2d5455ca244413ca0f379169d04af1cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>sitePosition</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>a9c998bdb1fecb40660fadad86f55fed1</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>useColumns</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>ad8e76b64bc879d80c01551bd24d63a5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedGeometry</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>afd7047147c163f298b32805c615cc69e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ImportedGeometry</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>a3d9ee3afd04ddc264998d63a15f3a67f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>a417483cd1a85272d30d26086647ee1dc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_imported_geometry.html</anchorfile>
      <anchor>ae5e5d3db5fe380d69b1e2deea7431722</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedMedium</name>
    <filename>class_imported_medium.html</filename>
    <base>Medium</base>
    <base>SiteListInterface</base>
    <member kind="function">
      <type>Vec</type>
      <name>bulkVelocity</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a18e6e39d1294fe7130f2eb0a958c5d91</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>ad54f2ad5d9ee016e6240d68952843e40</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>aa6b23909a682b728b106a8976fe9d34f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a3f0ef1ee714d89b6d3d5b6842bf8d080</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMagneticField</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a552c4d368748bc487bbf03eb36c57fdc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMetallicity</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a22018c25a80fd4797b6f24c47d030c47</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParameters</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a61415c632e1b38383bcca455d80f4c9a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTemperature</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>af4d88e0f132b529186cd20ac4c474472</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVariableMix</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>aa4252375b170d816268932ed76dc8494</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVelocity</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>acf529b09c01830335bdf977edf2cbde8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importMagneticField</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>ad4b262c0d3c1d5ac03de62af5f3f28d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importMetallicity</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a1e442acda6a4e4d705b2d358075e3bbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importTemperature</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>ad5dab238be2917f07810ec9a9648f5e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importVariableMixParams</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a6c18365ff5c111abb323db7a9642513b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importVelocity</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>abc7aaee3e51dd40bc4ae41f7637df1ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>magneticField</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a303198f1855616507e43492a0875d079</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>abc924e78f0b03a401034514c2000cbc0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>massDensity</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a633f06609d7986d7f883012357d8142a</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>massFraction</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a80bbcae1ae707f737aa0f504023c0225</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaterialMix *</type>
      <name>materialMix</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>ae228ca4b77fd9e713e482334845c4828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaterialMixFamily *</type>
      <name>materialMixFamily</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a76918ae410f6dfffc0869be9f4ccf7ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxTemperature</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>aefe66cef93b3761d5f48ecdfea4ce945</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>afcc080023c305987f1f0def35f5c671b</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>const MaterialMix *</type>
      <name>mix</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>afd286bd8c9fc1f4e0bcffc4370166018</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const MaterialMix *</type>
      <name>mix</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>abb202563ac9b3ef869b5e8ca36fbebac</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>number</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>aaeff76e2231d06b2987f53c91263e8c2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numberDensity</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>ade6d3d511759980588748cc9df44772c</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSites</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a6a61196b47f876a24e48eb2f75bb7791</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opticalDepthX</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a1699fdb309cd9251ea49959fa86b5c46</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opticalDepthY</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a92cac71ed698ecbc42266651920f9808</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opticalDepthZ</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a4b7ec6b9afbd8d8fd84278384e22d10f</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameters</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a3e36c70b7c04e3453932744e30a1e6de</anchor>
      <arglist>(Position bfr, Array &amp;params) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>sitePosition</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>af4a8a693e802d6e86c70f2c1a9ea6040</anchor>
      <arglist>(int index) const override</arglist>
    </member>
    <member kind="function">
      <type>const Snapshot *</type>
      <name>snapshot</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>ab231bf36770dd821536497c0b3e3ac75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>temperature</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a6fa9ac97c4dc8b6418f0fc6f035b66b7</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>useColumns</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a49ce99715619ac3a4cfaed581400cff1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedMedium</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a20e39a8b0cb45e5809e9bb850becf984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ImportedMedium</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a28ac7839cbc640e74a0efc795ccb41f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>abb642d17287e0601e17f30d3e15e7b4e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_imported_medium.html</anchorfile>
      <anchor>a09e6ca302e6ece4ac3abd6745d8984d2</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedMediumDensityProbe</name>
    <filename>class_imported_medium_density_probe.html</filename>
    <base>InputModelFormProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedMediumDensityProbe</name>
      <anchorfile>class_imported_medium_density_probe.html</anchorfile>
      <anchor>a1127c85a8fea0944ce68f9201d0e7ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probeImportedMedium</name>
      <anchorfile>class_imported_medium_density_probe.html</anchorfile>
      <anchor>af72ef9b33ba4b83ca68be18b173e0eef</anchor>
      <arglist>(string sh, const ImportedMedium *medium, const Snapshot *snapshot) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedMediumMetallicityProbe</name>
    <filename>class_imported_medium_metallicity_probe.html</filename>
    <base>InputModelFormProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedMediumMetallicityProbe</name>
      <anchorfile>class_imported_medium_metallicity_probe.html</anchorfile>
      <anchor>a0eba408145445eba252d4e99947d7937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probeImportedMedium</name>
      <anchorfile>class_imported_medium_metallicity_probe.html</anchorfile>
      <anchor>a862871d996b5206b9ed4a46e500b4aa1</anchor>
      <arglist>(string sh, const ImportedMedium *medium, const Snapshot *snapshot) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedMediumTemperatureProbe</name>
    <filename>class_imported_medium_temperature_probe.html</filename>
    <base>InputModelFormProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedMediumTemperatureProbe</name>
      <anchorfile>class_imported_medium_temperature_probe.html</anchorfile>
      <anchor>ab785577e57e5c315f5f1031e126248fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probeImportedMedium</name>
      <anchorfile>class_imported_medium_temperature_probe.html</anchorfile>
      <anchor>a76afbb669de539b0641821cc99c407b5</anchor>
      <arglist>(string sh, const ImportedMedium *medium, const Snapshot *snapshot) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedMediumVelocityProbe</name>
    <filename>class_imported_medium_velocity_probe.html</filename>
    <base>InputModelFormProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedMediumVelocityProbe</name>
      <anchorfile>class_imported_medium_velocity_probe.html</anchorfile>
      <anchor>abb45615dbaa9dae0c10af593908a21e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probeImportedMedium</name>
      <anchorfile>class_imported_medium_velocity_probe.html</anchorfile>
      <anchor>a7e432db6669d5a153e63fb9baf6b7149</anchor>
      <arglist>(string sh, const ImportedMedium *medium, const Snapshot *snapshot) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedSource</name>
    <filename>class_imported_source.html</filename>
    <base>Source</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a660b0a46b5b60793b87ed1708073237a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a2dbc20bbbba2ddc93ef132cc43030a5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVelocity</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a062bd78f34f8805cd28ff6fd30efce5a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importCurrentMass</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a63f4d1b455b591f97957852b5084e631</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importVelocity</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a5f467c6bb4b30dc29b5613c627108a12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importVelocityDispersion</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a3a0fe4b133e1bf6e1fb0d409bd766538</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launch</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>abae8492da6b103ab867a5441ef048b00</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double L) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>luminosity</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a98ed7df6fa6f185bfd099295fef35a65</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>meanSpecificLuminosity</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a6e5b7b3b475201642e7c72778b60e6fa</anchor>
      <arglist>(const Band *band, int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>meanSpecificLuminosity</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a437e4867ea03ed73777699fb93889aa2</anchor>
      <arglist>(Range wavelengthRange, int m) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareForLaunch</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a67d81535ed2403cf01ee2d06eb11b792</anchor>
      <arglist>(double sourceBias, size_t firstIndex, size_t numIndices) override</arglist>
    </member>
    <member kind="function">
      <type>SEDFamily *</type>
      <name>sedFamily</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a12cdc597b559151771c905e7db1a89da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Snapshot *</type>
      <name>snapshot</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a986bcdc76e10cc169ecb15b56517398a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a99a78c02510011751e18780d2b4ff900</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a9b27e4d4fc7ab66a1ccbc5fa5cd552be</anchor>
      <arglist>(double wavelength, int m) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>useColumns</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>ac91878dc4f89c903e2cc35f007ee63a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a10bf84942f178c40f7523f089fd35386</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedSource</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a173c5055c2aac061b7ecf89487222dac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ImportedSource</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>a9cf05481fee064a0d3207b0389cc0f25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>ac3546e25547dcb54dc88cb18551baebb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_imported_source.html</anchorfile>
      <anchor>aba47a01251863f9619d068c3bfeb4b28</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedSourceAgeProbe</name>
    <filename>class_imported_source_age_probe.html</filename>
    <base>ImportedSourceWeightedProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedSourceAgeProbe</name>
      <anchorfile>class_imported_source_age_probe.html</anchorfile>
      <anchor>ab8b2ab1f60a8f6b8b10d604a329268bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probeImportedSourceWeighted</name>
      <anchorfile>class_imported_source_age_probe.html</anchorfile>
      <anchor>a32d3f45a0864d481e3942d17a9fbced8</anchor>
      <arglist>(string sweight, const vector&lt; const Snapshot * &gt; &amp;snapshots, std::function&lt; double(const Snapshot *snapshot, int m)&gt; weight) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedSourceDensityProbe</name>
    <filename>class_imported_source_density_probe.html</filename>
    <base>InputModelFormProbe</base>
    <member kind="enumeration">
      <type></type>
      <name>MassType</name>
      <anchorfile>class_imported_source_density_probe.html</anchorfile>
      <anchor>a901332270934613e8d09af636dd46999</anchor>
      <arglist></arglist>
      <enumvalue file="class_imported_source_density_probe.html" anchor="a901332270934613e8d09af636dd46999ac1da591ce3b0203b3a7ecc93afac7145">InitialMass</enumvalue>
      <enumvalue file="class_imported_source_density_probe.html" anchor="a901332270934613e8d09af636dd46999a9099053b0147f0a2278b6a26505afa51">CurrentMass</enumvalue>
    </member>
    <member kind="function">
      <type>MassType</type>
      <name>massType</name>
      <anchorfile>class_imported_source_density_probe.html</anchorfile>
      <anchor>a68f3c79730b15dd8aa2ca5b113d675bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedSourceDensityProbe</name>
      <anchorfile>class_imported_source_density_probe.html</anchorfile>
      <anchor>a7c547951b6b60335b18101de3f9e6c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probeImportedSources</name>
      <anchorfile>class_imported_source_density_probe.html</anchorfile>
      <anchor>ae0673b560f0c8d802cf997e8e2667095</anchor>
      <arglist>(const vector&lt; const ImportedSource * &gt; &amp;sources, const vector&lt; const Snapshot * &gt; &amp;snapshots) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedSourceLuminosityProbe</name>
    <filename>class_imported_source_luminosity_probe.html</filename>
    <base>InputModelFormProbe</base>
    <base>MaterialWavelengthRangeInterface</base>
    <member kind="function">
      <type>bool</type>
      <name>convolve</name>
      <anchorfile>class_imported_source_luminosity_probe.html</anchorfile>
      <anchor>a07cd476917ed1260d785b5fa9ca3fb8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WavelengthGrid *</type>
      <name>materialWavelengthGrid</name>
      <anchorfile>class_imported_source_luminosity_probe.html</anchorfile>
      <anchor>a99975d288f3030d2851ef1250ab24079</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>WavelengthGrid *</type>
      <name>wavelengthGrid</name>
      <anchorfile>class_imported_source_luminosity_probe.html</anchorfile>
      <anchor>a83de064f0cce1bba36e5b6a75c10b8c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_imported_source_luminosity_probe.html</anchorfile>
      <anchor>ae7889161631a48fe1566fae5751d2d9e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedSourceLuminosityProbe</name>
      <anchorfile>class_imported_source_luminosity_probe.html</anchorfile>
      <anchor>a13ef1522337516c0942dfec00229c984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probeImportedSources</name>
      <anchorfile>class_imported_source_luminosity_probe.html</anchorfile>
      <anchor>a625216fae4b64706f81eaa76f11da5c1</anchor>
      <arglist>(const vector&lt; const ImportedSource * &gt; &amp;sources, const vector&lt; const Snapshot * &gt; &amp;snapshots) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedSourceMetallicityProbe</name>
    <filename>class_imported_source_metallicity_probe.html</filename>
    <base>ImportedSourceWeightedProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedSourceMetallicityProbe</name>
      <anchorfile>class_imported_source_metallicity_probe.html</anchorfile>
      <anchor>a45bbe2b58c87cf78e5977294b2b332d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probeImportedSourceWeighted</name>
      <anchorfile>class_imported_source_metallicity_probe.html</anchorfile>
      <anchor>a201940dd027eb98e46f191643c301ca1</anchor>
      <arglist>(string sweight, const vector&lt; const Snapshot * &gt; &amp;snapshots, std::function&lt; double(const Snapshot *snapshot, int m)&gt; weight) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedSourceVelocityProbe</name>
    <filename>class_imported_source_velocity_probe.html</filename>
    <base>ImportedSourceWeightedProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedSourceVelocityProbe</name>
      <anchorfile>class_imported_source_velocity_probe.html</anchorfile>
      <anchor>a6267561e7828e23901d5aa3a55f8de54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probeImportedSourceWeighted</name>
      <anchorfile>class_imported_source_velocity_probe.html</anchorfile>
      <anchor>a3f0a42317547a23884b0ce490699258d</anchor>
      <arglist>(string sweight, const vector&lt; const Snapshot * &gt; &amp;snapshots, std::function&lt; double(const Snapshot *snapshot, int m)&gt; weight) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedSourceWeightedProbe</name>
    <filename>class_imported_source_weighted_probe.html</filename>
    <base>InputModelFormProbe</base>
    <base>MaterialWavelengthRangeInterface</base>
    <member kind="enumeration">
      <type></type>
      <name>Weight</name>
      <anchorfile>class_imported_source_weighted_probe.html</anchorfile>
      <anchor>a9b889656f9f1f7bbb73feb0bd81d581e</anchor>
      <arglist></arglist>
      <enumvalue file="class_imported_source_weighted_probe.html" anchor="a9b889656f9f1f7bbb73feb0bd81d581ea46aa9fb99dc9c6f04b0b13a5db67f120">Luminosity</enumvalue>
      <enumvalue file="class_imported_source_weighted_probe.html" anchor="a9b889656f9f1f7bbb73feb0bd81d581eac1da591ce3b0203b3a7ecc93afac7145">InitialMass</enumvalue>
      <enumvalue file="class_imported_source_weighted_probe.html" anchor="a9b889656f9f1f7bbb73feb0bd81d581ea9099053b0147f0a2278b6a26505afa51">CurrentMass</enumvalue>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelength</name>
      <anchorfile>class_imported_source_weighted_probe.html</anchorfile>
      <anchor>acccaecb87e194d4656d8cef9b07ce957</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_imported_source_weighted_probe.html</anchorfile>
      <anchor>acc558538413ee67102ab270a88e1127f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Weight</type>
      <name>weight</name>
      <anchorfile>class_imported_source_weighted_probe.html</anchorfile>
      <anchor>a603acf2c082fb873b4f7e04a87ec1f27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImportedSourceWeightedProbe</name>
      <anchorfile>class_imported_source_weighted_probe.html</anchorfile>
      <anchor>a07d467011b31df97bb65abec72fb905a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probeImportedSources</name>
      <anchorfile>class_imported_source_weighted_probe.html</anchorfile>
      <anchor>aca8f57ae4ca9f5234e37cfdd8b20ff98</anchor>
      <arglist>(const vector&lt; const ImportedSource * &gt; &amp;sources, const vector&lt; const Snapshot * &gt; &amp;snapshots) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>probeImportedSourceWeighted</name>
      <anchorfile>class_imported_source_weighted_probe.html</anchorfile>
      <anchor>a2f5ab3e42f456bfcbcdfd182edb6fccc</anchor>
      <arglist>(string sweight, const vector&lt; const Snapshot * &gt; &amp;snapshots, std::function&lt; double(const Snapshot *snapshot, int m)&gt; weight)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Indices</name>
    <filename>class_indices.html</filename>
    <class kind="class">Indices::Iterator</class>
    <member kind="function">
      <type></type>
      <name>Indices</name>
      <anchorfile>class_indices.html</anchorfile>
      <anchor>a44c102af1cf786bf28473705fb7ffcb8</anchor>
      <arglist>(C cont, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Indices</name>
      <anchorfile>class_indices.html</anchorfile>
      <anchor>a04309490e79473d5766181c0723d584f</anchor>
      <arglist>(int range, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>class_indices.html</anchorfile>
      <anchor>af71f4624a5d7f162c7725efcb0207cd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>class_indices.html</anchorfile>
      <anchor>a08c95f7fb03062651dda186082cfc309</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Indices::Iterator</name>
    <filename>class_indices_1_1_iterator.html</filename>
  </compound>
  <compound kind="class">
    <name>InputModelFormProbe</name>
    <filename>class_input_model_form_probe.html</filename>
    <base>Probe</base>
    <member kind="function">
      <type>GenericForm *</type>
      <name>form</name>
      <anchorfile>class_input_model_form_probe.html</anchorfile>
      <anchor>a0a53b9a2f5df36179725f2f85503434f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_input_model_form_probe.html</anchorfile>
      <anchor>ab9be1b7cb1b58cddca515250da192533</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InputModelFormProbe</name>
      <anchorfile>class_input_model_form_probe.html</anchorfile>
      <anchor>a0ab516434d3300d8e0e19eba90d706de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>probeImportedMedium</name>
      <anchorfile>class_input_model_form_probe.html</anchorfile>
      <anchor>a914095f95694de64afca12c8d56c823a</anchor>
      <arglist>(string sh, const ImportedMedium *medium, const Snapshot *snapshot)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>probeImportedSources</name>
      <anchorfile>class_input_model_form_probe.html</anchorfile>
      <anchor>a8de5ab5151ea8a3d5444bdd7b25f113f</anchor>
      <arglist>(const vector&lt; const ImportedSource * &gt; &amp;sources, const vector&lt; const Snapshot * &gt; &amp;snapshots)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Instrument</name>
    <filename>class_instrument.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual Direction</type>
      <name>bfkobs</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>acc49b37419b670c5400110e246e2afc2</anchor>
      <arglist>(const Position &amp;bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Direction</type>
      <name>bfky</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a73e23787291c9b46a7617b1a36464417</anchor>
      <arglist>(const Position &amp;bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>detect</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a5a77f941e0ea5096cae62b36ab1fc8a8</anchor>
      <arglist>(PhotonPacket *pp)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>determineSameObserverAsPreceding</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>af6761dff8e9d0e49496067643b94808d</anchor>
      <arglist>(const Instrument *precedingInstrument)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a29a7e81b9d198813fcfba6980fe0ae99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>instrumentName</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a9d6251cd44940bedeb5614f3e33c7788</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const WavelengthGrid *</type>
      <name>instrumentWavelengthGrid</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>aefa576775b578b2fb0a2daf77e0295d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObserverAsPreceding</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>ad5da9c3e572d3e4abdb3b37c41c651bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>itemName</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a815932f9c40d52ffae98b78e463b9a42</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numScatteringLevels</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>aff931d0fdca6ee7768952ceb6ca49cf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>recordComponents</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>af7bd0a9bfdb3b316a26f8c0a756d5bec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>recordPolarization</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a7880f6e0bb9904ca43ce4c0d0d4acd03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>recordStatistics</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>abf99028e09c8f594a993b168ee3bede6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WavelengthGrid *</type>
      <name>wavelengthGrid</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>ad5d6eea7c7cdb6bae99d2f9203421708</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>addf178518d42a8bdc106553f45222249</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Instrument</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a1a297b2cbe1e239c8ede2e90185e2880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~Instrument</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a4d7d6e5a2b05597c049a9e0ca3be3d5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FluxRecorder *</type>
      <name>instrumentFluxRecorder</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a9b10a088cf546f64ec57f894fcb205a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSameObserverAsPreceding</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a7a08f4000cf95c5c7bb0b2f4dec6b77c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a12be6d697d3d4f80d5c33b98ac23cb1c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_instrument.html</anchorfile>
      <anchor>a25ed67c9f1288c0e722cb90b01f20213</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InstrumentSystem</name>
    <filename>class_instrument_system.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>WavelengthGrid *</type>
      <name>defaultWavelengthGrid</name>
      <anchorfile>class_instrument_system.html</anchorfile>
      <anchor>a7985ca5f6c6b5b4304b479ad54c88feb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_instrument_system.html</anchorfile>
      <anchor>a722c8ef74cfa03abf59318f05ebb0464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Instrument * &gt; &amp;</type>
      <name>instruments</name>
      <anchorfile>class_instrument_system.html</anchorfile>
      <anchor>a45d4aaa92e80c4fa9d74cfdc0fa525ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>class_instrument_system.html</anchorfile>
      <anchor>ab39d90eb34d8e0e110e5219cb157b778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InstrumentSystem</name>
      <anchorfile>class_instrument_system.html</anchorfile>
      <anchor>a6879cc813eb85a9e1f573c330d577c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_instrument_system.html</anchorfile>
      <anchor>a3610aea418c3e4bed0562bdb0e72adb1</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InstrumentWavelengthGridProbe</name>
    <filename>class_instrument_wavelength_grid_probe.html</filename>
    <base>SpecialtyProbe</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeWavelengthGrid</name>
      <anchorfile>class_instrument_wavelength_grid_probe.html</anchorfile>
      <anchor>a6a1663b4a1d2fe5e8972a6aa40db948a</anchor>
      <arglist>(Probe *item, const WavelengthGrid *wavelengthGrid, string filename, string description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InstrumentWavelengthGridProbe</name>
      <anchorfile>class_instrument_wavelength_grid_probe.html</anchorfile>
      <anchor>a9199a15b2216661e746b198017ac9d42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_instrument_wavelength_grid_probe.html</anchorfile>
      <anchor>a0d79929e302bf6ca852e33cebc18ae2e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IntegratedLuminosityNormalization</name>
    <filename>class_integrated_luminosity_normalization.html</filename>
    <base>LuminosityNormalization</base>
    <member kind="enumeration">
      <type></type>
      <name>WavelengthRange</name>
      <anchorfile>class_integrated_luminosity_normalization.html</anchorfile>
      <anchor>ac0032d102c2478140e07e1c71cbc807f</anchor>
      <arglist></arglist>
      <enumvalue file="class_integrated_luminosity_normalization.html" anchor="ac0032d102c2478140e07e1c71cbc807faf31bbdd1b3e85bccd652680e16935819">Source</enumvalue>
      <enumvalue file="class_integrated_luminosity_normalization.html" anchor="ac0032d102c2478140e07e1c71cbc807fab1c94ca2fbc3e78fc30069c8d0f01680">All</enumvalue>
      <enumvalue file="class_integrated_luminosity_normalization.html" anchor="ac0032d102c2478140e07e1c71cbc807fa90589c47f06eb971d548591f23c285af">Custom</enumvalue>
    </member>
    <member kind="function">
      <type>double</type>
      <name>integratedLuminosity</name>
      <anchorfile>class_integrated_luminosity_normalization.html</anchorfile>
      <anchor>a74a8ea10f47ed238b1131162bf0232e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>luminosityForSED</name>
      <anchorfile>class_integrated_luminosity_normalization.html</anchorfile>
      <anchor>a43eac0d2cd29c04953090c2e2d4829ac</anchor>
      <arglist>(SED *sed) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxWavelength</name>
      <anchorfile>class_integrated_luminosity_normalization.html</anchorfile>
      <anchor>adf16bff660702dbb29707a11e60cdc9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWavelength</name>
      <anchorfile>class_integrated_luminosity_normalization.html</anchorfile>
      <anchor>a36a67966e7e14948209f16b2efe8123e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WavelengthRange</type>
      <name>wavelengthRange</name>
      <anchorfile>class_integrated_luminosity_normalization.html</anchorfile>
      <anchor>aa791af7644f281cc3b7ebfa4a25b019c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IntegratedLuminosityNormalization</name>
      <anchorfile>class_integrated_luminosity_normalization.html</anchorfile>
      <anchor>ad9a9329531f52c8acc941b0b34ad606b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IntPropertyHandler</name>
    <filename>class_int_property_handler.html</filename>
    <base>PropertyHandler</base>
    <member kind="function">
      <type>void</type>
      <name>acceptVisitor</name>
      <anchorfile>class_int_property_handler.html</anchorfile>
      <anchor>a724716a80b1c305275a7eeb2ba0afb7f</anchor>
      <arglist>(PropertyHandlerVisitor *visitor) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>defaultValue</name>
      <anchorfile>class_int_property_handler.html</anchorfile>
      <anchor>ae943392173ca064653c022016527042f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNames</name>
      <anchorfile>class_int_property_handler.html</anchorfile>
      <anchor>a8a8bfb1db0682f142a4bb51996a9b057</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidValue</name>
      <anchorfile>class_int_property_handler.html</anchorfile>
      <anchor>a16be7f6ce401d44798087f470f6fd0da</anchor>
      <arglist>(string value) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxValue</name>
      <anchorfile>class_int_property_handler.html</anchorfile>
      <anchor>aef264aa5610bf92488ce36cb66d08d15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>minValue</name>
      <anchorfile>class_int_property_handler.html</anchorfile>
      <anchor>a4070be6b3d7364f7f27e82f899ee4f7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_int_property_handler.html</anchorfile>
      <anchor>a842d0c91ab41aee39f48c0b2159ad785</anchor>
      <arglist>(const PropertyHandler &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_int_property_handler.html</anchorfile>
      <anchor>a70cc449cdf73913e21c3b1951baa6d2c</anchor>
      <arglist>(Item *target, const PropertyDef *property, const SchemaDef *schema, NameManager *nameMgr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>class_int_property_handler.html</anchorfile>
      <anchor>a526ed0f1f80bda16d1168b57c302fb7d</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>value</name>
      <anchorfile>class_int_property_handler.html</anchorfile>
      <anchor>a3e19fff0700c403795f2597514bbfc16</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IntPropertyWizardPane</name>
    <filename>class_int_property_wizard_pane.html</filename>
    <base>PropertyWizardPane</base>
    <member kind="slot">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>class_int_property_wizard_pane.html</anchorfile>
      <anchor>aaf1bd927112f5cdf12f5c448f1adf4da</anchor>
      <arglist>(const QString &amp;text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntPropertyWizardPane</name>
      <anchorfile>class_int_property_wizard_pane.html</anchorfile>
      <anchor>a0c8530ef4bbc1c4ad1f9d8fa798f6968</anchor>
      <arglist>(std::unique_ptr&lt; PropertyHandler &gt; handler, QObject *target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IsotropicAngularDistribution</name>
    <filename>class_isotropic_angular_distribution.html</filename>
    <base>AngularDistribution</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_isotropic_angular_distribution.html</anchorfile>
      <anchor>ab980f41af989c2a01628ac9cc5884d94</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>generateDirection</name>
      <anchorfile>class_isotropic_angular_distribution.html</anchorfile>
      <anchor>a04a5c3d8e91d80dfbd3105d033973958</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probabilityForDirection</name>
      <anchorfile>class_isotropic_angular_distribution.html</anchorfile>
      <anchor>a4381f32139be7b1eb95df1ec901dfaa9</anchor>
      <arglist>(Direction bfk) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IsotropicAngularDistribution</name>
      <anchorfile>class_isotropic_angular_distribution.html</anchorfile>
      <anchor>a50bad9f612c3cb4e38c641bc178f43f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Item</name>
    <filename>class_item.html</filename>
    <member kind="function">
      <type></type>
      <name>Item</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a50375948d49a09e2310d2d9a46878274</anchor>
      <arglist>(const Item &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Item</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a33cc9c0bc556b5a33a9d0d58d37c602b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a38d549e7b111346d06a16769a5ad3058</anchor>
      <arglist>(Item *child)</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Item * &gt; &amp;</type>
      <name>children</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a7e548e0968392b1d8660fdf874fc3c0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearItemListProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a1484df6132a48d424fb21e270676ad0e</anchor>
      <arglist>(const PropertyDef *property)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyChild</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a3c796c507df33bc1ac2bf855b69c9376</anchor>
      <arglist>(Item *child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBoolProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a509b5ecf5265e383facadd20d1bae193</anchor>
      <arglist>(const PropertyDef *property) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vector&lt; double &gt;</type>
      <name>getDoubleListProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>ac133e0770b8265b8e3d35e317f3063f4</anchor>
      <arglist>(const PropertyDef *property) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDoubleProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>ae039cd209503249c0f22a0c9f77fb470</anchor>
      <arglist>(const PropertyDef *property) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>getEnumProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>abca3df225ca3c057b6644f16514de141</anchor>
      <arglist>(const PropertyDef *property) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIntProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a9f2fcc5dae0a574d4b59806bdad8ff3c</anchor>
      <arglist>(const PropertyDef *property) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vector&lt; Item * &gt;</type>
      <name>getItemListProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a4a629c4587b147c5b15280a24ad801de</anchor>
      <arglist>(const PropertyDef *property) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Item *</type>
      <name>getItemProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a1e414498d78ea9defda55cbd517abc34</anchor>
      <arglist>(const PropertyDef *property) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>getStringProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>aed7ba62078d4530ecdaf878e42a90dd5</anchor>
      <arglist>(const PropertyDef *property) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUtilityProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a17fe63c7c427c6ed24bdb8bd9b4d5670</anchor>
      <arglist>(string name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertIntoItemListProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>ab2f93f76a8d54870da831fc1d6d829a8</anchor>
      <arglist>(const PropertyDef *property, int index, Item *item)</arglist>
    </member>
    <member kind="function">
      <type>Item &amp;</type>
      <name>operator=</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>ad25db90543a7196d37bca50bbdf7465b</anchor>
      <arglist>(const Item &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Item *</type>
      <name>parent</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>aa396ee3104e78ef6e480cad7f62234a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromItemListProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>aafe666947c69f4f79f96a79ebd68b81a</anchor>
      <arglist>(const PropertyDef *property, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a4c584a87c648adc56d1c85c6a444c24b</anchor>
      <arglist>(const PropertyDef *property, bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleListProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a01985fe5bafdce9c07b61da2b71d98f0</anchor>
      <arglist>(const PropertyDef *property, vector&lt; double &gt; value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a51980bf6006ff9732fa2848367ee0e1b</anchor>
      <arglist>(const PropertyDef *property, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnumProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a578a98f2a83e5667abc791be00df9a09</anchor>
      <arglist>(const PropertyDef *property, string value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a42db68ea1347d6a0583885486698d9fc</anchor>
      <arglist>(const PropertyDef *property, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setItemProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>af270521e836da6bac0108f82624ef6cb</anchor>
      <arglist>(const PropertyDef *property, Item *item)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>aa694315a4c1729ae3de0e1df8a0eeb95</anchor>
      <arglist>(const PropertyDef *property, string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUtilityProperty</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a862f28e20223b912fdb64b0376d0bdb0</anchor>
      <arglist>(string name, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>type</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>ac3da6c647f4c7b3572c1ce91b8fc5429</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Item</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a297720c02984eab37332ae795d22189d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>a3590d76a24f11e48081aba72db379a13</anchor>
      <arglist>(Item *child)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>class_item.html</anchorfile>
      <anchor>afab45e064df9df96e30c51b45eb5d540</anchor>
      <arglist>(Item *parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ItemListPropertyHandler</name>
    <filename>class_item_list_property_handler.html</filename>
    <base>AbstractItemPropertyHandler</base>
    <member kind="function">
      <type>void</type>
      <name>acceptVisitor</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>aae554e90f2da98eb6bd99cebfb3289c8</anchor>
      <arglist>(PropertyHandlerVisitor *visitor) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addNewItemOfType</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>aefecdfdf33a8dcb5d7f27c80cafd9b05</anchor>
      <arglist>(string type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addValue</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>a5026c95570fc60640ebb4730ff3fb0c8</anchor>
      <arglist>(Item *value)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Item * &gt;</type>
      <name>children</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>afb664535d93e714fe1c7068b4bdc9877</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNames</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>aa246dbf60ec22556a1875c77f3bf4feb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertNewItemOfType</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>aed620468733c67201c5bf7ec2b04d013</anchor>
      <arglist>(int index, string type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertValue</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>ae409ec6b374ffa0424e91269b9b78bc2</anchor>
      <arglist>(int index, Item *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeValueAt</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>a70ff96d4b3097bf929462c900836cba5</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>retrieveSelectedRow</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>ad71e49f7b6e233ad887b02c42878d5b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToEmpty</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>a47a679c4a8faf9cb08bea289c5eea454</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeSelectedRow</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>a14307787e18ffa5bcd645e363b79a64c</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Item * &gt;</type>
      <name>value</name>
      <anchorfile>class_item_list_property_handler.html</anchorfile>
      <anchor>aa7dd91b4b71a7ead8e8684d7e3783614</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ItemListPropertyWizardPane</name>
    <filename>class_item_list_property_wizard_pane.html</filename>
    <base>PropertyWizardPane</base>
    <member kind="slot">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>class_item_list_property_wizard_pane.html</anchorfile>
      <anchor>a42bc20281fff52fb89c52c56b025be0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>editItem</name>
      <anchorfile>class_item_list_property_wizard_pane.html</anchorfile>
      <anchor>a56ab762e2b520c0f8b61bf74a66ac1f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>removeItem</name>
      <anchorfile>class_item_list_property_wizard_pane.html</anchorfile>
      <anchor>a54dec5ee1c99f3615fc26ceb68b78b09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>storeSelectedRow</name>
      <anchorfile>class_item_list_property_wizard_pane.html</anchorfile>
      <anchor>a040dff556a34e436a93eab19fc979d73</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>advanceToEditSubItem</name>
      <anchorfile>class_item_list_property_wizard_pane.html</anchorfile>
      <anchor>ad44db804635c9fe5aa6444dd7448051f</anchor>
      <arglist>(int subItemIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ItemListPropertyWizardPane</name>
      <anchorfile>class_item_list_property_wizard_pane.html</anchorfile>
      <anchor>a2a769b1dfad898daf4f87e4f2569de91</anchor>
      <arglist>(std::unique_ptr&lt; PropertyHandler &gt; handler, QObject *target)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setButtonsEnabled</name>
      <anchorfile>class_item_list_property_wizard_pane.html</anchorfile>
      <anchor>a9634e4c454f17fb818e0e922f3515ab3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ItemPropertyHandler</name>
    <filename>class_item_property_handler.html</filename>
    <base>AbstractItemPropertyHandler</base>
    <member kind="function">
      <type>void</type>
      <name>acceptVisitor</name>
      <anchorfile>class_item_property_handler.html</anchorfile>
      <anchor>acd4b50a1692aa22d44ee2e374d58cc1e</anchor>
      <arglist>(PropertyHandlerVisitor *visitor) override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Item * &gt;</type>
      <name>children</name>
      <anchorfile>class_item_property_handler.html</anchorfile>
      <anchor>a256f2751456e2611564a827fedc15bf0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNames</name>
      <anchorfile>class_item_property_handler.html</anchorfile>
      <anchor>afa2ab9f410c473ec51464cfc39ba351a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setToNewItemOfType</name>
      <anchorfile>class_item_property_handler.html</anchorfile>
      <anchor>a2d60054b2d4ccc2f58333c16f87e810b</anchor>
      <arglist>(string type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToNull</name>
      <anchorfile>class_item_property_handler.html</anchorfile>
      <anchor>aaaeed56335ff21045b8179ca8a78768e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setValue</name>
      <anchorfile>class_item_property_handler.html</anchorfile>
      <anchor>a37ac977456da7611eeee547f72061bf6</anchor>
      <arglist>(Item *value)</arglist>
    </member>
    <member kind="function">
      <type>Item *</type>
      <name>value</name>
      <anchorfile>class_item_property_handler.html</anchorfile>
      <anchor>a95e0225cbbd4e947c464f7e85092fb1f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ItemPropertyWizardPane</name>
    <filename>class_item_property_wizard_pane.html</filename>
    <base>PropertyWizardPane</base>
    <member kind="slot">
      <type>void</type>
      <name>selectTypeFor</name>
      <anchorfile>class_item_property_wizard_pane.html</anchorfile>
      <anchor>a91279ba4e980facd34ea8d3b8f87b984</anchor>
      <arglist>(QAbstractButton *button)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ItemPropertyWizardPane</name>
      <anchorfile>class_item_property_wizard_pane.html</anchorfile>
      <anchor>a65f44060be0ec5e0283c0fe3169b2209</anchor>
      <arglist>(std::unique_ptr&lt; PropertyHandler &gt; handler, QObject *target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ItemRegistry</name>
    <filename>class_item_registry.html</filename>
    <member kind="typedef">
      <type>Item *(*)()</type>
      <name>Instantiator</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>ae4a4a344150d0fa2ae57dbfefc41afdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a01daa64117871dc5d1652136a503473f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addEnum</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a3246ee42fedd0fb5a2748778294bd1bc</anchor>
      <arglist>(int enumIndex, const char *enumName, const char *enumTitle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addUnitDef</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>ae3777aec533a354ed8a7557642c7d5d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>beginEnum</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a327935b7d81466cabe5522ac00818f55</anchor>
      <arglist>(int enumCount)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>beginProperty</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>ac2368f1c1fbe8a8b13fe3f7d792ca750</anchor>
      <arglist>(const char *type, const char *name, const char *title, const PropertyAccessor *accessor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>beginSchema</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a122551f448fa8930cf30243e67ae564a</anchor>
      <arglist>(string name, string title, string version, string extension, string root, string type, string format, string url)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>beginType</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a370c745df57175a87f3edbd999e2a3a2</anchor>
      <arglist>(const char *type, const char *baseType, const char *title, Instantiator instantiator=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>endEnum</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a2c6eb3f9f56b22fe3c87e761f193b1c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finalize</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a9b5b291d604e6fd628c24acecd2d1eaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SchemaDef *</type>
      <name>getSchemaDef</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a93e4a9fbf0bcdf4261ff51cc411951fe</anchor>
      <arglist>(string name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setBase</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a20c4b16fc8075e90bd31928a71ccb99b</anchor>
      <arglist>(const char *type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDefaultValue</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a59b55764d2cf092f1ee85a74fdfb2860</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDisplayedIf</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a610e33050c6a0a561834367e2ed6a807</anchor>
      <arglist>(const char *expression)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setInsert</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>ab9065a30085af4a9020ef89353fed34a</anchor>
      <arglist>(const char *expression)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMaxValue</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a42994944b22dc70d53b2059c705f8556</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMinValue</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>acf5f3ba47caec9e2fc5d806d58ff666b</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setQuantity</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a13d0b36d697229d73d8f81753c5b2e44</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setRelevantIf</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a1516f5a0939902c95f08df54e64af8c3</anchor>
      <arglist>(const char *expression)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setRequiredIf</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>ab04bafdfc22cc5f05ec473e94dc5565a</anchor>
      <arglist>(const char *expression)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setSubPropertyIndexHere</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>afd44c0df703e495a95f24fb6d0713449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTypeAllowedIf</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a3a576c4a3b38b7806fe59ff0265597af</anchor>
      <arglist>(const char *expression)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTypeDisplayedIf</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a8d96ce5b540c44bbca5ad79b3928677f</anchor>
      <arglist>(const char *expression)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTypeInsert</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a27a63fb67cde3511af4c011c99a6a048</anchor>
      <arglist>(const char *expression)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>addUnitDefImpl</name>
      <anchorfile>class_item_registry.html</anchorfile>
      <anchor>a561bbd35710384075917932044c7039c</anchor>
      <arglist>(const UnitDef &amp;unitDef)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ItemUtils</name>
    <filename>class_item_utils.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isItemComplete</name>
      <anchorfile>class_item_utils.html</anchorfile>
      <anchor>a7e11bb3d0d617aa5c13b80c8cc9ba5e1</anchor>
      <arglist>(Item *item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>propertyConfiguredState</name>
      <anchorfile>class_item_utils.html</anchorfile>
      <anchor>ad8850ecec8b050abb76bdf6c24b65ee7</anchor>
      <arglist>(Item *item, string property)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>retrieveSelectedRow</name>
      <anchorfile>class_item_utils.html</anchorfile>
      <anchor>aa8acb18edb6c5d5074a40d4d5b9fdac7</anchor>
      <arglist>(Item *item, string property)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setHierarchyComplete</name>
      <anchorfile>class_item_utils.html</anchorfile>
      <anchor>ac4f8fc9985557d0f22c4f5860dbf47e0</anchor>
      <arglist>(Item *root)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setHierarchyConfigured</name>
      <anchorfile>class_item_utils.html</anchorfile>
      <anchor>a99b7c98cdb83d270a795eb9be8690d5f</anchor>
      <arglist>(const SchemaDef *schema, Item *root)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setItemComplete</name>
      <anchorfile>class_item_utils.html</anchorfile>
      <anchor>aaa37108eb8e81dd9c7898101c640e8ad</anchor>
      <arglist>(Item *item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setItemIncomplete</name>
      <anchorfile>class_item_utils.html</anchorfile>
      <anchor>a126f362935f2b773a53ebf8718ef92f1</anchor>
      <arglist>(Item *item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setPropertyConfiguredState</name>
      <anchorfile>class_item_utils.html</anchorfile>
      <anchor>a49a73be56b670136de4b85d8818ed46c</anchor>
      <arglist>(Item *item, string property, int configured)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>storeSelectedRow</name>
      <anchorfile>class_item_utils.html</anchorfile>
      <anchor>a55100e57750535678f0a266545ec1841</anchor>
      <arglist>(Item *item, string property, int row)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterationOptions</name>
    <filename>class_iteration_options.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>bool</type>
      <name>includePrimaryEmission</name>
      <anchorfile>class_iteration_options.html</anchorfile>
      <anchor>a13a753048ed8277d4a0efb095c56b8fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxPrimaryIterations</name>
      <anchorfile>class_iteration_options.html</anchorfile>
      <anchor>aa1d22c3289a0c197beb010a6fefa2a52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxSecondaryIterations</name>
      <anchorfile>class_iteration_options.html</anchorfile>
      <anchor>acf7763652144569f397fbe40c6ecb2bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>minPrimaryIterations</name>
      <anchorfile>class_iteration_options.html</anchorfile>
      <anchor>ad6a50bd4ac0f25ec48fae08c1efcf9af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>minSecondaryIterations</name>
      <anchorfile>class_iteration_options.html</anchorfile>
      <anchor>a7e4ca4ce998ad6ef496ba35f6822011f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>primaryIterationPacketsMultiplier</name>
      <anchorfile>class_iteration_options.html</anchorfile>
      <anchor>a451ce24d5a25084058f46bf05fee8b00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>secondaryIterationPacketsMultiplier</name>
      <anchorfile>class_iteration_options.html</anchorfile>
      <anchor>a5e9444b5d4ad5a3361743514539136b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IterationOptions</name>
      <anchorfile>class_iteration_options.html</anchorfile>
      <anchor>a204221c75b0152a090819751b03aaaca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LaserAngularDistribution</name>
    <filename>class_laser_angular_distribution.html</filename>
    <base>AxAngularDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>generateInclinationCosine</name>
      <anchorfile>class_laser_angular_distribution.html</anchorfile>
      <anchor>a75a2f14ce533c6512db5bccfd912b55d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probabilityForInclinationCosine</name>
      <anchorfile>class_laser_angular_distribution.html</anchorfile>
      <anchor>a4000a3c6a6b6f5e38a5e251b84678ef0</anchor>
      <arglist>(double costheta) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LaserAngularDistribution</name>
      <anchorfile>class_laser_angular_distribution.html</anchorfile>
      <anchor>a53f2bce36de6ca2d6c272a20309885cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LatexHierarchyWriter</name>
    <filename>class_latex_hierarchy_writer.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>class_latex_hierarchy_writer.html</anchorfile>
      <anchor>a27e145c29b44dc87b963883cad39dbc0</anchor>
      <arglist>(Item *item, const SchemaDef *schema, string filePath, string dataset, string producer=string())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LaunchedPacketsProbe</name>
    <filename>class_launched_packets_probe.html</filename>
    <base>SpecialtyWavelengthGridProbe</base>
    <base>ProbePhotonPacketInterface</base>
    <member kind="function">
      <type>void</type>
      <name>probePhotonPacket</name>
      <anchorfile>class_launched_packets_probe.html</anchorfile>
      <anchor>ab4afb1a5ee45b3d55653baca1c36bc17</anchor>
      <arglist>(const PhotonPacket *pp) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LaunchedPacketsProbe</name>
      <anchorfile>class_launched_packets_probe.html</anchorfile>
      <anchor>a33905ae20500198923ad4f71e09bafdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_launched_packets_probe.html</anchorfile>
      <anchor>ae88c310d596c94e952e433698aaf1d2f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_launched_packets_probe.html</anchorfile>
      <anchor>acf3102461200951a0869d6435f013cde</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>When</type>
      <name>when</name>
      <anchorfile>class_launched_packets_probe.html</anchorfile>
      <anchor>a63db6c82ca2f7a6cad53d5974b6216e3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinBorderWavelengthGrid</name>
    <filename>class_lin_border_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="function">
      <type>double</type>
      <name>maxWavelength</name>
      <anchorfile>class_lin_border_wavelength_grid.html</anchorfile>
      <anchor>a5c548b94cbd688f4f3e58275c34336d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWavelength</name>
      <anchorfile>class_lin_border_wavelength_grid.html</anchorfile>
      <anchor>ab5d6b6c894e4e7debc9d5c5aebaa5fe5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numWavelengthBins</name>
      <anchorfile>class_lin_border_wavelength_grid.html</anchorfile>
      <anchor>a53b9731f89baf6877ba5b646d128f95a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinBorderWavelengthGrid</name>
      <anchorfile>class_lin_border_wavelength_grid.html</anchorfile>
      <anchor>a30400546eea0caf9ed491ac032eb1c04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_lin_border_wavelength_grid.html</anchorfile>
      <anchor>ac6a1eaf65360e783b9fa037d5ffacc85</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearCutForm</name>
    <filename>class_linear_cut_form.html</filename>
    <base>GenericForm</base>
    <member kind="function">
      <type>double</type>
      <name>endX</name>
      <anchorfile>class_linear_cut_form.html</anchorfile>
      <anchor>a3c0979d4eff6b057692649982ae86d91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>endY</name>
      <anchorfile>class_linear_cut_form.html</anchorfile>
      <anchor>a0a131af894991497bd9839fb78508b81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>endZ</name>
      <anchorfile>class_linear_cut_form.html</anchorfile>
      <anchor>a14d57a867fe0b7dd80c04173b405aa00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSamples</name>
      <anchorfile>class_linear_cut_form.html</anchorfile>
      <anchor>a8d68da62481e6851d25ef77730647d36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>startX</name>
      <anchorfile>class_linear_cut_form.html</anchorfile>
      <anchor>a3bb9df6a86b0eda7c05491c0c28ea6fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>startY</name>
      <anchorfile>class_linear_cut_form.html</anchorfile>
      <anchor>a5be7711eea55f3ebc9536047fb314561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>startZ</name>
      <anchorfile>class_linear_cut_form.html</anchorfile>
      <anchor>a47f93e020aa73e1531c546ed3c51c2ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_linear_cut_form.html</anchorfile>
      <anchor>a25090c9a55d1c4d6f40b47467a21401e</anchor>
      <arglist>(const ProbeFormBridge *bridge) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearCutForm</name>
      <anchorfile>class_linear_cut_form.html</anchorfile>
      <anchor>ab3a06262818c67163e6b461fc4019aef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearDustDestructionRecipe</name>
    <filename>class_linear_dust_destruction_recipe.html</filename>
    <base>DustDestructionRecipe</base>
    <member kind="function">
      <type>double</type>
      <name>densityFraction</name>
      <anchorfile>class_linear_dust_destruction_recipe.html</anchorfile>
      <anchor>a4681b3a069b2c409a7d6acec1b0e9c5f</anchor>
      <arglist>(bool graphite, double a, const Array &amp;Jv, double T) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxGraphiteTemperature</name>
      <anchorfile>class_linear_dust_destruction_recipe.html</anchorfile>
      <anchor>aa8e666807d86c2939274c454abd8160b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxSilicateTemperature</name>
      <anchorfile>class_linear_dust_destruction_recipe.html</anchorfile>
      <anchor>a6e35ff14f771178003e957775945d986</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minGraphiteTemperature</name>
      <anchorfile>class_linear_dust_destruction_recipe.html</anchorfile>
      <anchor>aadae753e1f1a82d823cc5f2ec7ab9212</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minSilicateTemperature</name>
      <anchorfile>class_linear_dust_destruction_recipe.html</anchorfile>
      <anchor>ab3fe67e9f7c560e84d81776ec8f87b51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearDustDestructionRecipe</name>
      <anchorfile>class_linear_dust_destruction_recipe.html</anchorfile>
      <anchor>aad222a9a3207c941ac97cb96a9d34634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_linear_dust_destruction_recipe.html</anchorfile>
      <anchor>a9504e681b6f471b39fedcfee38580b30</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LineGasSecondarySource</name>
    <filename>class_line_gas_secondary_source.html</filename>
    <base>SecondarySource</base>
    <member kind="function">
      <type></type>
      <name>LineGasSecondarySource</name>
      <anchorfile>class_line_gas_secondary_source.html</anchorfile>
      <anchor>ad9b4874a5b1beb0f9f8253fcacb11f5e</anchor>
      <arglist>(SimulationItem *parent, int h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launch</name>
      <anchorfile>class_line_gas_secondary_source.html</anchorfile>
      <anchor>aca58a0dcba20650dd972e4ab26658e54</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double L) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>prepareLuminosities</name>
      <anchorfile>class_line_gas_secondary_source.html</anchorfile>
      <anchor>a03ad24ef7f06f7a7846e83814a458101</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preparePacketMap</name>
      <anchorfile>class_line_gas_secondary_source.html</anchorfile>
      <anchor>af5d1543d228016513679e8ad8e1ad92a</anchor>
      <arglist>(size_t firstIndex, size_t numIndices) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LineLuminosityNormalization</name>
    <filename>class_line_luminosity_normalization.html</filename>
    <base>LuminosityNormalization</base>
    <member kind="function">
      <type>double</type>
      <name>luminosity</name>
      <anchorfile>class_line_luminosity_normalization.html</anchorfile>
      <anchor>a4fdc4691a3b1f78ea452817d83b9395e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>luminosityForSED</name>
      <anchorfile>class_line_luminosity_normalization.html</anchorfile>
      <anchor>aa42d35f4b0d29303eca8f1b10dddbd41</anchor>
      <arglist>(SED *sed) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelength</name>
      <anchorfile>class_line_luminosity_normalization.html</anchorfile>
      <anchor>ad4ae76ae7c2e4433201007ee5ff05f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LineLuminosityNormalization</name>
      <anchorfile>class_line_luminosity_normalization.html</anchorfile>
      <anchor>a5ebf5bd2585f437dbc0e205735c39cad</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LineSED</name>
    <filename>class_line_s_e_d.html</filename>
    <base>SED</base>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_line_s_e_d.html</anchorfile>
      <anchor>ad07c84692a1cbab2afa4dfbd2815416f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>integratedLuminosity</name>
      <anchorfile>class_line_s_e_d.html</anchorfile>
      <anchor>ab9295a8de463139d1187a661288c375b</anchor>
      <arglist>(const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_line_s_e_d.html</anchorfile>
      <anchor>ab316082774498eda0025a3112ffe0198</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LineSED</name>
      <anchorfile>class_line_s_e_d.html</anchorfile>
      <anchor>adda96b9d564a43eaa45b682f00bcc1c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>getWavelengthsAndLuminosities</name>
      <anchorfile>class_line_s_e_d.html</anchorfile>
      <anchor>a05208c017a20ca7a30f8082a441e361a</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;Lv) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_line_s_e_d.html</anchorfile>
      <anchor>aa5ffbab19a68aa6188ac32dde2bcfe82</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinMesh</name>
    <filename>class_lin_mesh.html</filename>
    <base>MoveableMesh</base>
    <member kind="function">
      <type>Array</type>
      <name>mesh</name>
      <anchorfile>class_lin_mesh.html</anchorfile>
      <anchor>a32df03597f31685a89293efeeded44ef</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinMesh</name>
      <anchorfile>class_lin_mesh.html</anchorfile>
      <anchor>ada0793657c7575efbdcc1ce8013fe597</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinWavelengthDistribution</name>
    <filename>class_lin_wavelength_distribution.html</filename>
    <base>RangeWavelengthDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_lin_wavelength_distribution.html</anchorfile>
      <anchor>aade72a3c3951f4ac81fae991807e83d7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probability</name>
      <anchorfile>class_lin_wavelength_distribution.html</anchorfile>
      <anchor>aeb0f8b0eed3a9bcfc91fa2babc5304d0</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinWavelengthDistribution</name>
      <anchorfile>class_lin_wavelength_distribution.html</anchorfile>
      <anchor>afcbb24d183885f8cb1e6a3f9b1245a2e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinWavelengthGrid</name>
    <filename>class_lin_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="function">
      <type>double</type>
      <name>maxWavelength</name>
      <anchorfile>class_lin_wavelength_grid.html</anchorfile>
      <anchor>a7425e85c9489e03c1df7cbc1086f18d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWavelength</name>
      <anchorfile>class_lin_wavelength_grid.html</anchorfile>
      <anchor>a326a616e1647956ea48a04e79fd81e8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numWavelengths</name>
      <anchorfile>class_lin_wavelength_grid.html</anchorfile>
      <anchor>ad985c9cc47052ca09da1c98e741a2753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinWavelengthGrid</name>
      <anchorfile>class_lin_wavelength_grid.html</anchorfile>
      <anchor>afb8baa7eec8abea73ee67a4c12163b41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_lin_wavelength_grid.html</anchorfile>
      <anchor>ab8274d996efd5fa86bc47b1d9729b3e7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListBand</name>
    <filename>class_list_band.html</filename>
    <base>TabulatedBand</base>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>transmissionValues</name>
      <anchorfile>class_list_band.html</anchorfile>
      <anchor>a8c18a0e487ec8f2b986829a6f142368d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>wavelengths</name>
      <anchorfile>class_list_band.html</anchorfile>
      <anchor>a89eec758944398b39ca195b94564ec95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ListBand</name>
      <anchorfile>class_list_band.html</anchorfile>
      <anchor>adf157e87237336de44021c0330032bfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getWavelengthsAndTransmissions</name>
      <anchorfile>class_list_band.html</anchorfile>
      <anchor>a049f8c1380f48926f18649449ab85a5b</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;transv) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListBorderWavelengthGrid</name>
    <filename>class_list_border_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="enumeration">
      <type></type>
      <name>Characteristic</name>
      <anchorfile>class_list_border_wavelength_grid.html</anchorfile>
      <anchor>adfdda81743332aea6649e220f722577d</anchor>
      <arglist></arglist>
      <enumvalue file="class_list_border_wavelength_grid.html" anchor="adfdda81743332aea6649e220f722577da32a843da6ea40ab3b17a3421ccdf671b">Linear</enumvalue>
      <enumvalue file="class_list_border_wavelength_grid.html" anchor="adfdda81743332aea6649e220f722577da2f8e38ec1a5832670c5011a71603c929">Logarithmic</enumvalue>
      <enumvalue file="class_list_border_wavelength_grid.html" anchor="adfdda81743332aea6649e220f722577dab4b379bf7ded74c07595ccb85bc6fdc3">Specified</enumvalue>
    </member>
    <member kind="function">
      <type>Characteristic</type>
      <name>characteristic</name>
      <anchorfile>class_list_border_wavelength_grid.html</anchorfile>
      <anchor>a4c174f8a18118d56f17a9760164d9daf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>wavelengths</name>
      <anchorfile>class_list_border_wavelength_grid.html</anchorfile>
      <anchor>ac673fbfd81a50c93295dd38a6edaaef1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ListBorderWavelengthGrid</name>
      <anchorfile>class_list_border_wavelength_grid.html</anchorfile>
      <anchor>a470518a58fd627a11ab94359dccfa0b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_list_border_wavelength_grid.html</anchorfile>
      <anchor>a6fe9a8eb6b605be15f0ea93a5b05bfd8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListGrainSizeDistribution</name>
    <filename>class_list_grain_size_distribution.html</filename>
    <base>GrainSizeDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>amax</name>
      <anchorfile>class_list_grain_size_distribution.html</anchorfile>
      <anchor>afa28a6da104873a7a78acf913b33fda4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>amin</name>
      <anchorfile>class_list_grain_size_distribution.html</anchorfile>
      <anchor>a0b54588ac241e695031634f02b13eaf9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnda</name>
      <anchorfile>class_list_grain_size_distribution.html</anchorfile>
      <anchor>ac20928f59fb5d7c3bf9ecfed6a0d10e5</anchor>
      <arglist>(double a) const override</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>sizeDistributionValues</name>
      <anchorfile>class_list_grain_size_distribution.html</anchorfile>
      <anchor>a2e802f0c80a6f059bb29cf018d515b1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>sizes</name>
      <anchorfile>class_list_grain_size_distribution.html</anchorfile>
      <anchor>af25cf7fa6a85c687bf193ec67cc1b110</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ListGrainSizeDistribution</name>
      <anchorfile>class_list_grain_size_distribution.html</anchorfile>
      <anchor>a7f707f5d761180f92c97ff816ae93fa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_list_grain_size_distribution.html</anchorfile>
      <anchor>a819c3d80630704733da897feefaf6122</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListLineSED</name>
    <filename>class_list_line_s_e_d.html</filename>
    <base>LineSED</base>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>luminosities</name>
      <anchorfile>class_list_line_s_e_d.html</anchorfile>
      <anchor>a3e871045d744d0da74e974b49b268477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>wavelengths</name>
      <anchorfile>class_list_line_s_e_d.html</anchorfile>
      <anchor>a15739f1b63f3f06fc581700ad15a4ffb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ListLineSED</name>
      <anchorfile>class_list_line_s_e_d.html</anchorfile>
      <anchor>a77682be42948a8a26905bbedb7b772d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getWavelengthsAndLuminosities</name>
      <anchorfile>class_list_line_s_e_d.html</anchorfile>
      <anchor>add08f1808351d914217e6fa954d00cd0</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;Lv) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListMesh</name>
    <filename>class_list_mesh.html</filename>
    <base>TabulatedMesh</base>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>points</name>
      <anchorfile>class_list_mesh.html</anchorfile>
      <anchor>a8723d7c2babb82bc4d2f7d070a891c4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ListMesh</name>
      <anchorfile>class_list_mesh.html</anchorfile>
      <anchor>a63a64dc242587c3c7ed5900a4be4c8cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>vector&lt; double &gt;</type>
      <name>getMeshBorderPoints</name>
      <anchorfile>class_list_mesh.html</anchorfile>
      <anchor>a10f86db477a7806ac02eb82af1847bf1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListSED</name>
    <filename>class_list_s_e_d.html</filename>
    <base>TabulatedSED</base>
    <member kind="enumeration">
      <type></type>
      <name>UnitStyle</name>
      <anchorfile>class_list_s_e_d.html</anchorfile>
      <anchor>ae9f750ed4af1c2b5a28d8a37d57346ec</anchor>
      <arglist></arglist>
      <enumvalue file="class_list_s_e_d.html" anchor="ae9f750ed4af1c2b5a28d8a37d57346eca950aec12e25d8d406c5664cf8f5bbaa4">neutralmonluminosity</enumvalue>
      <enumvalue file="class_list_s_e_d.html" anchor="ae9f750ed4af1c2b5a28d8a37d57346eca953f5fed0ab133102d96de07e9cc9554">wavelengthmonluminosity</enumvalue>
      <enumvalue file="class_list_s_e_d.html" anchor="ae9f750ed4af1c2b5a28d8a37d57346ecaa32dc40840f7a5f57956d1fe29dd8b85">frequencymonluminosity</enumvalue>
      <enumvalue file="class_list_s_e_d.html" anchor="ae9f750ed4af1c2b5a28d8a37d57346eca8e94c4281659d40685914cc28fa22fbb">energymonluminosity</enumvalue>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>specificLuminosities</name>
      <anchorfile>class_list_s_e_d.html</anchorfile>
      <anchor>a6a3137224e5465eef810769b4631ca00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UnitStyle</type>
      <name>unitStyle</name>
      <anchorfile>class_list_s_e_d.html</anchorfile>
      <anchor>a20ab057f0c11c1f0b8dd133fcf9c9c13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>wavelengths</name>
      <anchorfile>class_list_s_e_d.html</anchorfile>
      <anchor>a1999bab240bb505249d2530118e2b724</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ListSED</name>
      <anchorfile>class_list_s_e_d.html</anchorfile>
      <anchor>aa27573e7eca487ec68b6c190c3bbd0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getWavelengthsAndLuminosities</name>
      <anchorfile>class_list_s_e_d.html</anchorfile>
      <anchor>abc8bcab7551950c5a9a3e1fcd0c9b874</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListWavelengthDistribution</name>
    <filename>class_list_wavelength_distribution.html</filename>
    <base>TabulatedWavelengthDistribution</base>
    <member kind="enumeration">
      <type></type>
      <name>UnitStyle</name>
      <anchorfile>class_list_wavelength_distribution.html</anchorfile>
      <anchor>aa2a93d74b0bc59b88c1201c63f52f992</anchor>
      <arglist></arglist>
      <enumvalue file="class_list_wavelength_distribution.html" anchor="aa2a93d74b0bc59b88c1201c63f52f992a950aec12e25d8d406c5664cf8f5bbaa4">neutralmonluminosity</enumvalue>
      <enumvalue file="class_list_wavelength_distribution.html" anchor="aa2a93d74b0bc59b88c1201c63f52f992a953f5fed0ab133102d96de07e9cc9554">wavelengthmonluminosity</enumvalue>
      <enumvalue file="class_list_wavelength_distribution.html" anchor="aa2a93d74b0bc59b88c1201c63f52f992aa32dc40840f7a5f57956d1fe29dd8b85">frequencymonluminosity</enumvalue>
      <enumvalue file="class_list_wavelength_distribution.html" anchor="aa2a93d74b0bc59b88c1201c63f52f992a8e94c4281659d40685914cc28fa22fbb">energymonluminosity</enumvalue>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>probabilities</name>
      <anchorfile>class_list_wavelength_distribution.html</anchorfile>
      <anchor>a2b06bd0e60822f97fcdd95b2e02cf256</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UnitStyle</type>
      <name>unitStyle</name>
      <anchorfile>class_list_wavelength_distribution.html</anchorfile>
      <anchor>ae79a182daa2c1028073043d5dcba83ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>wavelengths</name>
      <anchorfile>class_list_wavelength_distribution.html</anchorfile>
      <anchor>a705dc2e1225db5981a75029faa84258f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ListWavelengthDistribution</name>
      <anchorfile>class_list_wavelength_distribution.html</anchorfile>
      <anchor>a8e449cb201dded394051a436a1eeb511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getWavelengthsAndProbabilities</name>
      <anchorfile>class_list_wavelength_distribution.html</anchorfile>
      <anchor>a71ff44cf4076fc35f3e1e91d037793c9</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListWavelengthGrid</name>
    <filename>class_list_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="function">
      <type>bool</type>
      <name>log</name>
      <anchorfile>class_list_wavelength_grid.html</anchorfile>
      <anchor>ad109c1028e90197ec70eb01c0a324409</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>relativeHalfWidth</name>
      <anchorfile>class_list_wavelength_grid.html</anchorfile>
      <anchor>ad09d6803080b2d6f1bbc48ab9d3fc720</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>wavelengths</name>
      <anchorfile>class_list_wavelength_grid.html</anchorfile>
      <anchor>a15b32d8d013501b4ac35f933add64d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ListWavelengthGrid</name>
      <anchorfile>class_list_wavelength_grid.html</anchorfile>
      <anchor>ad492a66546d79a81e7208dd49e370c0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_list_wavelength_grid.html</anchorfile>
      <anchor>a99e3155965477a494fac889ed03c7799</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalUniverseCosmology</name>
    <filename>class_local_universe_cosmology.html</filename>
    <base>Cosmology</base>
    <member kind="function">
      <type>double</type>
      <name>angularDiameterDistance</name>
      <anchorfile>class_local_universe_cosmology.html</anchorfile>
      <anchor>af8e550e2ebe4a56c3fc69582d6755c72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>luminosityDistance</name>
      <anchorfile>class_local_universe_cosmology.html</anchorfile>
      <anchor>ac47a2558f997360374f7e890c993f2f1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>modelRedshift</name>
      <anchorfile>class_local_universe_cosmology.html</anchorfile>
      <anchor>a55a33612a94992fabbf9e323b153ace4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>relativeExpansionRate</name>
      <anchorfile>class_local_universe_cosmology.html</anchorfile>
      <anchor>a2982acc2a49e0727940be14fc6127e09</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalUniverseCosmology</name>
      <anchorfile>class_local_universe_cosmology.html</anchorfile>
      <anchor>ad8709d3a2f9aac9af25f9099b8055a70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Log</name>
    <filename>class_log.html</filename>
    <base>SimulationItem</base>
    <member kind="enumeration">
      <type></type>
      <name>Level</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>afb5d4c945d835d194a295461d752531e</anchor>
      <arglist></arglist>
      <enumvalue file="class_log.html" anchor="afb5d4c945d835d194a295461d752531ea4059b0251f66a18cb56f544728796875">Info</enumvalue>
      <enumvalue file="class_log.html" anchor="afb5d4c945d835d194a295461d752531ea0eaadb4fcb48a0a0ed7bc9868be9fbaa">Warning</enumvalue>
      <enumvalue file="class_log.html" anchor="afb5d4c945d835d194a295461d752531ea505a83f220c02df2f85c3810cd9ceb38">Success</enumvalue>
      <enumvalue file="class_log.html" anchor="afb5d4c945d835d194a295461d752531ea902b0d55fddef6f8d651fe1035b7d4bd">Error</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>a6558670271950f19bd84cbed287e85bf</anchor>
      <arglist>(string message, bool store=true)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>errorsIssued</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>a825dcfb15ac8a7b52193930a950bc95f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>info</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>a5be14ccda57934333bdfc50d74b30ba4</anchor>
      <arglist>(string message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>infoIfElapsed</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>aa6301d6208374ed1385f7f63d2e0e73d</anchor>
      <arglist>(string message, size_t numDone)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>infoSetElapsed</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>af0dd77a9dfeae845eafd1f79345fc607</anchor>
      <arglist>(size_t numTotal, int seconds=5)</arglist>
    </member>
    <member kind="function">
      <type>Log *</type>
      <name>linkedLog</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>a69e40f73d194c2cd01b0d1b19b93b99d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>lowestLevel</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>a507a08df3c77961eae5d548aee64715b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>memoryLogging</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>af47fae5f6216ae9b21f2386336419e92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinkedLog</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>ad3ec3fa48105fb186af8eed7707d8e11</anchor>
      <arglist>(Log *log)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowestLevel</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>abddf841622deb9d7c68e3d7d33c641b2</anchor>
      <arglist>(Level level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMemoryLogging</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>a3ade483de7e18592a5bd9440a30b3135</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbose</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>a7eb818c2b5094ebe0549b7d28a0e4582</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>success</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>a2624d719e395e105b32f75584345ace2</anchor>
      <arglist>(string message)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>addb391cf1065a356459630f994dba70e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warning</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>aa405806a74a878c019d0c09ced1cf2fc</anchor>
      <arglist>(string message, bool store=true)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>warningsIssued</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>a3e73ffc47b06af375b3b508fcbbaedd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Log</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>af6071a60aa52b6c1b511f99b4bc1b8fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>output</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>aa956e08e2f1656659ec3d6b44426e610</anchor>
      <arglist>(string message, Level level)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>processName</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>ab4c3514ce6bd7ed5d26dbdc76859c4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>a0cf771b25f1f2ccf16436660f3ffee18</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setRank</name>
      <anchorfile>class_log.html</anchorfile>
      <anchor>a6bd3a427abf01f5af2f2ea22689de3ad</anchor>
      <arglist>(int rank)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LogBorderWavelengthGrid</name>
    <filename>class_log_border_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="function">
      <type>double</type>
      <name>maxWavelength</name>
      <anchorfile>class_log_border_wavelength_grid.html</anchorfile>
      <anchor>a3b2dc06e38528147892031dc1a7f022d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWavelength</name>
      <anchorfile>class_log_border_wavelength_grid.html</anchorfile>
      <anchor>ae1097bb705217450b01eecce6eadfa62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numWavelengthBins</name>
      <anchorfile>class_log_border_wavelength_grid.html</anchorfile>
      <anchor>a09d7cf469efaefa327c3cd0b9344fde6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LogBorderWavelengthGrid</name>
      <anchorfile>class_log_border_wavelength_grid.html</anchorfile>
      <anchor>aa13bc8565084719a8d7a2849369c07aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_log_border_wavelength_grid.html</anchorfile>
      <anchor>a9a47e0662d54dcf4516db1fb3dea02f3</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LogMesh</name>
    <filename>class_log_mesh.html</filename>
    <base>AnchoredMesh</base>
    <member kind="function">
      <type>double</type>
      <name>centralBinFraction</name>
      <anchorfile>class_log_mesh.html</anchorfile>
      <anchor>a99933929b0b71803c2c1abded13221c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>mesh</name>
      <anchorfile>class_log_mesh.html</anchorfile>
      <anchor>a9b572addee7691bcd64e6eaa43d3fce0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LogMesh</name>
      <anchorfile>class_log_mesh.html</anchorfile>
      <anchor>aa98922516fff9ee4b4266790662cf19c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LogNormalGrainSizeDistribution</name>
    <filename>class_log_normal_grain_size_distribution.html</filename>
    <base>RangeGrainSizeDistribution</base>
    <member kind="function">
      <type></type>
      <name>LogNormalGrainSizeDistribution</name>
      <anchorfile>class_log_normal_grain_size_distribution.html</anchorfile>
      <anchor>a538c6e4f59ae7a4a7e6b898b1bf1e1f2</anchor>
      <arglist>(SimulationItem *parent, double minSize, double maxSize, double centroid, double width)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>centroid</name>
      <anchorfile>class_log_normal_grain_size_distribution.html</anchorfile>
      <anchor>a0f22b668c17482d1d8141844a8eaeb96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnda</name>
      <anchorfile>class_log_normal_grain_size_distribution.html</anchorfile>
      <anchor>aa6499823d588c9b8bde25b2a087cf81e</anchor>
      <arglist>(double a) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>width</name>
      <anchorfile>class_log_normal_grain_size_distribution.html</anchorfile>
      <anchor>aa17037ffa6a6cf3dc59224504762c2f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LogNormalGrainSizeDistribution</name>
      <anchorfile>class_log_normal_grain_size_distribution.html</anchorfile>
      <anchor>ac5cbe0b60fdc6f4f6c61b62d1a3c5ee8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LogWavelengthDistribution</name>
    <filename>class_log_wavelength_distribution.html</filename>
    <base>RangeWavelengthDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_log_wavelength_distribution.html</anchorfile>
      <anchor>ad23bc8cf84c5402b33edca9fcbed34f2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probability</name>
      <anchorfile>class_log_wavelength_distribution.html</anchorfile>
      <anchor>a8c1af7802be90e5515f42c70930696e2</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LogWavelengthDistribution</name>
      <anchorfile>class_log_wavelength_distribution.html</anchorfile>
      <anchor>ab6f52f847abd86ca4ef95933a6284875</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_log_wavelength_distribution.html</anchorfile>
      <anchor>a8d9c35a73887a07be7c42df6b2af1bce</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LogWavelengthGrid</name>
    <filename>class_log_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="function">
      <type>double</type>
      <name>maxWavelength</name>
      <anchorfile>class_log_wavelength_grid.html</anchorfile>
      <anchor>a1cd1e45deaef411c8af77bec44a1cc51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWavelength</name>
      <anchorfile>class_log_wavelength_grid.html</anchorfile>
      <anchor>aacd9218b7cd52b1077559b653f440418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numWavelengths</name>
      <anchorfile>class_log_wavelength_grid.html</anchorfile>
      <anchor>aa54b34e37ef434d14407e62fb922350c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LogWavelengthGrid</name>
      <anchorfile>class_log_wavelength_grid.html</anchorfile>
      <anchor>abdd9d374b3d7ec1387ab623578433cdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_log_wavelength_grid.html</anchorfile>
      <anchor>a34e7356556e7ea89afe65c190f34cde4</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LuminosityNormalization</name>
    <filename>class_luminosity_normalization.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>luminosityForSED</name>
      <anchorfile>class_luminosity_normalization.html</anchorfile>
      <anchor>ab29cad91dece1302d88a7a008f8ccc26</anchor>
      <arglist>(SED *sed) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LuminosityNormalization</name>
      <anchorfile>class_luminosity_normalization.html</anchorfile>
      <anchor>a579a0a9fd8cf2b0c94fd22d850ba1d42</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LuminosityProbe</name>
    <filename>class_luminosity_probe.html</filename>
    <base>SpecialtyWavelengthGridProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>LuminosityProbe</name>
      <anchorfile>class_luminosity_probe.html</anchorfile>
      <anchor>a26aa3ebbbd474552b80cb6170a7254b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_luminosity_probe.html</anchorfile>
      <anchor>aceb34caa3a05df3ac55d325286966662</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LyaDoublePeakedSED</name>
    <filename>class_lya_double_peaked_s_e_d.html</filename>
    <base>ContSED</base>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_lya_double_peaked_s_e_d.html</anchorfile>
      <anchor>af43252ee7e1e5c3ac112afd364c95bcd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>integratedLuminosity</name>
      <anchorfile>class_lya_double_peaked_s_e_d.html</anchorfile>
      <anchor>a15c015840de6514e944eb004b29be0b3</anchor>
      <arglist>(const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_lya_double_peaked_s_e_d.html</anchorfile>
      <anchor>a56b24c4c9480d8dc7d80e8b31ef8d292</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scale</name>
      <anchorfile>class_lya_double_peaked_s_e_d.html</anchorfile>
      <anchor>ab8c30470fe30f3451f50629b04d99eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_lya_double_peaked_s_e_d.html</anchorfile>
      <anchor>a19fd50325a8fc4e6db7ae7aab620d4f0</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>specificLuminosityArray</name>
      <anchorfile>class_lya_double_peaked_s_e_d.html</anchorfile>
      <anchor>ac00428bdf5c55a023f689df88273b726</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LyaDoublePeakedSED</name>
      <anchorfile>class_lya_double_peaked_s_e_d.html</anchorfile>
      <anchor>afed07e3e41c8b7e1e702e2d88ad8dcb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_lya_double_peaked_s_e_d.html</anchorfile>
      <anchor>ac86659dbea6ffbccfbbaae2bd7782129</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LyaDoublePeakedSEDFamily</name>
    <filename>class_lya_double_peaked_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_lya_double_peaked_s_e_d_family.html</anchorfile>
      <anchor>ac80cfcd34dcc94f8515ef4167425ff89</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_lya_double_peaked_s_e_d_family.html</anchorfile>
      <anchor>a156865860700a2fd24dd7ad42e210e4b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_lya_double_peaked_s_e_d_family.html</anchorfile>
      <anchor>a0466a2acb8078fb9e4d89d1d8d087682</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_lya_double_peaked_s_e_d_family.html</anchorfile>
      <anchor>a276e4c213baf8ddfde05c11588da3781</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LyaDoublePeakedSEDFamily</name>
      <anchorfile>class_lya_double_peaked_s_e_d_family.html</anchorfile>
      <anchor>a1171a78f281c764661e5d7e513ca6857</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LyaGaussianSED</name>
    <filename>class_lya_gaussian_s_e_d.html</filename>
    <base>ContSED</base>
    <member kind="function">
      <type>double</type>
      <name>dispersion</name>
      <anchorfile>class_lya_gaussian_s_e_d.html</anchorfile>
      <anchor>a3d8bc61ae0a6f32c683ab0edab171c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_lya_gaussian_s_e_d.html</anchorfile>
      <anchor>ad2777cbe61612faddfef558116e76f1f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>integratedLuminosity</name>
      <anchorfile>class_lya_gaussian_s_e_d.html</anchorfile>
      <anchor>a7fac54de1791e73575a8554f7d66e9a9</anchor>
      <arglist>(const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_lya_gaussian_s_e_d.html</anchorfile>
      <anchor>a3f0b27570650ce57420efd4b8ba02f99</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_lya_gaussian_s_e_d.html</anchorfile>
      <anchor>a9a6382870591642a88e82ffa4e444195</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>specificLuminosityArray</name>
      <anchorfile>class_lya_gaussian_s_e_d.html</anchorfile>
      <anchor>ad0ad83d3118c540794f3e13713b5480d</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LyaGaussianSED</name>
      <anchorfile>class_lya_gaussian_s_e_d.html</anchorfile>
      <anchor>a29130dd2975d08dbcbf500a5dbab32ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_lya_gaussian_s_e_d.html</anchorfile>
      <anchor>a7fb486c9d681655f95b4b6b5707afc3c</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LyaGaussianSEDFamily</name>
    <filename>class_lya_gaussian_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_lya_gaussian_s_e_d_family.html</anchorfile>
      <anchor>a93b6305bc03df9aef9c472bd059437e8</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_lya_gaussian_s_e_d_family.html</anchorfile>
      <anchor>a28de460c30a7af142f787cd170245bd8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_lya_gaussian_s_e_d_family.html</anchorfile>
      <anchor>aa80e92ac3315a85ddd73dbca444b3a6f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_lya_gaussian_s_e_d_family.html</anchorfile>
      <anchor>a5324473c3ee24b1f31bfcc75f0d6b154</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LyaGaussianSEDFamily</name>
      <anchorfile>class_lya_gaussian_s_e_d_family.html</anchorfile>
      <anchor>a5bab1315537b0f02ef7c504813c534fd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LyaNeutralHydrogenGasMix</name>
    <filename>class_lya_neutral_hydrogen_gas_mix.html</filename>
    <base>MaterialMix</base>
    <member kind="function">
      <type>double</type>
      <name>defaultTemperature</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>abc765a4b758da27dbba53b209310da5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasExtraSpecificState</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a97054a6b3f1c751e964054b5f0e941f8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPolarizedScattering</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a1cabffe956529fc971b19d85ac9582f4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasResonantScattering</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a16e463b93d01b71ceee8fd1a6a6308d8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScatteringDispersion</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a709ec26997364bd67b0a7b345791a349</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includePolarization</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a43482f714ab7810cc10b8efb418f496e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeTemperature</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a46a58329e2c4f6d272a66e0d4df54e06</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSpecificState</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a4e6a25d860172582e8a439a2f6d50d5c</anchor>
      <arglist>(MaterialState *state, double metallicity, double temperature, const Array &amp;params) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>af3cb3408909dced142ec1458e72fa9ae</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>MaterialType</type>
      <name>materialType</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>aec301be5dd9d6cf4f845f62f6f9785c0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityAbs</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a6a773d99cf06eef749eec4cec201746c</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>ad0ace1cf45a2b45cf330ff6fcce84eab</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacitySca</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>ac36767a6d1761843f0cf68b363b5bc84</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peeloffScattering</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a533a145489db4c077f8cd9736b2a2f17</anchor>
      <arglist>(double &amp;I, double &amp;Q, double &amp;U, double &amp;V, double &amp;lambda, Direction bfkobs, Direction bfky, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performScattering</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a700416c4376ad8f25b5f13481a96a677</anchor>
      <arglist>(double lambda, const MaterialState *state, PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionAbs</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a5d4f46e478c436b6ec1d2ca94b59d6f2</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionExt</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>ac8d88d96505ee57dae261659a353247e</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionSca</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a18bf24944c6a5934cd01eb8d1e27999f</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; StateVariable &gt;</type>
      <name>specificStateVariableInfo</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>ab89f35145c2973e0a56f9dcaa61d0836</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LyaNeutralHydrogenGasMix</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>ac1401f25b04b01ae51e701ca990a3873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_lya_neutral_hydrogen_gas_mix.html</anchorfile>
      <anchor>a38fca4a83d9e1a789bff9a8868281e4d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LyaOptions</name>
    <filename>class_lya_options.html</filename>
    <base>SimulationItem</base>
    <member kind="enumeration">
      <type></type>
      <name>LyaAccelerationScheme</name>
      <anchorfile>class_lya_options.html</anchorfile>
      <anchor>a8a94dd6c24a530cf8b53a88a792f4db3</anchor>
      <arglist></arglist>
      <enumvalue file="class_lya_options.html" anchor="a8a94dd6c24a530cf8b53a88a792f4db3a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="class_lya_options.html" anchor="a8a94dd6c24a530cf8b53a88a792f4db3acb17869fe51048b5a5c4c6106551a255">Constant</enumvalue>
      <enumvalue file="class_lya_options.html" anchor="a8a94dd6c24a530cf8b53a88a792f4db3a47c14840d8e15331fa420b9b2f757cd9">Variable</enumvalue>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includeHubbleFlow</name>
      <anchorfile>class_lya_options.html</anchorfile>
      <anchor>a4828c1365886a6ba3b4d668231511a6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LyaAccelerationScheme</type>
      <name>lyaAccelerationScheme</name>
      <anchorfile>class_lya_options.html</anchorfile>
      <anchor>af62cf0a0964e0f4ba691d480d3ba73d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lyaAccelerationStrength</name>
      <anchorfile>class_lya_options.html</anchorfile>
      <anchor>ad8d30c68027ad03eb494e1770eeae14c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LyaOptions</name>
      <anchorfile>class_lya_options.html</anchorfile>
      <anchor>a27c71b7bda646bc70b7469c054a514e3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LyaSEDDecorator</name>
    <filename>class_lya_s_e_d_decorator.html</filename>
    <base>ContSED</base>
    <member kind="function">
      <type>double</type>
      <name>conversionFraction</name>
      <anchorfile>class_lya_s_e_d_decorator.html</anchorfile>
      <anchor>a6a92e7beb7cfa3433c642cd320499612</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_lya_s_e_d_decorator.html</anchorfile>
      <anchor>a61512bb2e8d4ed628c187522697f3a95</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>integratedLuminosity</name>
      <anchorfile>class_lya_s_e_d_decorator.html</anchorfile>
      <anchor>a7e34602dc43ba2f8471c05743282f36a</anchor>
      <arglist>(const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_lya_s_e_d_decorator.html</anchorfile>
      <anchor>a4f1d0d9104be8c6138702134ae5affd5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ContSED *</type>
      <name>sedLymanAlpha</name>
      <anchorfile>class_lya_s_e_d_decorator.html</anchorfile>
      <anchor>a3aa7103bdcc2cfe1c9c4ee5e1ce12fc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ContSED *</type>
      <name>sedOriginal</name>
      <anchorfile>class_lya_s_e_d_decorator.html</anchorfile>
      <anchor>a0e7443d710a08a1360fa007bcb91bd0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_lya_s_e_d_decorator.html</anchorfile>
      <anchor>a9917c63a569b5c57b16026e2cbdb7a94</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>specificLuminosityArray</name>
      <anchorfile>class_lya_s_e_d_decorator.html</anchorfile>
      <anchor>a7ffab8e0542d17e03b1994443a83c3de</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LyaSEDDecorator</name>
      <anchorfile>class_lya_s_e_d_decorator.html</anchorfile>
      <anchor>aa28fad515d43cc19fcc78d79ab6da6df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_lya_s_e_d_decorator.html</anchorfile>
      <anchor>a32776e72f294e7d58f9a3dca4af2a354</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LyaSEDFamilyDecorator</name>
    <filename>class_lya_s_e_d_family_decorator.html</filename>
    <base>SEDFamily</base>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_lya_s_e_d_family_decorator.html</anchorfile>
      <anchor>ab85d412d4fe323ba99d00153e3d53c95</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>conversionFraction</name>
      <anchorfile>class_lya_s_e_d_family_decorator.html</anchorfile>
      <anchor>ab60011cf2543a83bd1966c3cfe09214a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_lya_s_e_d_family_decorator.html</anchorfile>
      <anchor>a28c98253a4700c686e171f8cac854cd2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_lya_s_e_d_family_decorator.html</anchorfile>
      <anchor>a16ac7d994219f7cae41839d43193a98a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>SEDFamily *</type>
      <name>sedFamilyOriginal</name>
      <anchorfile>class_lya_s_e_d_family_decorator.html</anchorfile>
      <anchor>a9bec214f026929e4b29a62862e6fef1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ContSED *</type>
      <name>sedLymanAlpha</name>
      <anchorfile>class_lya_s_e_d_family_decorator.html</anchorfile>
      <anchor>a809275b092ef44008069cf76cc70af17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_lya_s_e_d_family_decorator.html</anchorfile>
      <anchor>a6b3d7f8daadfeaf8ef22eb4a37daa97c</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LyaSEDFamilyDecorator</name>
      <anchorfile>class_lya_s_e_d_family_decorator.html</anchorfile>
      <anchor>ab1efb3a296f66324901df5870d6f800d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_lya_s_e_d_family_decorator.html</anchorfile>
      <anchor>a2b58002ddb742f4a6554ef6ac27b760e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MagneticFieldProbe</name>
    <filename>class_magnetic_field_probe.html</filename>
    <base>SpatialGridFormProbe</base>
    <member kind="function">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_magnetic_field_probe.html</anchorfile>
      <anchor>a433254e39a48282a520d00cbdbfc4bf9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MagneticFieldProbe</name>
      <anchorfile>class_magnetic_field_probe.html</anchorfile>
      <anchor>a963ba8ef3245da53d74f73aa1d8927e9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MainWindow</name>
    <filename>class_main_window.html</filename>
    <member kind="slot">
      <type>void</type>
      <name>browseUrl</name>
      <anchorfile>class_main_window.html</anchorfile>
      <anchor>a6333f7a77b675ce8b55f78dede1c5f90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>replaceWizardPane</name>
      <anchorfile>class_main_window.html</anchorfile>
      <anchor>a20ed12120ca4025729547ade061ce476</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>updateDirtyState</name>
      <anchorfile>class_main_window.html</anchorfile>
      <anchor>acdb019417e0495fcc922ad2d1bf83eec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>updateTitle</name>
      <anchorfile>class_main_window.html</anchorfile>
      <anchor>ac62839f0a6f642f68f06729f351893e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MainWindow</name>
      <anchorfile>class_main_window.html</anchorfile>
      <anchor>a34c4b4207b46d11a4100c9b19f0e81bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>closeEvent</name>
      <anchorfile>class_main_window.html</anchorfile>
      <anchor>a05fb9d72c044aa3bb7d187b994704e2f</anchor>
      <arglist>(QCloseEvent *event) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>contextMenuEvent</name>
      <anchorfile>class_main_window.html</anchorfile>
      <anchor>a9fdfec5708365ddc98b17e431398841f</anchor>
      <arglist>(QContextMenuEvent *event) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>keyPressEvent</name>
      <anchorfile>class_main_window.html</anchorfile>
      <anchor>a55ae3e0d4303334ccabae0a5050cfd88</anchor>
      <arglist>(QKeyEvent *event) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>readSettings</name>
      <anchorfile>class_main_window.html</anchorfile>
      <anchor>a06476208b8466211f3bb0fcae787052b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeSettings</name>
      <anchorfile>class_main_window.html</anchorfile>
      <anchor>a49be45fc9b993fdc3afe55d4b6fa0650</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappingsSED</name>
    <filename>class_mappings_s_e_d.html</filename>
    <base>FamilySED</base>
    <member kind="function">
      <type>double</type>
      <name>compactness</name>
      <anchorfile>class_mappings_s_e_d.html</anchorfile>
      <anchor>a60617eddaa2b85764b85329e19a972b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>coveringFactor</name>
      <anchorfile>class_mappings_s_e_d.html</anchorfile>
      <anchor>aaeb9d619e6ee498d58d025a9fb6d8ac9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_mappings_s_e_d.html</anchorfile>
      <anchor>a34bcd12cf194427cad303cccde3288ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pressure</name>
      <anchorfile>class_mappings_s_e_d.html</anchorfile>
      <anchor>a224efe28bc20e042062f90b300081058</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MappingsSED</name>
      <anchorfile>class_mappings_s_e_d.html</anchorfile>
      <anchor>a97488be219efa3a67903ea116858591d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SEDFamily *</type>
      <name>getFamilyAndParameters</name>
      <anchorfile>class_mappings_s_e_d.html</anchorfile>
      <anchor>aa63bd954ce852bcde4b7920f1dd55219</anchor>
      <arglist>(Array &amp;parameters) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappingsSEDFamily</name>
    <filename>class_mappings_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="function">
      <type></type>
      <name>MappingsSEDFamily</name>
      <anchorfile>class_mappings_s_e_d_family.html</anchorfile>
      <anchor>a4d8a023e18ac742b25f5a1cd11b99ca0</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_mappings_s_e_d_family.html</anchorfile>
      <anchor>aabd2bb5f205ec1a94059b8beee62549a</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_mappings_s_e_d_family.html</anchorfile>
      <anchor>ab8e555bafd08d7a345414af4f801caf9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_mappings_s_e_d_family.html</anchorfile>
      <anchor>a635ce83aa1f8d4cff7b30d5ba19fd705</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_mappings_s_e_d_family.html</anchorfile>
      <anchor>a7380b8ca24a939c82e8d42e5af67bddc</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MappingsSEDFamily</name>
      <anchorfile>class_mappings_s_e_d_family.html</anchorfile>
      <anchor>a647909d7d780068e93a0323623eab702</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_mappings_s_e_d_family.html</anchorfile>
      <anchor>a69ebf3459d2fe5df8a9ddd077eb93857</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MarastonSED</name>
    <filename>class_maraston_s_e_d.html</filename>
    <base>FamilySED</base>
    <member kind="enumeration">
      <type></type>
      <name>IMF</name>
      <anchorfile>class_maraston_s_e_d.html</anchorfile>
      <anchor>a5a0450a5e9b125cd41bb331411614979</anchor>
      <arglist></arglist>
      <enumvalue file="class_maraston_s_e_d.html" anchor="a5a0450a5e9b125cd41bb331411614979a8f7e038ea09140070ee5bdb1b233d03c">Kroupa</enumvalue>
      <enumvalue file="class_maraston_s_e_d.html" anchor="a5a0450a5e9b125cd41bb331411614979a8c174efbbe276c19f308ca1f4519d14b">Salpeter</enumvalue>
    </member>
    <member kind="function">
      <type>double</type>
      <name>age</name>
      <anchorfile>class_maraston_s_e_d.html</anchorfile>
      <anchor>afd0f2c8d910968404cbd92eab7cfa0a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IMF</type>
      <name>imf</name>
      <anchorfile>class_maraston_s_e_d.html</anchorfile>
      <anchor>a1f6105af2c803058234796df59fb4057</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_maraston_s_e_d.html</anchorfile>
      <anchor>af7f5162f8cbf9d42b80e0b433e5ba376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MarastonSED</name>
      <anchorfile>class_maraston_s_e_d.html</anchorfile>
      <anchor>a49dcb6c0d0c82095efe73d89a4088573</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SEDFamily *</type>
      <name>getFamilyAndParameters</name>
      <anchorfile>class_maraston_s_e_d.html</anchorfile>
      <anchor>a45d3944b44669c7c0825979453c51d2b</anchor>
      <arglist>(Array &amp;parameters) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MarastonSEDFamily</name>
    <filename>class_maraston_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="enumeration">
      <type></type>
      <name>IMF</name>
      <anchorfile>class_maraston_s_e_d_family.html</anchorfile>
      <anchor>a274c51b18a3885b900937370813c855f</anchor>
      <arglist></arglist>
      <enumvalue file="class_maraston_s_e_d_family.html" anchor="a274c51b18a3885b900937370813c855fa8f7e038ea09140070ee5bdb1b233d03c">Kroupa</enumvalue>
      <enumvalue file="class_maraston_s_e_d_family.html" anchor="a274c51b18a3885b900937370813c855fa8c174efbbe276c19f308ca1f4519d14b">Salpeter</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>MarastonSEDFamily</name>
      <anchorfile>class_maraston_s_e_d_family.html</anchorfile>
      <anchor>acfc1a1428ac930f73dd9f9b815769a4f</anchor>
      <arglist>(SimulationItem *parent, IMF imf)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_maraston_s_e_d_family.html</anchorfile>
      <anchor>ac42bce3855a7e15460c0b0c8e6906b6b</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>IMF</type>
      <name>imf</name>
      <anchorfile>class_maraston_s_e_d_family.html</anchorfile>
      <anchor>a2ed9dd0e9ddbf99c08cc0e0eb0582b45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_maraston_s_e_d_family.html</anchorfile>
      <anchor>aac22fc04637ef7689547ed69546e3fc7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_maraston_s_e_d_family.html</anchorfile>
      <anchor>a8482de4e78ab053771d17432ab2b8958</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_maraston_s_e_d_family.html</anchorfile>
      <anchor>ad1479c6340da5fdc19648e333e3e641e</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MarastonSEDFamily</name>
      <anchorfile>class_maraston_s_e_d_family.html</anchorfile>
      <anchor>ac7532a67e7c60e68ce703e766657b58e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_maraston_s_e_d_family.html</anchorfile>
      <anchor>a9c83ede63a1973fe21fb24b18c895c0b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MassColumnMaterialNormalization</name>
    <filename>class_mass_column_material_normalization.html</filename>
    <base>AxisMaterialNormalization</base>
    <member kind="function">
      <type>double</type>
      <name>massColumnDensity</name>
      <anchorfile>class_mass_column_material_normalization.html</anchorfile>
      <anchor>a8a9aeef66ab2198539001db12b08823d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>numberAndMass</name>
      <anchorfile>class_mass_column_material_normalization.html</anchorfile>
      <anchor>a3e1cb82399948c878d9e06ef73c6972c</anchor>
      <arglist>(const Geometry *geom, const MaterialMix *mix) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MassColumnMaterialNormalization</name>
      <anchorfile>class_mass_column_material_normalization.html</anchorfile>
      <anchor>afa2a5e1660935bbcd8258a13cb8e7083</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MassMaterialNormalization</name>
    <filename>class_mass_material_normalization.html</filename>
    <base>MaterialNormalization</base>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_mass_material_normalization.html</anchorfile>
      <anchor>a8d5e7edba3d3fa70e70ea4d726602171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>numberAndMass</name>
      <anchorfile>class_mass_material_normalization.html</anchorfile>
      <anchor>a445df0c3a901c176682a95c5922db5f5</anchor>
      <arglist>(const Geometry *geom, const MaterialMix *mix) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MassMaterialNormalization</name>
      <anchorfile>class_mass_material_normalization.html</anchorfile>
      <anchor>a3650e67560d18bb18ad88390cc851951</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaterialMix</name>
    <filename>class_material_mix.html</filename>
    <base>SimulationItem</base>
    <member kind="enumeration">
      <type></type>
      <name>DynamicStateType</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>ad23dd16a750a70de4956d422df9deb22</anchor>
      <arglist></arglist>
      <enumvalue file="class_material_mix.html" anchor="ad23dd16a750a70de4956d422df9deb22a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="class_material_mix.html" anchor="ad23dd16a750a70de4956d422df9deb22a074de7e7c226d5c60f8af14c20725352">Primary</enumvalue>
      <enumvalue file="class_material_mix.html" anchor="ad23dd16a750a70de4956d422df9deb22a0c7d6cf19426e01dcfa32434828ed266">Secondary</enumvalue>
      <enumvalue file="class_material_mix.html" anchor="ad23dd16a750a70de4956d422df9deb22a9eccacb0684dcc8f63982b05b118589e">PrimaryIfMergedIterations</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MaterialType</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a3fb72cc2c254c54423f3295d06f933dc</anchor>
      <arglist></arglist>
      <enumvalue file="class_material_mix.html" anchor="a3fb72cc2c254c54423f3295d06f933dcade3493ea6e7cb1529c9922e9e501faf8">Dust</enumvalue>
      <enumvalue file="class_material_mix.html" anchor="a3fb72cc2c254c54423f3295d06f933dca57ab6d58813013506ab9c629036e7ff0">Electrons</enumvalue>
      <enumvalue file="class_material_mix.html" anchor="a3fb72cc2c254c54423f3295d06f933dca635459702f9817de29e608fa3395637c">Gas</enumvalue>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>asymmpar</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a7056427d4398f4446b70b9ec15cca061</anchor>
      <arglist>(double lambda) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array</type>
      <name>emissionSpectrum</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>af79a90ff90aab2da6813848482153b9c</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DisjointWavelengthGrid *</type>
      <name>emissionWavelengthGrid</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a9ea9d56c5c86496d26c19c8da356c52e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array</type>
      <name>emissivity</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>aec1eb954313870dffbc9d2ca7a96e689</anchor>
      <arglist>(const Array &amp;Jv) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasContinuumEmission</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a586ccd5c17e32d96cfaf5e44128b56c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DynamicStateType</type>
      <name>hasDynamicMediumState</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>aaa714063df31aea21259d3468152e998</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasExtraSpecificState</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>aa19e3aaa78b871f14697cfd81c5c3639</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasLineEmission</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a008113630172708e36173254a838de02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNegativeExtinction</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a8f2e29cc2c06f3797344dc27002811ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPolarizedAbsorption</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>ae8f3ade4a93f3825d28aadb68c8a5ec7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPolarizedEmission</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a96d89a9d37a99ada095bdd92195dd9cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPolarizedScattering</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>abb3e7bb0e69f630a122cbf9808e6153f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasResonantScattering</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>afeaa711c889a08078e7cf324b50aec66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasScatteringDispersion</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>ae87ae56d368d52fcf8aca3a770c662e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStochasticDustEmission</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a165ac0f78f0843c3b2a45ee8b0d39dd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>indicativeTemperature</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a1beed6f48e434b03eb5a1a28c74916a3</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeSpecificState</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a0d2c8348864ead08054ed9a50eef5ca7</anchor>
      <arglist>(MaterialState *state, double metallicity, double temperature, const Array &amp;params) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDust</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a666970e61709f68451027c7e704d99a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isElectrons</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>afae7f52e5a2c924fe1476bdfe8e773be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGas</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>af4b8ab8785385eac5ef480f604536a94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSpecificStateConverged</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a68eb047a2a539f4ceb08ca904d486c37</anchor>
      <arglist>(int numCells, int numUpdated, int numNotConverged) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array</type>
      <name>lineEmissionCenters</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a20fddea0f3be3d3d185c1dce3b299b21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array</type>
      <name>lineEmissionMasses</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a22e050d67b19ae85c8090ac093671187</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array</type>
      <name>lineEmissionSpectrum</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a0283f7fa5f94d6a7cd40c36f94899753</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>mass</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>acb46458b005a129896a5c0dce9a9b08a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MaterialType</type>
      <name>materialType</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a55d96e0dde8799ecf1b5165d340ee561</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>opacityAbs</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a0ae72fc6e9434a1e02a46956087b896a</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>opacityExt</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>aa969b1516fa6e09b2b57fd698020e24a</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>opacitySca</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a28509f2a03054d7be275922ee06d048d</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>acdf856eb765940f9705c83b0a01ac2b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>peeloffScattering</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a90fa4fdd7f0905d550a2641166a24732</anchor>
      <arglist>(double &amp;I, double &amp;Q, double &amp;U, double &amp;V, double &amp;lambda, Direction bfkobs, Direction bfky, const MaterialState *state, const PhotonPacket *pp) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>performScattering</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a23a499fcd9c83e756e94b3777cf69587</anchor>
      <arglist>(double lambda, const MaterialState *state, PhotonPacket *pp) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>sectionAbs</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a760a69256bc5c26798435991eb46f033</anchor>
      <arglist>(double lambda) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>sectionExt</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>ac504604b39a04f0712ee289b7cfc8661</anchor>
      <arglist>(double lambda) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Array &amp;</type>
      <name>sectionsAbs</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a814f7c3aec47a0bd2d18db7f2c5ddf2c</anchor>
      <arglist>(double lambda) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Array &amp;</type>
      <name>sectionsAbspol</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>aad2764b9dcf1e45fd90117608716537a</anchor>
      <arglist>(double lambda) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>sectionSca</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>ac277b9eefbb308d26d0161e1e2f4bc58</anchor>
      <arglist>(double lambda) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual vector&lt; StateVariable &gt;</type>
      <name>specificStateVariableInfo</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a040ac36156cfc5ecf8b401791c7d922d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Array &amp;</type>
      <name>thetaGrid</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>afc5c0d0d22e7bb67afc3cdebe8d15291</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UpdateStatus</type>
      <name>updateSpecificState</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a44c9b31eb5bfa94a30bd2a05003d33a5</anchor>
      <arglist>(MaterialState *state, const Array &amp;Jv) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialMix</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>ac759d2667fc0dcb75748ebb5e49bb047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Configuration *</type>
      <name>config</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>ad32dc373b2b1fe8348dcc7b669fe1a83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Random *</type>
      <name>random</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>aa7136a8f47e9cdbe6359b44209852ef7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_material_mix.html</anchorfile>
      <anchor>a57affb3936afbde5dae07c199ba663ba</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaterialMixFamily</name>
    <filename>class_material_mix_family.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual const MaterialMix *</type>
      <name>mix</name>
      <anchorfile>class_material_mix_family.html</anchorfile>
      <anchor>a57fd160c509c8fa48eb1778fed0ffb13</anchor>
      <arglist>(const Array &amp;parameters) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_material_mix_family.html</anchorfile>
      <anchor>a12974ed6d7860a1248726b30bd06fffa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialMixFamily</name>
      <anchorfile>class_material_mix_family.html</anchorfile>
      <anchor>a7f5352e3b0295006bd95351bb1dcdf30</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaterialNormalization</name>
    <filename>class_material_normalization.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual std::pair&lt; double, double &gt;</type>
      <name>numberAndMass</name>
      <anchorfile>class_material_normalization.html</anchorfile>
      <anchor>a6309b091b005902ded73c3f9a34db1c7</anchor>
      <arglist>(const Geometry *geom, const MaterialMix *mix) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialNormalization</name>
      <anchorfile>class_material_normalization.html</anchorfile>
      <anchor>a1d5d18ea5cef8e1a3b49effe724658fa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaterialState</name>
    <filename>class_material_state.html</filename>
    <member kind="function">
      <type></type>
      <name>MaterialState</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>a42902302863d985ef0560abc913e4b8a</anchor>
      <arglist>(const MediumState &amp;ms, int m, int h)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>bulkVelocity</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>a7ccfab1c16cd32d7ddfb0f6d7cfbb97c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cellIndex</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>ad7c92b36949288d20ddf7874afd3499b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>custom</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>a83a55ee511841e873530886d0db13f30</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>magneticField</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>a19a661eba043343aa7b458f2a6553d42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mediumIndex</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>ae87956780f3f09725697aea7afd8403e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>a1c71f078a1134c7eed6fcd4cbbd11ec7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numberDensity</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>acc216f9da69895c44f7ba13dab38c4a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCustom</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>ae6409b410f97b3c782775b3586ecde78</anchor>
      <arglist>(int i, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMetallicity</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>a59df50a5cbf2c40d2289c307760ea2e1</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberDensity</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>a87e8a3c8be87f217b8531ac0deb64df3</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>ac9bdaef34e846559f28cc63fd3e5b219</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>temperature</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>a135d8b2e042287477b9e6e2e32741c65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_material_state.html</anchorfile>
      <anchor>aedf6d7c6d554e5fc718e4f70374a63e1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaterialWavelengthRangeInterface</name>
    <filename>class_material_wavelength_range_interface.html</filename>
    <base>WavelengthRangeInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual WavelengthGrid *</type>
      <name>materialWavelengthGrid</name>
      <anchorfile>class_material_wavelength_range_interface.html</anchorfile>
      <anchor>af575fc94835b396b63b5aa4b6a7ccede</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialWavelengthRangeInterface</name>
      <anchorfile>class_material_wavelength_range_interface.html</anchorfile>
      <anchor>ae6d89eb81b14472c1ae6d1b1fc3f11d4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeanFileDustMix</name>
    <filename>class_mean_file_dust_mix.html</filename>
    <base>TabulatedDustMix</base>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_mean_file_dust_mix.html</anchorfile>
      <anchor>a7303ee77d987cbdeec396477fa64074b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeanFileDustMix</name>
      <anchorfile>class_mean_file_dust_mix.html</anchorfile>
      <anchor>a300681f37a418377655173465d1a3deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getDustProperties</name>
      <anchorfile>class_mean_file_dust_mix.html</anchorfile>
      <anchor>ab886c9b0246417b1b0a41400d5ca638d</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;kappaextv, Array &amp;albedov, Array &amp;asymmparv) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeanInterstellarDustMix</name>
    <filename>class_mean_interstellar_dust_mix.html</filename>
    <base>SingleGrainDustMix</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeanInterstellarDustMix</name>
      <anchorfile>class_mean_interstellar_dust_mix.html</anchorfile>
      <anchor>a7948fb994c0678b12ca364733d3c2da5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_mean_interstellar_dust_mix.html</anchorfile>
      <anchor>aff44bffd4812cbaa16ab5d902189f42c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeanIvezicBenchmarkDustMix</name>
    <filename>class_mean_ivezic_benchmark_dust_mix.html</filename>
    <base>SingleGrainDustMix</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeanIvezicBenchmarkDustMix</name>
      <anchorfile>class_mean_ivezic_benchmark_dust_mix.html</anchorfile>
      <anchor>a28f84558573484060fa536829f43a997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_mean_ivezic_benchmark_dust_mix.html</anchorfile>
      <anchor>aa32ccc907e2e216358b7e999978b96cd</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeanListDustMix</name>
    <filename>class_mean_list_dust_mix.html</filename>
    <base>TabulatedDustMix</base>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>albedos</name>
      <anchorfile>class_mean_list_dust_mix.html</anchorfile>
      <anchor>a1e7c20154a70e93e498749863f4a7c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>asymmetryParameters</name>
      <anchorfile>class_mean_list_dust_mix.html</anchorfile>
      <anchor>a754a432f52986d1aee5446ce19d665da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>extinctionCoefficients</name>
      <anchorfile>class_mean_list_dust_mix.html</anchorfile>
      <anchor>a1957730c76d60e2d53df848263f10924</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>wavelengths</name>
      <anchorfile>class_mean_list_dust_mix.html</anchorfile>
      <anchor>ae7bf995428d097c631ad53cbec8c7fb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeanListDustMix</name>
      <anchorfile>class_mean_list_dust_mix.html</anchorfile>
      <anchor>a8a799dcdccadb793e9e57fbb4cbec5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getDustProperties</name>
      <anchorfile>class_mean_list_dust_mix.html</anchorfile>
      <anchor>a02dc8cc773b0eacc33d1cf726e9b5370</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;kappaextv, Array &amp;albedov, Array &amp;asymmparv) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeanPascucciBenchmarkDustMix</name>
    <filename>class_mean_pascucci_benchmark_dust_mix.html</filename>
    <base>SingleGrainDustMix</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeanPascucciBenchmarkDustMix</name>
      <anchorfile>class_mean_pascucci_benchmark_dust_mix.html</anchorfile>
      <anchor>a07bd93d860829cdbc6183e2af1a32713</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_mean_pascucci_benchmark_dust_mix.html</anchorfile>
      <anchor>a3a8937cb6f7216dc45992339ccbcf745</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeanPinteBenchmarkDustMix</name>
    <filename>class_mean_pinte_benchmark_dust_mix.html</filename>
    <base>SingleGrainDustMix</base>
    <member kind="enumeration">
      <type></type>
      <name>ScatteringType</name>
      <anchorfile>class_mean_pinte_benchmark_dust_mix.html</anchorfile>
      <anchor>ad7433a0bfc915593c3d897b6ca3570ca</anchor>
      <arglist></arglist>
      <enumvalue file="class_mean_pinte_benchmark_dust_mix.html" anchor="ad7433a0bfc915593c3d897b6ca3570caadf03fa94525bed29cd8cd726fb338735">HenyeyGreenstein</enumvalue>
      <enumvalue file="class_mean_pinte_benchmark_dust_mix.html" anchor="ad7433a0bfc915593c3d897b6ca3570caae1f691a01e0e3edb7adee4b84ab4e13c">MaterialPhaseFunction</enumvalue>
      <enumvalue file="class_mean_pinte_benchmark_dust_mix.html" anchor="ad7433a0bfc915593c3d897b6ca3570caab02b4090d4958ca37bd4762064df2907">SphericalPolarization</enumvalue>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPolarizedScattering</name>
      <anchorfile>class_mean_pinte_benchmark_dust_mix.html</anchorfile>
      <anchor>a78504d87f536033acdc7062cb99e29ab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ScatteringMode</type>
      <name>scatteringMode</name>
      <anchorfile>class_mean_pinte_benchmark_dust_mix.html</anchorfile>
      <anchor>a1509d85b68dac48d82a9b37d87db069e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ScatteringType</type>
      <name>scatteringType</name>
      <anchorfile>class_mean_pinte_benchmark_dust_mix.html</anchorfile>
      <anchor>acc7fea44af38d9a7dffcdedcd213b5b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeanPinteBenchmarkDustMix</name>
      <anchorfile>class_mean_pinte_benchmark_dust_mix.html</anchorfile>
      <anchor>a16371d000349c4d650227fa91387492b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>resourceNameForMuellerMatrix</name>
      <anchorfile>class_mean_pinte_benchmark_dust_mix.html</anchorfile>
      <anchor>a04e066cfdbefc80c8886ce8cfe97cc5d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_mean_pinte_benchmark_dust_mix.html</anchorfile>
      <anchor>ac457041f7f39c168c81045f2ad038edc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeanTrustBenchmarkDustMix</name>
    <filename>class_mean_trust_benchmark_dust_mix.html</filename>
    <base>SingleGrainDustMix</base>
    <member kind="enumeration">
      <type></type>
      <name>ScatteringType</name>
      <anchorfile>class_mean_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>a74bda37de6d3a5e9e608287dfce5dea8</anchor>
      <arglist></arglist>
      <enumvalue file="class_mean_trust_benchmark_dust_mix.html" anchor="a74bda37de6d3a5e9e608287dfce5dea8adf03fa94525bed29cd8cd726fb338735">HenyeyGreenstein</enumvalue>
      <enumvalue file="class_mean_trust_benchmark_dust_mix.html" anchor="a74bda37de6d3a5e9e608287dfce5dea8ae1f691a01e0e3edb7adee4b84ab4e13c">MaterialPhaseFunction</enumvalue>
      <enumvalue file="class_mean_trust_benchmark_dust_mix.html" anchor="a74bda37de6d3a5e9e608287dfce5dea8ab02b4090d4958ca37bd4762064df2907">SphericalPolarization</enumvalue>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPolarizedScattering</name>
      <anchorfile>class_mean_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>ab7a7188a9e8f5e99e83a090cb705c3fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ScatteringMode</type>
      <name>scatteringMode</name>
      <anchorfile>class_mean_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>ace2ec025dcd133845a1fcfaa9750afa1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ScatteringType</type>
      <name>scatteringType</name>
      <anchorfile>class_mean_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>aa3605b381b9fe245a803e81e31754607</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeanTrustBenchmarkDustMix</name>
      <anchorfile>class_mean_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>addb684f1ff2f08a831795d83ff2969a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>resourceNameForMuellerMatrix</name>
      <anchorfile>class_mean_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>a2880eaff5cbe0d9438af00f65503635d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_mean_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>a0b12f63233134d738a18048f9a4873a6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Medium</name>
    <filename>class_medium.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual Vec</type>
      <name>bulkVelocity</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>abbf63a93b966484fd9b10264386feda6</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dimension</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>aa6f915e29e80c70bd21c49c2412223c2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Position</type>
      <name>generatePosition</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a5009f047c1168feebeb1c8e94ce4c157</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasMagneticField</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>aeaecd0c7101233dacec556ebd9825b59</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasMetallicity</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>aa50163eeab89c9f8f3139c1b0e0758bd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasParameters</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a275541282afb70cdd46b44fc3402046f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasTemperature</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>ad645732314f5d3cc19a4bbdd145144ae</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasVariableMix</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a936da3ad8b0a0346fbbfb0717d495058</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasVelocity</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a7d26ad78f440f832ebe6d095bf9252fd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vec</type>
      <name>magneticField</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>ac5af6bcdeb3b3b5561446f416bcc0c98</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>mass</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>af2acc35242a3581f65c6639b37a1f9f8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>massDensity</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a4de28c9a4f60078bee06e64f92144257</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>metallicity</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a67853fe2743a212f1a8817ee8c009202</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MaterialMix *</type>
      <name>mix</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a2d7a0bc4257c8edbc445ae8e76c2b0ab</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const MaterialMix *</type>
      <name>mix</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a04a70dd4e5cd9cb54ad01d2aa1f505d9</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>number</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a577147714089fd55eb7fd336bfb8c5ad</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>numberDensity</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a0dbcd608be0af9ba96ab333daff7a5be</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>opticalDepthX</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a7db0261e67c4eeaae3f77ba008e94889</anchor>
      <arglist>(double lambda) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>opticalDepthY</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a045dadc374970ec742a6d41d2ac1f250</anchor>
      <arglist>(double lambda) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>opticalDepthZ</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a7c8e8dca68c57c27bf6e6e8a61dd0a7c</anchor>
      <arglist>(double lambda) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parameters</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a512c282f50e373e5038b77dddc7820c6</anchor>
      <arglist>(Position bfr, Array &amp;params) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>temperature</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>aadabf8903c139da4a82bbeac3a25ebce</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Medium</name>
      <anchorfile>class_medium.html</anchorfile>
      <anchor>a9dfadab5a1a69868f5add5f36d8e72c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MediumState</name>
    <filename>class_medium_state.html</filename>
    <member kind="function">
      <type>Vec</type>
      <name>bulkVelocity</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>ad8ee429508e11d4212a4d7c6fa8bec1b</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>custom</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>acd8b30faa68e2dcd7ef0e6825cb02fbe</anchor>
      <arglist>(int m, int h, int i) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>initAllocate</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>a6dc06da39fae7c244b4fe90c1f4deedd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initCommonStateVariables</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>a9fdc946c9c95d7aad311ab668c488938</anchor>
      <arglist>(const vector&lt; StateVariable &gt; &amp;variables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initCommunicate</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>aa1a1b021e37a5e2e9a7172eb8fa3e1c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initConfiguration</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>af0d34bacf9f46a5055fdc0146f7e30b5</anchor>
      <arglist>(int numCells, int numMedia)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initSpecificStateVariables</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>a9cfb44a9a2fad3d35b1e3f4bd5263359</anchor>
      <arglist>(const vector&lt; StateVariable &gt; &amp;variables)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>magneticField</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>ae7d1cf755f8316f7987c00beaedc955b</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>ae0c4f4d936b233f3df86b3f2b6ffea72</anchor>
      <arglist>(int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numberDensity</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>abd6d53861fafa37f65b447eef54b8342</anchor>
      <arglist>(int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBulkVelocity</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>a2240f06d9b518571c5a0ca8c95646605</anchor>
      <arglist>(int m, Vec value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCustom</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>a692953c9f92527f4b472a28382fe228e</anchor>
      <arglist>(int m, int h, int i, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMagneticField</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>a4f5ee442ff1e067d211f7a654e386327</anchor>
      <arglist>(int m, Vec value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMetallicity</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>a20f59881b7b274b1735ae6d5b3e8b5fa</anchor>
      <arglist>(int m, int h, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberDensity</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>a82fd8903dfc4067cf0a72da26a5c6d02</anchor>
      <arglist>(int m, int h, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>a3aef014416dbd3ae3c7cf08a29dcc263</anchor>
      <arglist>(int m, int h, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>ab974d872e8e0a97fddcc4510cd0b6d06</anchor>
      <arglist>(int m, double value)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; int, int &gt;</type>
      <name>synchronize</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>ada1aed4d7c8ef3d9c6df8275212c71df</anchor>
      <arglist>(const vector&lt; UpdateStatus &gt; &amp;cellFlags)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>temperature</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>ace493f3117f1ee62089018dcdb144480</anchor>
      <arglist>(int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_medium_state.html</anchorfile>
      <anchor>a5baf37c6ad56f41465e271872087c8f1</anchor>
      <arglist>(int m) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MediumSystem</name>
    <filename>class_medium_system.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>double</type>
      <name>albedoForScattering</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a2fd671abbeb1bb75e6129fc151996e9e</anchor>
      <arglist>(const PhotonPacket *pp) const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>bulkVelocity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a6f6481a38408022b595a9a7d83f60648</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRadiationField</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a88095972f931cf42249c8942850312e3</anchor>
      <arglist>(bool primary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicateRadiationField</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a5c4c2780c3756c0729b5288bf52893fd</anchor>
      <arglist>(bool primary)</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>continuumEmissionSpectrum</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a70fe1aa41c400cd57688146821e1801d</anchor>
      <arglist>(int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>custom</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a69646a12c39e105b343a529ce1c564c0</anchor>
      <arglist>(int m, int h, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ad4c81f20cbee1dab69daeceecfe5fa84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DustEmissionOptions *</type>
      <name>dustEmissionOptions</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>aac93f8b010d6184b7af094e23f8dc3cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>dustEmissionSpectrum</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ad2e908d938be8e6971d5a45404d59e78</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dustLuminosity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a770f3cbb6d9af1f4950bf7cca9485290</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dustMassDensity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a5f82e6bf9870b2b6aa1250961284b7a4</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dustMassDensity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>afa977b9b376d904963650b721d1eecc6</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; int &gt; &amp;</type>
      <name>dustMediumIndices</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ab29940cab6db85c8f0d30ff60914220d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DynamicStateOptions *</type>
      <name>dynamicStateOptions</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a4700497e42a15f8a86f38b6b07c47f01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; int &gt; &amp;</type>
      <name>electronMediumIndices</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a92d5ffa382a0db5f17230757337bd524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>electronNumberDensity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a413feaf98667f6aed281a892e43177d3</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>electronNumberDensity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a22c5985751a93742dad68139ebf82946</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; int &gt; &amp;</type>
      <name>gasMediumIndices</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ac0ae40af749eadb7b958b7b052ebd8ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gasNumberDensity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a6c11cae6bfcf8b6b4ed3caa1d9e81f3f</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gasNumberDensity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>acb82137ceba1182600cac4f062ecfa8f</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getExtinctionOpticalDepth</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a9dab5ab37e407da586c6436d676a57e3</anchor>
      <arglist>(const PhotonPacket *pp, double distance) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getExtinctionOpticalDepth</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>adfdbdf651325e2600dc93440555c02a0</anchor>
      <arglist>(const SpatialGridPath *path, double lambda, MaterialMix::MaterialType type) const</arglist>
    </member>
    <member kind="function">
      <type>SpatialGrid *</type>
      <name>grid</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>aec8793a17f9d065366cb32c0b127b671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gridDimension</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ad6d50d539effb5c870f67509c4ede87e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDust</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a8b5a401788786366d467d2e425910aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasElectrons</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a8a828f70bec276bc98119ee5e9ac4744</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGas</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>abd5ff36ceb8a1fc48af2263a10c15b23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMaterialType</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ab996157339645d58a7d64830f016fff6</anchor>
      <arglist>(MaterialMix::MaterialType type) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeDustTemperature</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a81b10e7dbb04a67cd2e4bebe29ff61bd</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeElectronTemperature</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a00f3dfef2aaca559eeb7e838f33eac0d</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeGasTemperature</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a52a4b259211c5a11950f067f313bff9f</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeTemperature</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a7942b273b3d690d1e9ee74bc13c5ac76</anchor>
      <arglist>(int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeTemperature</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ab749da18f41835b3e7bfc03909a3417c</anchor>
      <arglist>(int m, MaterialMix::MaterialType type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDust</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a3e39c3d0c3f588e629fb803010e5bb36</anchor>
      <arglist>(int h) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isElectrons</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a2d1760d844167e0063ecc5f603104829</anchor>
      <arglist>(int h) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGas</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a587d4fb6508828e80b66b376b3af4619</anchor>
      <arglist>(int h) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMaterialType</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a9f27d048d4901f14e2de2b378ee7e33a</anchor>
      <arglist>(MaterialMix::MaterialType type, int h) const</arglist>
    </member>
    <member kind="function">
      <type>IterationOptions *</type>
      <name>iterationOptions</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>acb58adf4e3caf257376257057dd5d553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>lineEmissionSpectrum</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a325183b8f452446bd7181b4506b94dec</anchor>
      <arglist>(int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>LyaOptions *</type>
      <name>lyaOptions</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>aad39962a33ee953c3737331aec1bf62e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>magneticField</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a7d40d605e5b6ec9d95677258aabdf88c</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>massDensity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a2c9e4758afb749adef235164a3590dcc</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>massDensity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ababe61cec3a35ba55448f8cbc8387e03</anchor>
      <arglist>(int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>meanIntensity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a3cc680a0d1f23a13651c9410391a9b18</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Medium * &gt; &amp;</type>
      <name>media</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a415ffe81e0866d12092abc6ef096e29f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>acce7d02c78f62bc1c9647daeb9046e75</anchor>
      <arglist>(int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>const MaterialMix *</type>
      <name>mix</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a9e7cbf2c8be85af556a9888866eef72d</anchor>
      <arglist>(int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numberDensity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>aacfb73ca45a206fba49d69430ad5acb2</anchor>
      <arglist>(int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numCells</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a110233edc5eaf6a9f065d302aaa2584e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numMedia</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>afe6d174d8739a8c707d0f3aa0bfedfd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityAbs</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a63c8fc0396ee67ae8322ae122a42e194</anchor>
      <arglist>(double lambda, int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityAbs</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a38dddc6f58273491f8d5aef3a90cd23f</anchor>
      <arglist>(double lambda, int m, MaterialMix::MaterialType type) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a8a51d18425a4aa6356f1681579259443</anchor>
      <arglist>(double lambda, int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ad5415225a2db4c42d69e58f2df9892fc</anchor>
      <arglist>(double lambda, int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>aea9397d4deb69db45ab0a8e523d63291</anchor>
      <arglist>(double lambda, int m, MaterialMix::MaterialType type) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacitySca</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a6e3b59c9ab2cfc7c7fb9334fc3134668</anchor>
      <arglist>(double lambda, int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peelOffScattering</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ab04a610d7a7db047182c93ee8c247e97</anchor>
      <arglist>(const ShortArray &amp;wv, double lambda, Direction bfkobs, Direction bfky, PhotonPacket *pp, PhotonPacket *ppp) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peelOffScattering</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a0a088908ef394e0791f672e8d56b090f</anchor>
      <arglist>(int h, double w, double lambda, Direction bfkobs, Direction bfky, PhotonPacket *pp, PhotonPacket *ppp) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perceivedWavelengthForScattering</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a3b514b4b3718c3f5278602b05b5cc06d</anchor>
      <arglist>(const PhotonPacket *pp) const</arglist>
    </member>
    <member kind="function">
      <type>PhotonPacketOptions *</type>
      <name>photonPacketOptions</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a501b168092f9d4fdbed92ac5e57d7efb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RadiationFieldOptions *</type>
      <name>radiationFieldOptions</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a0cefc4454ed769fb90a256d6d8d6d55c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SamplingOptions *</type>
      <name>samplingOptions</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a4c552e5b1ff9cddee19a58879707e695</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SecondaryEmissionOptions *</type>
      <name>secondaryEmissionOptions</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ac686e533dac0155827a1e7691dcbd653</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtinctionOpticalDepths</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a4bdf2391c9e6aa0ca9a717dd87be6c1f</anchor>
      <arglist>(PhotonPacket *pp) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInteractionPointUsingExtinction</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>ac317ef2ea9617d5cc3405bb617eaf331</anchor>
      <arglist>(PhotonPacket *pp, double tauinteract) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInteractionPointUsingScatteringAndAbsorption</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a2dd8dfcc2222d32f7f72fcb8899e3bfa</anchor>
      <arglist>(PhotonPacket *pp, double tauinteract) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScatteringAndAbsorptionOpticalDepths</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a102e616f057b10e5094ae7e59a0c0053</anchor>
      <arglist>(PhotonPacket *pp) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simulateScattering</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>adee7e3b219684192136e26d4d8f64456</anchor>
      <arglist>(Random *random, PhotonPacket *pp) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeRadiationField</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>aaa8aae28ebac05bab53114e044db8a66</anchor>
      <arglist>(bool primary, int m, int ell, double Lds)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>temperature</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a82fdaab7825a8e8b578f5eba2e799095</anchor>
      <arglist>(int m, int h) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>totalDustAbsorbedLuminosity</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a26974048acb2a9040e462562440b5cfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updatePrimaryDynamicMediumState</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a519475d855612df94651321cf1c1b27b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateSecondaryDynamicMediumState</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a5c896e878ea19c0104fbe6eaac1620db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>aea94b7c5650604ea48fcce834c322db6</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>weightsForScattering</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a42d09f70a8924cace6ce6375a6ca02cb</anchor>
      <arglist>(ShortArray &amp;wv, double lambda, const PhotonPacket *pp) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MediumSystem</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a37348fd78fbe210f80501f2af7e882fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a8dc2abd1d9ffe3ae64e04ca613e66eec</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>opacityAbs</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a42b734d71f77f9ebf36cf331f87bb797</anchor>
      <arglist>(double lambda, int m, const PhotonPacket *pp) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a62cf2740cb20d0411d83c4b4e4cfe525</anchor>
      <arglist>(double lambda, int m, const PhotonPacket *pp) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>opacitySca</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a4b7760e4af6051262acbb8822bcdc780</anchor>
      <arglist>(double lambda, int m, const PhotonPacket *pp) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>radiationField</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a6115f8030acde928862a9188e0a82e06</anchor>
      <arglist>(int m, int ell) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>updateDynamicStateMedia</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a0f11a41603ce2197e8dcb3ace0123f52</anchor>
      <arglist>(bool primary)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>updateDynamicStateRecipes</name>
      <anchorfile>class_medium_system.html</anchorfile>
      <anchor>a688146847e7ee23b90320633803a3233</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeridionalCutForm</name>
    <filename>class_meridional_cut_form.html</filename>
    <base>GenericForm</base>
    <member kind="function">
      <type>double</type>
      <name>azimuth</name>
      <anchorfile>class_meridional_cut_form.html</anchorfile>
      <anchor>a11663f1d1165e5ddd386296ff4729e69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSamples</name>
      <anchorfile>class_meridional_cut_form.html</anchorfile>
      <anchor>a7f4d292f0199dcf75865db9a6deafd1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radius</name>
      <anchorfile>class_meridional_cut_form.html</anchorfile>
      <anchor>a9ebe058e2fd4bfb817cdfccf3e9b6d11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_meridional_cut_form.html</anchorfile>
      <anchor>a0e2a31cc70efde1f0480e0c3309f4a2b</anchor>
      <arglist>(const ProbeFormBridge *bridge) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeridionalCutForm</name>
      <anchorfile>class_meridional_cut_form.html</anchorfile>
      <anchor>a8c3cb17c145d292dbf7eb8ff0e7ed04f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mesh</name>
    <filename>class_mesh.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual Array</type>
      <name>mesh</name>
      <anchorfile>class_mesh.html</anchorfile>
      <anchor>ab04cc2d49b70afa360addff17bf0ea23</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numBins</name>
      <anchorfile>class_mesh.html</anchorfile>
      <anchor>accf3d013eb056c862c8610a0f89e7b4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Mesh</name>
      <anchorfile>class_mesh.html</anchorfile>
      <anchor>a2af137f1571af89172b9c102302c416b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setNumBins</name>
      <anchorfile>class_mesh.html</anchorfile>
      <anchor>af47d828214192397f4c0fecfa4ee688f</anchor>
      <arglist>(int value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshGeometry</name>
    <filename>class_mesh_geometry.html</filename>
    <base>ImportedGeometry</base>
    <member kind="enumeration">
      <type></type>
      <name>MassType</name>
      <anchorfile>class_mesh_geometry.html</anchorfile>
      <anchor>a46049430c4fe66d509389a63c4c3a4b1</anchor>
      <arglist></arglist>
      <enumvalue file="class_mesh_geometry.html" anchor="a46049430c4fe66d509389a63c4c3a4b1a2fb9578dc9ed8897d5474fcdefa6cb72">MassDensity</enumvalue>
      <enumvalue file="class_mesh_geometry.html" anchor="a46049430c4fe66d509389a63c4c3a4b1aff2864d6f652ee0ac254814f1ae4f4a8">Mass</enumvalue>
      <enumvalue file="class_mesh_geometry.html" anchor="a46049430c4fe66d509389a63c4c3a4b1a7a494ad54edac742fedb68f30236dafd">NumberDensity</enumvalue>
      <enumvalue file="class_mesh_geometry.html" anchor="a46049430c4fe66d509389a63c4c3a4b1ab2ee912b91d69b435159c7c3f6df7f5f">Number</enumvalue>
    </member>
    <member kind="function">
      <type>MassType</type>
      <name>massType</name>
      <anchorfile>class_mesh_geometry.html</anchorfile>
      <anchor>ab1dd92eb0174106eb2d30c4aa79f607f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxX</name>
      <anchorfile>class_mesh_geometry.html</anchorfile>
      <anchor>a6746842fa232b5d50ecaf825b9c16b7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxY</name>
      <anchorfile>class_mesh_geometry.html</anchorfile>
      <anchor>a48336cf9c92eda18105f7381955b2ce0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxZ</name>
      <anchorfile>class_mesh_geometry.html</anchorfile>
      <anchor>ae17387b163ffd5c532745fbab735ce34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minX</name>
      <anchorfile>class_mesh_geometry.html</anchorfile>
      <anchor>aa3271403df0e014bd2ba33794f743d96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minY</name>
      <anchorfile>class_mesh_geometry.html</anchorfile>
      <anchor>a6e9a034eea84dea39bdcb99adafcea75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minZ</name>
      <anchorfile>class_mesh_geometry.html</anchorfile>
      <anchor>a7d46ff00834bd5ecefee44458674b77a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeshGeometry</name>
      <anchorfile>class_mesh_geometry.html</anchorfile>
      <anchor>afb1168bfba5c1392f656f1d229052e1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Box &amp;</type>
      <name>domain</name>
      <anchorfile>class_mesh_geometry.html</anchorfile>
      <anchor>a33c7d24d19e69119ed0c64bfdaef0677</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_mesh_geometry.html</anchorfile>
      <anchor>a0caba7fac93812e8d7c0e9b74e2116bb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshMedium</name>
    <filename>class_mesh_medium.html</filename>
    <base>ImportedMedium</base>
    <member kind="enumeration">
      <type></type>
      <name>MassType</name>
      <anchorfile>class_mesh_medium.html</anchorfile>
      <anchor>a27ba5f1149779e6d549139a52a6bc37c</anchor>
      <arglist></arglist>
      <enumvalue file="class_mesh_medium.html" anchor="a27ba5f1149779e6d549139a52a6bc37ca2fb9578dc9ed8897d5474fcdefa6cb72">MassDensity</enumvalue>
      <enumvalue file="class_mesh_medium.html" anchor="a27ba5f1149779e6d549139a52a6bc37caff2864d6f652ee0ac254814f1ae4f4a8">Mass</enumvalue>
      <enumvalue file="class_mesh_medium.html" anchor="a27ba5f1149779e6d549139a52a6bc37ca486d4a9d7048eda4c366cfb9225663df">MassDensityAndMass</enumvalue>
      <enumvalue file="class_mesh_medium.html" anchor="a27ba5f1149779e6d549139a52a6bc37ca7a494ad54edac742fedb68f30236dafd">NumberDensity</enumvalue>
      <enumvalue file="class_mesh_medium.html" anchor="a27ba5f1149779e6d549139a52a6bc37cab2ee912b91d69b435159c7c3f6df7f5f">Number</enumvalue>
      <enumvalue file="class_mesh_medium.html" anchor="a27ba5f1149779e6d549139a52a6bc37cac28070060b875f70bfe783ef03004138">NumberDensityAndNumber</enumvalue>
    </member>
    <member kind="function">
      <type>MassType</type>
      <name>massType</name>
      <anchorfile>class_mesh_medium.html</anchorfile>
      <anchor>a7688131a8b13c0a025d1a4b1b10bdadc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxX</name>
      <anchorfile>class_mesh_medium.html</anchorfile>
      <anchor>a90bc9891e8b9cc10dafb22ab7921b83f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxY</name>
      <anchorfile>class_mesh_medium.html</anchorfile>
      <anchor>a8c3a39f87af8b06ab1f45e793ea90eca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxZ</name>
      <anchorfile>class_mesh_medium.html</anchorfile>
      <anchor>a1c9384c1d99e943783ea9eda5ca224a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minX</name>
      <anchorfile>class_mesh_medium.html</anchorfile>
      <anchor>a2570b828afeb3d5af9987a874deed2c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minY</name>
      <anchorfile>class_mesh_medium.html</anchorfile>
      <anchor>a7f1dc74282721e34eb012d6c3bda8937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minZ</name>
      <anchorfile>class_mesh_medium.html</anchorfile>
      <anchor>a557829c1967f7dff0bdc71359eadd3f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeshMedium</name>
      <anchorfile>class_mesh_medium.html</anchorfile>
      <anchor>a6c97c1b3b2bf76d67defe92fdeebc924</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Box &amp;</type>
      <name>domain</name>
      <anchorfile>class_mesh_medium.html</anchorfile>
      <anchor>a4fe8cc489642a29510b46b1b9f0e4fd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_mesh_medium.html</anchorfile>
      <anchor>a030d55dc3e0bd299f775bbba6074ac43</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshSource</name>
    <filename>class_mesh_source.html</filename>
    <base>ImportedSource</base>
    <member kind="function">
      <type>double</type>
      <name>maxX</name>
      <anchorfile>class_mesh_source.html</anchorfile>
      <anchor>aac025c2f0829b6bf2fca834464d2dd3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxY</name>
      <anchorfile>class_mesh_source.html</anchorfile>
      <anchor>a7676acc4b1959bf073e079925a0fa344</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxZ</name>
      <anchorfile>class_mesh_source.html</anchorfile>
      <anchor>a75216d623483eb33ca1cdc809c9529b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minX</name>
      <anchorfile>class_mesh_source.html</anchorfile>
      <anchor>ae8b5f38875bb607f799430c31e1ba247</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minY</name>
      <anchorfile>class_mesh_source.html</anchorfile>
      <anchor>a5200a7498306d674ecc78269c248efa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minZ</name>
      <anchorfile>class_mesh_source.html</anchorfile>
      <anchor>a07322341fbbb14ac07586285981a171e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeshSource</name>
      <anchorfile>class_mesh_source.html</anchorfile>
      <anchor>a105f0045d93d0a38d41a57ec2feea61b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Box &amp;</type>
      <name>domain</name>
      <anchorfile>class_mesh_source.html</anchorfile>
      <anchor>afa3c1c9f1e368b78b544bda4a30dd3bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_mesh_source.html</anchorfile>
      <anchor>aed3d11f9943b7d7cc1ba909c4b74beb7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MetallicityProbe</name>
    <filename>class_metallicity_probe.html</filename>
    <base>SpatialGridWhenFormProbe</base>
    <member kind="function">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_metallicity_probe.html</anchorfile>
      <anchor>a75d0d5344001ba3903735e012f4f360e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MetallicityProbe</name>
      <anchorfile>class_metallicity_probe.html</anchorfile>
      <anchor>aae800c07d76287501c22d0a72274f3f2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MieSilicateGrainComposition</name>
    <filename>class_mie_silicate_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type></type>
      <name>MieSilicateGrainComposition</name>
      <anchorfile>class_mie_silicate_grain_composition.html</anchorfile>
      <anchor>a259136c8ff1b0e4308d1849b21961d25</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_mie_silicate_grain_composition.html</anchorfile>
      <anchor>aeb3378265edb43c28cc11c5a7c5481d4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_mie_silicate_grain_composition.html</anchorfile>
      <anchor>a81a0ddab74c7f53a334fdc682854a996</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_mie_silicate_grain_composition.html</anchorfile>
      <anchor>ad36bf75c0d273a0dab81064f074d5aba</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_mie_silicate_grain_composition.html</anchorfile>
      <anchor>a1cb2226acdd98d8e4d89cc26d3d2c176</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MieSilicateGrainComposition</name>
      <anchorfile>class_mie_silicate_grain_composition.html</anchorfile>
      <anchor>adb6c407f2f77bc7d139a8421c136372e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinSilicateGrainComposition</name>
    <filename>class_min_silicate_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_min_silicate_grain_composition.html</anchorfile>
      <anchor>a23f8bb736f7ae34a05ed01177b406110</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_min_silicate_grain_composition.html</anchorfile>
      <anchor>af5f31134bfcc588dd025f429640ccfe0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_min_silicate_grain_composition.html</anchorfile>
      <anchor>a018434f27a567447fab1c4c4e4793b98</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_min_silicate_grain_composition.html</anchorfile>
      <anchor>a293afbcfb0dfce26fbde8f752ffbb2b3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MinSilicateGrainComposition</name>
      <anchorfile>class_min_silicate_grain_composition.html</anchorfile>
      <anchor>ac3b8d793802a250da707b741034bdd92</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModifiedLogNormalGrainSizeDistribution</name>
    <filename>class_modified_log_normal_grain_size_distribution.html</filename>
    <base>LogNormalGrainSizeDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>dnda</name>
      <anchorfile>class_modified_log_normal_grain_size_distribution.html</anchorfile>
      <anchor>a5f08c597642ba3e8476a21013388edd0</anchor>
      <arglist>(double a) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>firstMixingParameter</name>
      <anchorfile>class_modified_log_normal_grain_size_distribution.html</anchorfile>
      <anchor>a55961c02c9d7b6a770861be600e64974</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>secondMixingParameter</name>
      <anchorfile>class_modified_log_normal_grain_size_distribution.html</anchorfile>
      <anchor>a682a23a25d338b140a56b6370810fbe8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ModifiedLogNormalGrainSizeDistribution</name>
      <anchorfile>class_modified_log_normal_grain_size_distribution.html</anchorfile>
      <anchor>aafcb39c63493a6f4c3b2ac653a0172f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModifiedPowerLawGrainSizeDistribution</name>
    <filename>class_modified_power_law_grain_size_distribution.html</filename>
    <base>RangeGrainSizeDistribution</base>
    <member kind="function">
      <type></type>
      <name>ModifiedPowerLawGrainSizeDistribution</name>
      <anchorfile>class_modified_power_law_grain_size_distribution.html</anchorfile>
      <anchor>a3f0f0fd5cf8a33b947734e62284cf1d8</anchor>
      <arglist>(SimulationItem *parent, double minSize, double maxSize, double powerLawIndex, double turnOffPoint, double scaleExponentialDecay, double exponentExponentialDecay, double scaleCurvature, double strengthCurvature, double exponentCurvature)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnda</name>
      <anchorfile>class_modified_power_law_grain_size_distribution.html</anchorfile>
      <anchor>a56caf4d43eb39080850631c0f8ce8e9f</anchor>
      <arglist>(double a) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponentCurvature</name>
      <anchorfile>class_modified_power_law_grain_size_distribution.html</anchorfile>
      <anchor>af03d170d4dac396d625093901a5c0b97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponentExponentialDecay</name>
      <anchorfile>class_modified_power_law_grain_size_distribution.html</anchorfile>
      <anchor>acfc9fc358375c1e48778329553dbb10d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>powerLawIndex</name>
      <anchorfile>class_modified_power_law_grain_size_distribution.html</anchorfile>
      <anchor>a1f38eca1bc7ccf25bed5b593799f4189</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleCurvature</name>
      <anchorfile>class_modified_power_law_grain_size_distribution.html</anchorfile>
      <anchor>acfcbb932108f1efa91d1d53afc4b431a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleExponentialDecay</name>
      <anchorfile>class_modified_power_law_grain_size_distribution.html</anchorfile>
      <anchor>ae02f977f5e9dfb4d39dfc165554d71c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strengthCurvature</name>
      <anchorfile>class_modified_power_law_grain_size_distribution.html</anchorfile>
      <anchor>a417111bc252e4234d91746d7a6827167</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>turnOffPoint</name>
      <anchorfile>class_modified_power_law_grain_size_distribution.html</anchorfile>
      <anchor>a08bb76888adffa1d4bb03e2477676b24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ModifiedPowerLawGrainSizeDistribution</name>
      <anchorfile>class_modified_power_law_grain_size_distribution.html</anchorfile>
      <anchor>a0a20750e94ca089a315cb5e68cb483d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MollweideProjection</name>
    <filename>class_mollweide_projection.html</filename>
    <base>AllSkyProjection</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fromGlobeToRectangle</name>
      <anchorfile>class_mollweide_projection.html</anchorfile>
      <anchor>afa656aa017f06a8e3c1f096f48f1bded</anchor>
      <arglist>(double longitude, double latitude, double &amp;x, double &amp;y) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>fromRectangleToGlobe</name>
      <anchorfile>class_mollweide_projection.html</anchorfile>
      <anchor>a3e0bb0cf75be7a6a9a2e43b0c73b1634</anchor>
      <arglist>(double x, double y, double &amp;longitude, double &amp;latitude) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MollweideProjection</name>
      <anchorfile>class_mollweide_projection.html</anchorfile>
      <anchor>a2345dae2146435adef3ba8df087a1531</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MonteCarloSimulation</name>
    <filename>class_monte_carlo_simulation.html</filename>
    <base>Simulation</base>
    <member kind="enumeration">
      <type></type>
      <name>SimulationMode</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>ad72e07e2e5016073f05fa7c98e9e72d8</anchor>
      <arglist></arglist>
      <enumvalue file="class_monte_carlo_simulation.html" anchor="ad72e07e2e5016073f05fa7c98e9e72d8a19eaff7161e6829ea393f6dc3b041f99">OligoNoMedium</enumvalue>
      <enumvalue file="class_monte_carlo_simulation.html" anchor="ad72e07e2e5016073f05fa7c98e9e72d8aaf0ec38bdf324bc4ad323a92d1fdfacb">OligoExtinctionOnly</enumvalue>
      <enumvalue file="class_monte_carlo_simulation.html" anchor="ad72e07e2e5016073f05fa7c98e9e72d8aad56e367ef6f5d6fb0eae3c726973956">NoMedium</enumvalue>
      <enumvalue file="class_monte_carlo_simulation.html" anchor="ad72e07e2e5016073f05fa7c98e9e72d8ae71a6566e12769e31613e49b4fb16d15">ExtinctionOnly</enumvalue>
      <enumvalue file="class_monte_carlo_simulation.html" anchor="ad72e07e2e5016073f05fa7c98e9e72d8a6d863059f10e67ea37043af72f3e30e6">LyaExtinctionOnly</enumvalue>
      <enumvalue file="class_monte_carlo_simulation.html" anchor="ad72e07e2e5016073f05fa7c98e9e72d8ac9265ac8cf2c89f94b5e0698a36dbf81">DustEmission</enumvalue>
      <enumvalue file="class_monte_carlo_simulation.html" anchor="ad72e07e2e5016073f05fa7c98e9e72d8a35bad2f387270d4c6336417a69756278">GasEmission</enumvalue>
      <enumvalue file="class_monte_carlo_simulation.html" anchor="ad72e07e2e5016073f05fa7c98e9e72d8a34de466975b7f946cb098ef1125fe688">DustAndGasEmission</enumvalue>
    </member>
    <member kind="function">
      <type>Configuration *</type>
      <name>config</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>ab4a6f4169f3e14449da28e27151ec4d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cosmology *</type>
      <name>cosmology</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>aea857232a169856c3f7587921be0604b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InstrumentSystem *</type>
      <name>instrumentSystem</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a6d82a6f0b53858c9d4a38fa50787fee0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iteratePrimaryEmission</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a9ce288ab2a605f88650a9885eca35d51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iterateSecondaryEmission</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a78215fa9d3946e23e801d053bcb55658</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MediumSystem *</type>
      <name>mediumSystem</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a923663bc3a03b797b71fa8cf6492bfac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numPackets</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a0b831233f622e9a543e93a9630e24ce4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProbeSystem *</type>
      <name>probeSystem</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a584647f79fe42b65d7ce2cd8f7fabdee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SimulationMode</type>
      <name>simulationMode</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a96e438a62edd38de5c40437ef65908f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SourceSystem *</type>
      <name>sourceSystem</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a16a4e1120d80fa9925425a88459c2d6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MonteCarloSimulation</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>af8c4373af49e487ab85b4fed89c9fa38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>runSimulation</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a22d9057322590b68c832c442a87983a4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a2c4b025d707bf4e63eca6fd450504cb9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSimulation</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a144c9b8f5e4dfea23709c715bef58ca3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initProgress</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a4aaf8375929a249703de43a797976412</anchor>
      <arglist>(string segment, size_t numTotal)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>logProgress</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a6961306bb4d546cc121ea808e76cd92f</anchor>
      <arglist>(size_t numDone)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>peelOffEmission</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>afcd1802cbb24a34e7eafdc00dad746c0</anchor>
      <arglist>(const PhotonPacket *pp, PhotonPacket *ppp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>peelOffScattering</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>ad204ca599185a2e6c29f1fa3703d1a41</anchor>
      <arglist>(PhotonPacket *pp, PhotonPacket *ppp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>performLifeCycle</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>afc3c805cb6ac14e4d3d9f6244dc06aa3</anchor>
      <arglist>(size_t firstIndex, size_t numIndices, bool primary, bool peel, bool store)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runMergedEmissionIterations</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>ae2632cc30f282abaef5bb7f1d00c9e63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runPrimaryEmission</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>afb878e174a27c8e8d9be7c5a94567a85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runPrimaryEmissionIterations</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a76609bfe5706203a6cf52edbe1571c97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runSecondaryEmission</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a705fc5f91dac752d825bd7e1655c931b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runSecondaryEmissionIterations</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a61664972241f43d6c285121b6e329c14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>simulateForcedPropagation</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a70bf2c15ea2fa63fbf09ebbfc2269b95</anchor>
      <arglist>(PhotonPacket *pp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>simulateNonForcedPropagation</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>a58f2eca005becd2f8ec05f7005344443</anchor>
      <arglist>(PhotonPacket *pp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storeRadiationField</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>accdcce8ea5d80c45906b903659bba939</anchor>
      <arglist>(const PhotonPacket *pp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>wait</name>
      <anchorfile>class_monte_carlo_simulation.html</anchorfile>
      <anchor>aa63bf55d68765789b88c751ba06cfb91</anchor>
      <arglist>(string scope)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MoveableMesh</name>
    <filename>class_moveable_mesh.html</filename>
    <base>Mesh</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>MoveableMesh</name>
      <anchorfile>class_moveable_mesh.html</anchorfile>
      <anchor>acd9030d7038931555c0ddfd0d6a59f40</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MRNDustMix</name>
    <filename>class_m_r_n_dust_mix.html</filename>
    <base>MultiGrainDustMix</base>
    <member kind="function">
      <type>int</type>
      <name>numGraphiteSizes</name>
      <anchorfile>class_m_r_n_dust_mix.html</anchorfile>
      <anchor>a142be7d47275af6f6276ed8f1841c12e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSilicateSizes</name>
      <anchorfile>class_m_r_n_dust_mix.html</anchorfile>
      <anchor>ac5536d28f99b516748ee925f31041c58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MRNDustMix</name>
      <anchorfile>class_m_r_n_dust_mix.html</anchorfile>
      <anchor>a738012e1b696e76987ae6c7ddb4b6397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_m_r_n_dust_mix.html</anchorfile>
      <anchor>aafb55a1914e139c7db81a6f24a065ba4</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiGaussianExpansionGeometry</name>
    <filename>class_multi_gaussian_expansion_geometry.html</filename>
    <base>AxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_multi_gaussian_expansion_geometry.html</anchorfile>
      <anchor>ad60c30d5bb39b49fe99051a24c16b8ad</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_multi_gaussian_expansion_geometry.html</anchorfile>
      <anchor>a691f7154c01945b6ed63810eef59d32c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_multi_gaussian_expansion_geometry.html</anchorfile>
      <anchor>aa7e7debe58f261e4f2a7ae3dc2873178</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inclination</name>
      <anchorfile>class_multi_gaussian_expansion_geometry.html</anchorfile>
      <anchor>aa3d5be1f72060e7ce50f886e31c51cfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pixelscale</name>
      <anchorfile>class_multi_gaussian_expansion_geometry.html</anchorfile>
      <anchor>af61a8b1ec983efbfbcf446ee23226a3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_multi_gaussian_expansion_geometry.html</anchorfile>
      <anchor>af47963d89c17a9824cdcebf01e3ad12e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_multi_gaussian_expansion_geometry.html</anchorfile>
      <anchor>a97ca1ecba3919da30d9020a072047925</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiGaussianExpansionGeometry</name>
      <anchorfile>class_multi_gaussian_expansion_geometry.html</anchorfile>
      <anchor>a73ef41bfb5fb9fff73569c0be5fcc666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_multi_gaussian_expansion_geometry.html</anchorfile>
      <anchor>a57e1107e9e4f959845e30149c28a2f9e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiGrainDustMix</name>
    <filename>class_multi_grain_dust_mix.html</filename>
    <base>DustMix</base>
    <base>MultiGrainPopulationInterface</base>
    <member kind="function">
      <type>Array</type>
      <name>emissivity</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>a23bad8217c3b85d02257ca7291a50c05</anchor>
      <arglist>(const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStochasticDustEmission</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>ac37df7f843900be0776fdfd46389180d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPopulations</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>a7a1d62cd9cb182f84c0f25cd9e3f5ff2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const GrainPopulation *</type>
      <name>population</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>a2025853c2044b55821496a8747a15ac6</anchor>
      <arglist>(int c) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>populationBulkDensity</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>a2de97eeb430f82c7bb2fa4810b9b64d9</anchor>
      <arglist>(int c) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>populationGrainType</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>a096922bf605fa3768a2750f77a5465b0</anchor>
      <arglist>(int c) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>populationMass</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>ac8d34f0fab26d4a9d822cab76776a4e9</anchor>
      <arglist>(int c) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>populationNormalization</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>a56f2dc943d218d6a0b889cfa5a45cd2f</anchor>
      <arglist>(int c) const</arglist>
    </member>
    <member kind="function">
      <type>const GrainSizeDistribution *</type>
      <name>populationSizeDistribution</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>ad9a52cb07d7fadf410619d8ea90d5efe</anchor>
      <arglist>(int c) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>populationSizeRange</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>acd00a8cceabd0cccaea96f0d8113781e</anchor>
      <arglist>(int c) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalMass</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>ad245e86dba1b2b68f2ad3d575ca64f13</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiGrainDustMix</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>aa6b93e16ef3c5a4dc4db527778a3520d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPopulation</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>ac5027185e413e964df205fe8807d6711</anchor>
      <arglist>(const GrainPopulation *population)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPopulation</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>a54282d606eae1112164e6676badfc18e</anchor>
      <arglist>(GrainComposition *composition, GrainSizeDistribution *sizeDistribution, int numSizes, GrainPopulation::NormalizationType normType, double normValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getOpticalProperties</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>ae48363dcedd4c5b32e7a3ceaefb9479b</anchor>
      <arglist>(const Array &amp;lambdav, const Array &amp;thetav, Array &amp;sigmaabsv, Array &amp;sigmascav, Array &amp;asymmparv, Table&lt; 2 &gt; &amp;S11vv, Table&lt; 2 &gt; &amp;S12vv, Table&lt; 2 &gt; &amp;S33vv, Table&lt; 2 &gt; &amp;S34vv, ArrayTable&lt; 2 &gt; &amp;sigmaabsvv, ArrayTable&lt; 2 &gt; &amp;sigmaabspolvv) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>initializeExtraProperties</name>
      <anchorfile>class_multi_grain_dust_mix.html</anchorfile>
      <anchor>a6919bc2233f751cb4c38c2da8860fd7a</anchor>
      <arglist>(const Array &amp;lambdav) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiGrainPopulationInterface</name>
    <filename>class_multi_grain_population_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiGrainPopulationInterface</name>
      <anchorfile>class_multi_grain_population_interface.html</anchorfile>
      <anchor>a0ef631f8e3adfebe966f640ed81ab229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numPopulations</name>
      <anchorfile>class_multi_grain_population_interface.html</anchorfile>
      <anchor>a474c8990058432dba2809648c0f9316f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>populationBulkDensity</name>
      <anchorfile>class_multi_grain_population_interface.html</anchorfile>
      <anchor>a93e9c9f126519318786cd508f9c5e4fc</anchor>
      <arglist>(int c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual string</type>
      <name>populationGrainType</name>
      <anchorfile>class_multi_grain_population_interface.html</anchorfile>
      <anchor>a72971e58c056771b689517e20c2fb766</anchor>
      <arglist>(int c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>populationMass</name>
      <anchorfile>class_multi_grain_population_interface.html</anchorfile>
      <anchor>acfc784dd3374c6d1a238ca4af972a4f9</anchor>
      <arglist>(int c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const GrainSizeDistribution *</type>
      <name>populationSizeDistribution</name>
      <anchorfile>class_multi_grain_population_interface.html</anchorfile>
      <anchor>afd51bc5f6c4ba189d417d24efbc1a2cb</anchor>
      <arglist>(int c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Range</type>
      <name>populationSizeRange</name>
      <anchorfile>class_multi_grain_population_interface.html</anchorfile>
      <anchor>a74bab586c2c55f95706fbf6065163e66</anchor>
      <arglist>(int c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>totalMass</name>
      <anchorfile>class_multi_grain_population_interface.html</anchorfile>
      <anchor>ab9671bf2dac6a9f1e7df5e5d033cb710</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiGrainPopulationInterface</name>
      <anchorfile>class_multi_grain_population_interface.html</anchorfile>
      <anchor>a8519207666ef1487ec945bf61b9374f2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiHybridParallel</name>
    <filename>class_multi_hybrid_parallel.html</filename>
    <base>MultiParallel</base>
    <member kind="function">
      <type></type>
      <name>~MultiHybridParallel</name>
      <anchorfile>class_multi_hybrid_parallel.html</anchorfile>
      <anchor>a8c4286375140bab5a8adf38ee57be1a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>class_multi_hybrid_parallel.html</anchorfile>
      <anchor>af6a34c4ccb62152a672947d5317c12a5</anchor>
      <arglist>(size_t maxIndex, std::function&lt; void(size_t firstIndex, size_t numIndices)&gt; target) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MultiHybridParallel</name>
      <anchorfile>class_multi_hybrid_parallel.html</anchorfile>
      <anchor>a9ab87919cdefcf8012eb43dddf62cb24</anchor>
      <arglist>(int threadCount)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doSomeWork</name>
      <anchorfile>class_multi_hybrid_parallel.html</anchorfile>
      <anchor>a65a1db4a5c488c2659d73e2754592b59</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiParallel</name>
    <filename>class_multi_parallel.html</filename>
    <base>Parallel</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>activateThreads</name>
      <anchorfile>class_multi_parallel.html</anchorfile>
      <anchor>a6803108b529c26e6ad1862fa981450b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>constructThreads</name>
      <anchorfile>class_multi_parallel.html</anchorfile>
      <anchor>aac6bd970042a64d4788c683474f08355</anchor>
      <arglist>(int numThreads)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>destroyThreads</name>
      <anchorfile>class_multi_parallel.html</anchorfile>
      <anchor>ab9930745970542cc859b0a73215b5aff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numThreads</name>
      <anchorfile>class_multi_parallel.html</anchorfile>
      <anchor>a362f744b3440b89f4842a2330ca4c185</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>waitForThreads</name>
      <anchorfile>class_multi_parallel.html</anchorfile>
      <anchor>a01060e00165667dcb5e4c93cb23421f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual bool</type>
      <name>doSomeWork</name>
      <anchorfile>class_multi_parallel.html</anchorfile>
      <anchor>aa92042f134b9f491ef104e8cb5bb2a16</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reportException</name>
      <anchorfile>class_multi_parallel.html</anchorfile>
      <anchor>ac4f8f4f6af5999ae747afac81e93cb64</anchor>
      <arglist>(FatalError *exception)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>run</name>
      <anchorfile>class_multi_parallel.html</anchorfile>
      <anchor>a0d1bee0f7ba65538d48543c8c1c2b3f0</anchor>
      <arglist>(int threadIndex)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>threadsActive</name>
      <anchorfile>class_multi_parallel.html</anchorfile>
      <anchor>a786fdd98a9d5009b61cbda350ea0eba7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiPropertyWizardPane</name>
    <filename>class_multi_property_wizard_pane.html</filename>
    <member kind="slot">
      <type>void</type>
      <name>hierarchyWasChanged</name>
      <anchorfile>class_multi_property_wizard_pane.html</anchorfile>
      <anchor>a9be91061489eec789b242479435e5389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>setPropertyValid</name>
      <anchorfile>class_multi_property_wizard_pane.html</anchorfile>
      <anchor>a3570becae8d53c7213caf19a80d30632</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>multiPropertyValidChanged</name>
      <anchorfile>class_multi_property_wizard_pane.html</anchorfile>
      <anchor>ae94a954c5816267b1a0e35d5b06f4ac2</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>multiPropertyValueChanged</name>
      <anchorfile>class_multi_property_wizard_pane.html</anchorfile>
      <anchor>a7a40b7ad87bcf52e0849b22467f4da65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiPropertyWizardPane</name>
      <anchorfile>class_multi_property_wizard_pane.html</anchorfile>
      <anchor>a0eba08ecbf7014d23ee8c2059cec6785</anchor>
      <arglist>(QObject *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPane</name>
      <anchorfile>class_multi_property_wizard_pane.html</anchorfile>
      <anchor>ae2d5c762649271a32b38518a0d7a96de</anchor>
      <arglist>(PropertyWizardPane *pane)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>showEvent</name>
      <anchorfile>class_multi_property_wizard_pane.html</anchorfile>
      <anchor>a18ddc55b8791a7eacd906b6dd1663dea</anchor>
      <arglist>(QShowEvent *event) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>emitValidity</name>
      <anchorfile>class_multi_property_wizard_pane.html</anchorfile>
      <anchor>a05d92de4ebc3b0416367e9f30f61f8e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateVisibility</name>
      <anchorfile>class_multi_property_wizard_pane.html</anchorfile>
      <anchor>aae6b65de8e6588f3cf757a9b6493b83a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiThreadParallel</name>
    <filename>class_multi_thread_parallel.html</filename>
    <base>MultiParallel</base>
    <member kind="function">
      <type></type>
      <name>~MultiThreadParallel</name>
      <anchorfile>class_multi_thread_parallel.html</anchorfile>
      <anchor>a52c5d4d056fc50694b3ee3a2f7f260d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>class_multi_thread_parallel.html</anchorfile>
      <anchor>a6d8280dbe63191ac5b74cceebbd621fb</anchor>
      <arglist>(size_t maxIndex, std::function&lt; void(size_t firstIndex, size_t numIndices)&gt; target) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>doSomeWork</name>
      <anchorfile>class_multi_thread_parallel.html</anchorfile>
      <anchor>a2d0508e5012572329975011adb76a0dc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MultiThreadParallel</name>
      <anchorfile>class_multi_thread_parallel.html</anchorfile>
      <anchor>af78dff8f2b141aba82977d1623535cfe</anchor>
      <arglist>(int threadCount)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NameManager</name>
    <filename>class_name_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>NameManager</name>
      <anchorfile>class_name_manager.html</anchorfile>
      <anchor>a9119616bef8d7d6bd7c8968c5db9ff2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAll</name>
      <anchorfile>class_name_manager.html</anchorfile>
      <anchor>ac999278a438790b87e737266626c3af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateBoolean</name>
      <anchorfile>class_name_manager.html</anchorfile>
      <anchor>abffb302d0aced4d40be683d8a4930db0</anchor>
      <arglist>(string expression) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>evaluateConditionalValue</name>
      <anchorfile>class_name_manager.html</anchorfile>
      <anchor>a2a9874f5775f5298f8ea54d5029044df</anchor>
      <arglist>(string expression) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>class_name_manager.html</anchorfile>
      <anchor>ad44a81b557d70ae808e1f6344a8a0c74</anchor>
      <arglist>(const vector&lt; string &gt; &amp;names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>class_name_manager.html</anchorfile>
      <anchor>a4fa2640fce0f2e29abbf980506263f6e</anchor>
      <arglist>(string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertFromConditionalValue</name>
      <anchorfile>class_name_manager.html</anchorfile>
      <anchor>a51a6ae9a096056423367c590747cc3d5</anchor>
      <arglist>(const vector&lt; string &gt; &amp;nameExpressions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertFromConditionalValue</name>
      <anchorfile>class_name_manager.html</anchorfile>
      <anchor>aaff10a8524936f7917d57fc300f52a34</anchor>
      <arglist>(string nameExpression)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popLocal</name>
      <anchorfile>class_name_manager.html</anchorfile>
      <anchor>a3b4a6c5c6762b83392c4d368dd06ed98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushLocal</name>
      <anchorfile>class_name_manager.html</anchorfile>
      <anchor>a0f6a3e41dbadd986d2609df25f37a69b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NestedLogWavelengthGrid</name>
    <filename>class_nested_log_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="function">
      <type>double</type>
      <name>maxWavelengthBaseGrid</name>
      <anchorfile>class_nested_log_wavelength_grid.html</anchorfile>
      <anchor>adf580d255a95d1a21d927726c18cd31a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxWavelengthSubGrid</name>
      <anchorfile>class_nested_log_wavelength_grid.html</anchorfile>
      <anchor>a2328b4300298343bab2b61d4f1a465da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWavelengthBaseGrid</name>
      <anchorfile>class_nested_log_wavelength_grid.html</anchorfile>
      <anchor>a42a4d08635366b734c8337e10dd47ad1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWavelengthSubGrid</name>
      <anchorfile>class_nested_log_wavelength_grid.html</anchorfile>
      <anchor>a03257f50c3c7b656e0736f389b98fdfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numWavelengthsBaseGrid</name>
      <anchorfile>class_nested_log_wavelength_grid.html</anchorfile>
      <anchor>a39534c60ac0d978bb95ea63ac912cd3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numWavelengthsSubGrid</name>
      <anchorfile>class_nested_log_wavelength_grid.html</anchorfile>
      <anchor>a3ff86b6b8ad2bca513aea6096e137499</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NestedLogWavelengthGrid</name>
      <anchorfile>class_nested_log_wavelength_grid.html</anchorfile>
      <anchor>ae09c614d5c58ef36e986466c5d33a81f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_nested_log_wavelength_grid.html</anchorfile>
      <anchor>a487a900d2b7cfd05803437a7e4b2354d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetzerAngularDistribution</name>
    <filename>class_netzer_angular_distribution.html</filename>
    <base>AxAngularDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>generateInclinationCosine</name>
      <anchorfile>class_netzer_angular_distribution.html</anchorfile>
      <anchor>ad3a2d3d19921860d7be07f2f51183879</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probabilityForInclinationCosine</name>
      <anchorfile>class_netzer_angular_distribution.html</anchorfile>
      <anchor>a85aefd10db3d964adb41c4e513114512</anchor>
      <arglist>(double costheta) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NetzerAngularDistribution</name>
      <anchorfile>class_netzer_angular_distribution.html</anchorfile>
      <anchor>adba27b1037ba01cc2bd8ab3053a942ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_netzer_angular_distribution.html</anchorfile>
      <anchor>a477d2401b0b1d5ecda76764752d0d106</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NonLTELineGasMix</name>
    <filename>class_non_l_t_e_line_gas_mix.html</filename>
    <base>EmittingGasMix</base>
    <class kind="struct">NonLTELineGasMix::ColPartner</class>
    <member kind="enumeration">
      <type></type>
      <name>Species</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>af62e1d0c3f8d9692efaff50217abe795</anchor>
      <arglist></arglist>
      <enumvalue file="class_non_l_t_e_line_gas_mix.html" anchor="af62e1d0c3f8d9692efaff50217abe795a0cbc6611f5540bd0809a388dc95a615b">Test</enumvalue>
      <enumvalue file="class_non_l_t_e_line_gas_mix.html" anchor="af62e1d0c3f8d9692efaff50217abe795ab9fe7fe0828859c5b488a2ca2eebdbaf">Hydroxyl</enumvalue>
      <enumvalue file="class_non_l_t_e_line_gas_mix.html" anchor="af62e1d0c3f8d9692efaff50217abe795af5317bfdb2e8aefbeeb774247530675b">Formyl</enumvalue>
      <enumvalue file="class_non_l_t_e_line_gas_mix.html" anchor="af62e1d0c3f8d9692efaff50217abe795ac7910502f37024e833fd21b85d14e160">CarbonMonoxide</enumvalue>
      <enumvalue file="class_non_l_t_e_line_gas_mix.html" anchor="af62e1d0c3f8d9692efaff50217abe795ab471e7463030ef64c89db2efd0f4471f">AtomicCarbon</enumvalue>
      <enumvalue file="class_non_l_t_e_line_gas_mix.html" anchor="af62e1d0c3f8d9692efaff50217abe795a34f1e07f69d20563d2478b9b59410156">IonizedCarbon</enumvalue>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>defaultCollisionPartnerRatios</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a968a3e9b784ee73d0352e6fbfcab7d57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>defaultTemperature</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a9c72ff4947e0ec093559771281fb0602</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>defaultTurbulenceVelocity</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a6019432d61fc5256c9b1adc44469ef49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DynamicStateType</type>
      <name>hasDynamicMediumState</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>ab17f3ea4aac6317ae881ff179036290d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasExtraSpecificState</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a40a62858c86ea1dd4e4b4b3445c2d1b3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLineEmission</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>aaaa730d770012ffe5be58de7a81b5019</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNegativeExtinction</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>af138508ff9ab834b1ef6c9db0113f50a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeTemperature</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a048ffc49a703a8d7a3bab04ea2ea0ea9</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSpecificState</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>ac679dfc65835b6d04ba80f54811e335f</anchor>
      <arglist>(MaterialState *state, double metallicity, double temperature, const Array &amp;params) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>initialLevelPopsFilename</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a078ab8e4ce8542f8d73b2f6a243535f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSpecificStateConverged</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a7e84442838b393968efc6a07bd8bf6a2</anchor>
      <arglist>(int numCells, int numUpdated, int numNotConverged) const override</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>lineEmissionCenters</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a367281886cdb32147b9cdcf83c0eab70</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>lineEmissionMasses</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a0008f329496e835479dc89cae7954630</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>lineEmissionSpectrum</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>af9ace702cf8e9ba3b289626ef1d9ec40</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>adf54877de0ec63093c2c0beca92a5857</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxChangeInLevelPopulations</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a844d1641aaca3ef97b0bd6eedbdae165</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxFractionNotConvergedCells</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>ad1a8c71ea8f22d5ec30e32a32a3a29f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numEnergyLevels</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a7f1e79f9172b64cad67f537e79342176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityAbs</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a0d8bc2bc39e9df9cdfc448346088d67b</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a904dcd904e7ff5e8b1c21f045e387848</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacitySca</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a05eb189ca287d7a5401b76d38be092a4</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a89fefd1091143d6778c7b11f5e5521d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peeloffScattering</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>ad679e844af493bc22774399d7538c1fa</anchor>
      <arglist>(double &amp;I, double &amp;Q, double &amp;U, double &amp;V, double &amp;lambda, Direction bfkobs, Direction bfky, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performScattering</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>ad981cd420480d1c5350f8504a521309e</anchor>
      <arglist>(double lambda, const MaterialState *state, PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionAbs</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a99562e1fd4d7c90f2dd29064f495d5e0</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionExt</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>ab5fa4f006245e6daaadf385465973688</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionSca</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a35e4eed4ae471f93a4896112bde1fae5</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>Species</type>
      <name>species</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>ab43f3281cadc4bd7695d10eda11d2f65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; StateVariable &gt;</type>
      <name>specificStateVariableInfo</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a0e583d992374d90831cc51f858c20e03</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>storeMeanIntensities</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a28e0af91afacacc5b65154a6695ba4b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UpdateStatus</type>
      <name>updateSpecificState</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>a6bceff8d2cd86a148ddaecbc239ff59f</anchor>
      <arglist>(MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NonLTELineGasMix</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>aadb75918712b90143b3b9a5d50b74c0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_non_l_t_e_line_gas_mix.html</anchorfile>
      <anchor>ab4b55cc2c10f80ecdfc90376af2d5237</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NonLTELineGasMix::ColPartner</name>
    <filename>struct_non_l_t_e_line_gas_mix_1_1_col_partner.html</filename>
  </compound>
  <compound kind="class">
    <name>NoPolarizationProfile</name>
    <filename>class_no_polarization_profile.html</filename>
    <base>PolarizationProfile</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_no_polarization_profile.html</anchorfile>
      <anchor>a97ad17a735f43b6e90225cab4d1b89cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StokesVector</type>
      <name>polarizationForDirection</name>
      <anchorfile>class_no_polarization_profile.html</anchorfile>
      <anchor>a8771a391e2ca8b8437e5d3ee8543fd51</anchor>
      <arglist>(Direction bfk) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NoPolarizationProfile</name>
      <anchorfile>class_no_polarization_profile.html</anchorfile>
      <anchor>a0feb6ca0f1071f2bdd21c518b18d1d39</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NormalizedSource</name>
    <filename>class_normalized_source.html</filename>
    <base>Source</base>
    <member kind="function">
      <type>void</type>
      <name>launch</name>
      <anchorfile>class_normalized_source.html</anchorfile>
      <anchor>a06911ecb7760f76fc727173a83e7ac28</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double L) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>launchNormalized</name>
      <anchorfile>class_normalized_source.html</anchorfile>
      <anchor>ac3c68dfab3294dad070f2e5c0c88c244</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double lambda, double Lw) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>luminosity</name>
      <anchorfile>class_normalized_source.html</anchorfile>
      <anchor>ad5350eb64a150cab76fb7ad33853fd4c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>LuminosityNormalization *</type>
      <name>normalization</name>
      <anchorfile>class_normalized_source.html</anchorfile>
      <anchor>adbd010a8778ea80e01e0501a8474c911</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SED *</type>
      <name>sed</name>
      <anchorfile>class_normalized_source.html</anchorfile>
      <anchor>aff7c95d640e1937b172739ff15202e1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_normalized_source.html</anchorfile>
      <anchor>a2d910041f303bbab14cd726282f8c319</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_normalized_source.html</anchorfile>
      <anchor>a9aa886898c8174a12404d730cac75f22</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NormalizedSource</name>
      <anchorfile>class_normalized_source.html</anchorfile>
      <anchor>afee1c89d3b14eb65535cb513100d179c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_normalized_source.html</anchorfile>
      <anchor>ac3ad0a03605c2119b99b06b98f48b277</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_normalized_source.html</anchorfile>
      <anchor>a2dda2df7161ef6a2503ce069ecef0c9f</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NR</name>
    <filename>class_n_r.html</filename>
    <member kind="function" static="yes">
      <type>static Array</type>
      <name>array</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a6efc3fc9cd1a6320da136d63a24afce2</anchor>
      <arglist>(const V &amp;sourcev)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>assign</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a1f2137bec739d0565ca0b8dbe10db6d1</anchor>
      <arglist>(Array &amp;targetv, const V &amp;sourcev)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>assign</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>af92c5514f7f16b5171622aaa6805a3b4</anchor>
      <arglist>(Array &amp;targetv, Values... values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>buildLinearGrid</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a867e7f3478687805488929a3a1605b7f</anchor>
      <arglist>(Array &amp;xv, double xmin, double xmax, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>buildLogGrid</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a45cb8f99765df8bcaa0737caf3620c1b</anchor>
      <arglist>(Array &amp;xv, double xmin, double xmax, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>buildPowerLawGrid</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>ace7b8551e7841db17dc00e89f52b4b84</anchor>
      <arglist>(Array &amp;xv, double xmin, double xmax, int n, double ratio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>buildSymmetricPowerLawGrid</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a973896a61dd2352eb4ec5fe2d5528d8b</anchor>
      <arglist>(Array &amp;xv, double xmin, double xmax, int n, double ratio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>buildZeroLogGrid</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>adcf836bd28a4570a7765acfc1769609a</anchor>
      <arglist>(Array &amp;xv, double xmin, double xmax, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>cdf</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>af707b25a521d097745e8d931653aab7f</anchor>
      <arglist>(Array &amp;Pv, const Array &amp;pv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>cdf</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a182b3c366b06a2447b6cb24bbe573c45</anchor>
      <arglist>(Array &amp;Pv, int n, Functor pv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>cdf</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>aa0e94b9bdeb6bf4a2877ccdeae16bceb</anchor>
      <arglist>(Array &amp;xv, Array &amp;pv, Array &amp;Pv, const Array &amp;inxv, const Array &amp;inpv, Range xrange)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>cdf2</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a7f575245fa37448d1f08073fafd2118e</anchor>
      <arglist>(bool loglog, const Array &amp;xv, Array &amp;pv, Array &amp;Pv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array</type>
      <name>clampedResample</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>adc40028c81bbc32c3139e42cb8456314</anchor>
      <arglist>(const Array &amp;xresv, const Array &amp;xoriv, const Array &amp;yoriv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>clampedValue</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a05e81d8649a25723525a9e07ea0370de</anchor>
      <arglist>(double x, const Array &amp;xv, const Array &amp;yv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>interpolateLinLin</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>aec4c3d53d7b341cfe34990d076d30896</anchor>
      <arglist>(double x, double x1, double x2, double f1, double f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>interpolateLogLin</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a5a6f0d8953d0fb7d225503352c0a31ac</anchor>
      <arglist>(double x, double x1, double x2, double f1, double f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>interpolateLogLog</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a09cd39dffa1c9d096f4d421539fdc71f</anchor>
      <arglist>(double x, double x1, double x2, double f1, double f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>locate</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>aaab07464da5f1ed20017995cd21ac467</anchor>
      <arglist>(const Array &amp;xv, double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>locate</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a12026a9d0a3a996ae61bb2956d6b582d</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;xv, const T &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>locateBasicImpl</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>af15f6c1428860cdd4b33102d8a6345aa</anchor>
      <arglist>(const Array &amp;xv, double x, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>locateClip</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a5a5db87c51da287a9003d1c117c6d203</anchor>
      <arglist>(const Array &amp;xv, double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>locateFail</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a3972f5a1e1e5bbb805854992a1c8d49f</anchor>
      <arglist>(const Array &amp;xv, double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array</type>
      <name>resample</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>af1fcc6326dad87d62dec7834eb2cbbac</anchor>
      <arglist>(const Array &amp;xresv, const Array &amp;xoriv, const Array &amp;yoriv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reverse</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>ad0a11f97b85b9d99cb691a7f272cfcf3</anchor>
      <arglist>(Array &amp;xv, size_t blocksize=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sort</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a7e05b717469b3d70174fdd505e6f6e64</anchor>
      <arglist>(Array &amp;xv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sort</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>a234bca03b5df48c3581af14e5d4c7229</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;xv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unique</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>aecc792ab758e5ec0e02a010db71ce081</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;xv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>value</name>
      <anchorfile>class_n_r.html</anchorfile>
      <anchor>aa5a62a3ca19b431f2f1e3805fd69f7e9</anchor>
      <arglist>(double x, const Array &amp;xv, const Array &amp;yv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NullParallel</name>
    <filename>class_null_parallel.html</filename>
    <base>Parallel</base>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>class_null_parallel.html</anchorfile>
      <anchor>a4596042a951d24f847d933a011cbbaee</anchor>
      <arglist>(size_t maxIndex, std::function&lt; void(size_t firstIndex, size_t numIndices)&gt; target) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>NullParallel</name>
      <anchorfile>class_null_parallel.html</anchorfile>
      <anchor>ae8e6022044a4c9c4edd1977ee5189620</anchor>
      <arglist>(int threadCount)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumberColumnMaterialNormalization</name>
    <filename>class_number_column_material_normalization.html</filename>
    <base>AxisMaterialNormalization</base>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>numberAndMass</name>
      <anchorfile>class_number_column_material_normalization.html</anchorfile>
      <anchor>a831dd454fa44b801c2db42389508ad61</anchor>
      <arglist>(const Geometry *geom, const MaterialMix *mix) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numberColumnDensity</name>
      <anchorfile>class_number_column_material_normalization.html</anchorfile>
      <anchor>a4407f31a5e8331d5c88ee315d71bda28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NumberColumnMaterialNormalization</name>
      <anchorfile>class_number_column_material_normalization.html</anchorfile>
      <anchor>aed78cec874dfb8e6d32d2e30742e3e11</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumberMaterialNormalization</name>
    <filename>class_number_material_normalization.html</filename>
    <base>MaterialNormalization</base>
    <member kind="function">
      <type>double</type>
      <name>number</name>
      <anchorfile>class_number_material_normalization.html</anchorfile>
      <anchor>a1d4b25852d0462baa39fea3b5d637106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>numberAndMass</name>
      <anchorfile>class_number_material_normalization.html</anchorfile>
      <anchor>adb2f76bae17ccb4f3bab41a1a2ea8e74</anchor>
      <arglist>(const Geometry *geom, const MaterialMix *mix) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NumberMaterialNormalization</name>
      <anchorfile>class_number_material_normalization.html</anchorfile>
      <anchor>a11354f69b4c247d68e8be8ab83fc8c37</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OctTreeNode</name>
    <filename>class_oct_tree_node.html</filename>
    <base>TreeNode</base>
    <member kind="function">
      <type>void</type>
      <name>addNeighbors</name>
      <anchorfile>class_oct_tree_node.html</anchorfile>
      <anchor>a86d4b11f1652b6669f88a4d944c8963f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>TreeNode *</type>
      <name>child</name>
      <anchorfile>class_oct_tree_node.html</anchorfile>
      <anchor>ac0c449c308c7b18ee95d3d07a964d25b</anchor>
      <arglist>(Vec r) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createChildren</name>
      <anchorfile>class_oct_tree_node.html</anchorfile>
      <anchor>a6124ed7e61ab025d7e373b9d7e045fae</anchor>
      <arglist>(int id) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeNode</name>
      <anchorfile>class_oct_tree_node.html</anchorfile>
      <anchor>a88b20de8b88cc626a5b4423247e675f4</anchor>
      <arglist>(const Box &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeNode</name>
      <anchorfile>class_oct_tree_node.html</anchorfile>
      <anchor>af6d3c6ca610a38ac0d31867ffc521c96</anchor>
      <arglist>(TreeNode *parent, int id, const Box &amp;extent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OffsetGeometryDecorator</name>
    <filename>class_offset_geometry_decorator.html</filename>
    <base>Geometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_offset_geometry_decorator.html</anchorfile>
      <anchor>a92dc53e1bc2e88ed384cceec56698387</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_offset_geometry_decorator.html</anchorfile>
      <anchor>a5018a9b200216fb3e73a0ca1abd81c94</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_offset_geometry_decorator.html</anchorfile>
      <anchor>a4cd33112217cc1bbacbbdfed7aa2d88b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>geometry</name>
      <anchorfile>class_offset_geometry_decorator.html</anchorfile>
      <anchor>a119f7309c5bbfe0687ec8fd58e4a80b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offsetX</name>
      <anchorfile>class_offset_geometry_decorator.html</anchorfile>
      <anchor>a2857f0a268fc72ac0410e7a810b991a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offsetY</name>
      <anchorfile>class_offset_geometry_decorator.html</anchorfile>
      <anchor>a3387d1750ad50f2d98244755acef41e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offsetZ</name>
      <anchorfile>class_offset_geometry_decorator.html</anchorfile>
      <anchor>a55a914a1e9ef23b6c97811cb9699972d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_offset_geometry_decorator.html</anchorfile>
      <anchor>a43c988af6ee494735d51d8f87cb98a19</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_offset_geometry_decorator.html</anchorfile>
      <anchor>a4465fd501098448aa3b806e5dc196a81</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_offset_geometry_decorator.html</anchorfile>
      <anchor>ac472a1ff7cd12eea4fb9bb0beb73f481</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OffsetGeometryDecorator</name>
      <anchorfile>class_offset_geometry_decorator.html</anchorfile>
      <anchor>a1e2e347a30fb144f08f2881b76c9613d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OffsetVectorFieldDecorator</name>
    <filename>class_offset_vector_field_decorator.html</filename>
    <base>VectorField</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_offset_vector_field_decorator.html</anchorfile>
      <anchor>aa8797866236b6ceceb84e4acd6f18e3b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offsetX</name>
      <anchorfile>class_offset_vector_field_decorator.html</anchorfile>
      <anchor>ace91a673b5817e49f9e63cc34c15fb95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offsetY</name>
      <anchorfile>class_offset_vector_field_decorator.html</anchorfile>
      <anchor>aeac4649c367ef33d88dadcc02153a6e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offsetZ</name>
      <anchorfile>class_offset_vector_field_decorator.html</anchorfile>
      <anchor>a8ca294765112b102c344e9a8bfe83777</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>vector</name>
      <anchorfile>class_offset_vector_field_decorator.html</anchorfile>
      <anchor>af8fea69236f50e24685fceb9c944d9b9</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorField *</type>
      <name>vectorField</name>
      <anchorfile>class_offset_vector_field_decorator.html</anchorfile>
      <anchor>ab9c37fbc15eba013fcc18ecbf67fe55d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OffsetVectorFieldDecorator</name>
      <anchorfile>class_offset_vector_field_decorator.html</anchorfile>
      <anchor>a1cea20e82291f1af5f8bf77a97fb9140</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OligoWavelengthDistribution</name>
    <filename>class_oligo_wavelength_distribution.html</filename>
    <base>WavelengthDistribution</base>
    <member kind="function">
      <type></type>
      <name>OligoWavelengthDistribution</name>
      <anchorfile>class_oligo_wavelength_distribution.html</anchorfile>
      <anchor>abda23bbb0d32cabe65451c7aa28094b4</anchor>
      <arglist>(OligoWavelengthGrid *wavelengthGrid)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_oligo_wavelength_distribution.html</anchorfile>
      <anchor>a854e15b9b77b304a8f4f7eb2b8098351</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probability</name>
      <anchorfile>class_oligo_wavelength_distribution.html</anchorfile>
      <anchor>a2d4f27d7a05fa433d0d445ce96cc0eef</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OligoWavelengthGrid</name>
    <filename>class_oligo_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="function">
      <type></type>
      <name>OligoWavelengthGrid</name>
      <anchorfile>class_oligo_wavelength_grid.html</anchorfile>
      <anchor>a5e3bb99155dcdb88904f1e89f45b909c</anchor>
      <arglist>(SimulationItem *parent, const vector&lt; double &gt; &amp;wavelengths)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_oligo_wavelength_grid.html</anchorfile>
      <anchor>af1c89b4dc5b0f1f38ca0d2da953c8a2a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpacityProbe</name>
    <filename>class_opacity_probe.html</filename>
    <base>SpatialGridWhenFormProbe</base>
    <base>MaterialWavelengthRangeInterface</base>
    <member kind="enumeration">
      <type></type>
      <name>Aggregation</name>
      <anchorfile>class_opacity_probe.html</anchorfile>
      <anchor>aa713d07f4f89b4ec73e21158f2817715</anchor>
      <arglist></arglist>
      <enumvalue file="class_opacity_probe.html" anchor="aa713d07f4f89b4ec73e21158f2817715a2cb05e4bb7830be982f0922fed86b4cd">Component</enumvalue>
      <enumvalue file="class_opacity_probe.html" anchor="aa713d07f4f89b4ec73e21158f2817715aa1fa27779242b4902f7ae3bdd5c6d508">Type</enumvalue>
      <enumvalue file="class_opacity_probe.html" anchor="aa713d07f4f89b4ec73e21158f2817715aa45da96d0bf6575970f2d27af22be28a">System</enumvalue>
    </member>
    <member kind="function">
      <type>Aggregation</type>
      <name>aggregation</name>
      <anchorfile>class_opacity_probe.html</anchorfile>
      <anchor>a60100b5d397599295839ddc01273213d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_opacity_probe.html</anchorfile>
      <anchor>ae2b19e6457996038a63bde6ac9a432d4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelength</name>
      <anchorfile>class_opacity_probe.html</anchorfile>
      <anchor>a262a712edec50d117ba007e3531984e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_opacity_probe.html</anchorfile>
      <anchor>a9aed77ea125051cce1dfb5db77d1b541</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OpacityProbe</name>
      <anchorfile>class_opacity_probe.html</anchorfile>
      <anchor>aabdbf4202295fd028fef3ca26ce58d8d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenWizardPane</name>
    <filename>class_open_wizard_pane.html</filename>
    <member kind="slot">
      <type>void</type>
      <name>open</name>
      <anchorfile>class_open_wizard_pane.html</anchorfile>
      <anchor>ab2c13a996f1c65049f7982333ad214c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>hierarchyWasLoaded</name>
      <anchorfile>class_open_wizard_pane.html</anchorfile>
      <anchor>a059190e8cd3b885bf812a9e6d202c0fa</anchor>
      <arglist>(Item *root, QString filepath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenWizardPane</name>
      <anchorfile>class_open_wizard_pane.html</anchorfile>
      <anchor>a48b311bbd59c48095d18ed9f191d6b12</anchor>
      <arglist>(const SchemaDef *schema, QString filepath, bool dirty, QObject *target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpticalDepthMaterialNormalization</name>
    <filename>class_optical_depth_material_normalization.html</filename>
    <base>AxisMaterialNormalization</base>
    <base>MaterialWavelengthRangeInterface</base>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>numberAndMass</name>
      <anchorfile>class_optical_depth_material_normalization.html</anchorfile>
      <anchor>a475083b6d7805e1b45f166be07a8b9af</anchor>
      <arglist>(const Geometry *geom, const MaterialMix *mix) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opticalDepth</name>
      <anchorfile>class_optical_depth_material_normalization.html</anchorfile>
      <anchor>aeb7496d5c6bd3cb3b973188c4535c5f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelength</name>
      <anchorfile>class_optical_depth_material_normalization.html</anchorfile>
      <anchor>a24eb5fe594aa7dccdfde079981620260</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_optical_depth_material_normalization.html</anchorfile>
      <anchor>a6d38877b70e3cee773335e8175765cbc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OpticalDepthMaterialNormalization</name>
      <anchorfile>class_optical_depth_material_normalization.html</anchorfile>
      <anchor>aea2b87c33201c9907c0a4cdc668b3fc3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpticalMaterialPropertiesProbe</name>
    <filename>class_optical_material_properties_probe.html</filename>
    <base>SpecialtyWavelengthGridProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>OpticalMaterialPropertiesProbe</name>
      <anchorfile>class_optical_material_properties_probe.html</anchorfile>
      <anchor>a1b29d531f1e47824976b178581498de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_optical_material_properties_probe.html</anchorfile>
      <anchor>a51445d645766aa0f7061c3b7fcca722e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParaboloidGeometry</name>
    <filename>class_paraboloid_geometry.html</filename>
    <base>AxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_paraboloid_geometry.html</anchorfile>
      <anchor>a4ede872150c8fa87bebcc63a97a50c3b</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_paraboloid_geometry.html</anchorfile>
      <anchor>ad74ffbeb0bf3e9ff4920a57aaca6f2ca</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offsetZ</name>
      <anchorfile>class_paraboloid_geometry.html</anchorfile>
      <anchor>a1235b5a173ec8a69ab587ab35a9ed4ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>openingAngle</name>
      <anchorfile>class_paraboloid_geometry.html</anchorfile>
      <anchor>a5750cede6a3c964ce297bf28a6e2636e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radialExtent</name>
      <anchorfile>class_paraboloid_geometry.html</anchorfile>
      <anchor>a37b4a81cf03f326f1548be728cab15d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_paraboloid_geometry.html</anchorfile>
      <anchor>a457399a905bf784b8ec23e3cefa672e8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_paraboloid_geometry.html</anchorfile>
      <anchor>a5c74dc276fdb02ac702f7e32bca38dd8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParaboloidGeometry</name>
      <anchorfile>class_paraboloid_geometry.html</anchorfile>
      <anchor>a2c6845535a4c5527c337216ca24b72ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_paraboloid_geometry.html</anchorfile>
      <anchor>a6c484fb270ab33299b0ff3396f083ab7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParaboloidShellGeometry</name>
    <filename>class_paraboloid_shell_geometry.html</filename>
    <base>AxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_paraboloid_shell_geometry.html</anchorfile>
      <anchor>afea6db12429aae13ff196cbd6ae79440</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_paraboloid_shell_geometry.html</anchorfile>
      <anchor>ad9de691b7989cf35f0de6870b61f8025</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>innerOffsetZ</name>
      <anchorfile>class_paraboloid_shell_geometry.html</anchorfile>
      <anchor>a1b85254802ea117122744be593bc98b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>innerOpeningAngle</name>
      <anchorfile>class_paraboloid_shell_geometry.html</anchorfile>
      <anchor>a9062dc0106c0dab53ef9a536d693b8fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>innerRadialExtent</name>
      <anchorfile>class_paraboloid_shell_geometry.html</anchorfile>
      <anchor>a24c76f79fd2d7d6657670dedb6b025b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>outerOffsetZ</name>
      <anchorfile>class_paraboloid_shell_geometry.html</anchorfile>
      <anchor>ae3ac82a796fa3dc692252c88c4d0a23b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>outerOpeningAngle</name>
      <anchorfile>class_paraboloid_shell_geometry.html</anchorfile>
      <anchor>ad1ce67ba69d637839a70e19a570c6a53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_paraboloid_shell_geometry.html</anchorfile>
      <anchor>af4ba1dde82b9d15629e660d6ada8c1a6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_paraboloid_shell_geometry.html</anchorfile>
      <anchor>a9094a882ce9057287d5d39e59852d36e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParaboloidShellGeometry</name>
      <anchorfile>class_paraboloid_shell_geometry.html</anchorfile>
      <anchor>a1fa3134547001283e554bc14a829dad1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_paraboloid_shell_geometry.html</anchorfile>
      <anchor>a7e99ce25ecfe1455e5f7927400386fb6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Parallel</name>
    <filename>class_parallel.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Parallel</name>
      <anchorfile>class_parallel.html</anchorfile>
      <anchor>a7c166edb46d01fe87d07f8c9c5387600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>class_parallel.html</anchorfile>
      <anchor>a55f229f6758693d44189c1caa5a84acc</anchor>
      <arglist>(size_t maxIndex, std::function&lt; void(size_t firstIndex, size_t numIndices)&gt; target)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Parallel</name>
      <anchorfile>class_parallel.html</anchorfile>
      <anchor>a8aa97948de88463387591e5c9bc537ea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParallelFactory</name>
    <filename>class_parallel_factory.html</filename>
    <base>SimulationItem</base>
    <member kind="enumeration">
      <type></type>
      <name>TaskMode</name>
      <anchorfile>class_parallel_factory.html</anchorfile>
      <anchor>add4997aea91e00f4477bb4ede7a03f11</anchor>
      <arglist></arglist>
      <enumvalue file="class_parallel_factory.html" anchor="add4997aea91e00f4477bb4ede7a03f11a8c16cbebef45d87fd2b36ce69f46c526">Distributed</enumvalue>
      <enumvalue file="class_parallel_factory.html" anchor="add4997aea91e00f4477bb4ede7a03f11a8766f64142237e2db2335b76e8f8de0c">RootOnly</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelFactory</name>
      <anchorfile>class_parallel_factory.html</anchorfile>
      <anchor>a735c2d718e51c4a2d39ea63fa922cd2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelFactory</name>
      <anchorfile>class_parallel_factory.html</anchorfile>
      <anchor>aacaee187fea71d8f1d04c15e63322243</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParallelFactory</name>
      <anchorfile>class_parallel_factory.html</anchorfile>
      <anchor>a88afa6b2611e8c5ce8250a3bc3197c7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxThreadCount</name>
      <anchorfile>class_parallel_factory.html</anchorfile>
      <anchor>ad6498c29039823c239920fb0e19ba3b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parallel *</type>
      <name>parallel</name>
      <anchorfile>class_parallel_factory.html</anchorfile>
      <anchor>a592a1fdc9b3ea289e817cd8bced4b6f5</anchor>
      <arglist>(TaskMode mode, int maxThreadCount=0)</arglist>
    </member>
    <member kind="function">
      <type>Parallel *</type>
      <name>parallelDistributed</name>
      <anchorfile>class_parallel_factory.html</anchorfile>
      <anchor>a7f14edae7cbe32ed314ccacd3065d9e1</anchor>
      <arglist>(int maxThreadCount=0)</arglist>
    </member>
    <member kind="function">
      <type>Parallel *</type>
      <name>parallelRootOnly</name>
      <anchorfile>class_parallel_factory.html</anchorfile>
      <anchor>af03f486a1933f335083418199883af54</anchor>
      <arglist>(int maxThreadCount=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxThreadCount</name>
      <anchorfile>class_parallel_factory.html</anchorfile>
      <anchor>acfaad58ccbf79d9ce0aa5e139a55b6a0</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>defaultThreadCount</name>
      <anchorfile>class_parallel_factory.html</anchorfile>
      <anchor>a1aa036f80f7817c0c5c2e7418b864a5f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParallelProjectionForm</name>
    <filename>class_parallel_projection_form.html</filename>
    <base>GenericForm</base>
    <member kind="function">
      <type>double</type>
      <name>azimuth</name>
      <anchorfile>class_parallel_projection_form.html</anchorfile>
      <anchor>a37ae21961cff163002e90524a8aefb59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>centerX</name>
      <anchorfile>class_parallel_projection_form.html</anchorfile>
      <anchor>a2b9ac72ad7157c20f67e31ab60aa2b26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>centerY</name>
      <anchorfile>class_parallel_projection_form.html</anchorfile>
      <anchor>abc44682b5ced6f4986744cc7eeeba7fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fieldOfViewX</name>
      <anchorfile>class_parallel_projection_form.html</anchorfile>
      <anchor>ae9dd22c2dca26a8a27cacf3f258762af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fieldOfViewY</name>
      <anchorfile>class_parallel_projection_form.html</anchorfile>
      <anchor>adce5a63992522d8a3d77d512b9b3b690</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inclination</name>
      <anchorfile>class_parallel_projection_form.html</anchorfile>
      <anchor>ac8fc1d193f9c6a47a199e93efd45235e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsX</name>
      <anchorfile>class_parallel_projection_form.html</anchorfile>
      <anchor>a5869597164e34f4939540590c6872292</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsY</name>
      <anchorfile>class_parallel_projection_form.html</anchorfile>
      <anchor>a8af42b83d98a2e06db53bf78ed97f42f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>roll</name>
      <anchorfile>class_parallel_projection_form.html</anchorfile>
      <anchor>a088c3a8e2cbaccefee739157c250a95d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_parallel_projection_form.html</anchorfile>
      <anchor>a6a6e2fb20787ccc22ccd49b79f8fd352</anchor>
      <arglist>(const ProbeFormBridge *bridge) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParallelProjectionForm</name>
      <anchorfile>class_parallel_projection_form.html</anchorfile>
      <anchor>a4e0f0d15c60f431a782ea45ddde2c281</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParticleGeometry</name>
    <filename>class_particle_geometry.html</filename>
    <base>ImportedGeometry</base>
    <member kind="function">
      <type>SmoothingKernel *</type>
      <name>smoothingKernel</name>
      <anchorfile>class_particle_geometry.html</anchorfile>
      <anchor>acb96c6a3b7b22caad946dd5a86eab6c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleGeometry</name>
      <anchorfile>class_particle_geometry.html</anchorfile>
      <anchor>a1f2b54e297889b5a33ee2e6fdd882f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_particle_geometry.html</anchorfile>
      <anchor>acabf5c33463b34299c5137f0915f489d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParticleMedium</name>
    <filename>class_particle_medium.html</filename>
    <base>ImportedMedium</base>
    <member kind="enumeration">
      <type></type>
      <name>MassType</name>
      <anchorfile>class_particle_medium.html</anchorfile>
      <anchor>afb7e86ca9a1cde46e3668eb51cf272b6</anchor>
      <arglist></arglist>
      <enumvalue file="class_particle_medium.html" anchor="afb7e86ca9a1cde46e3668eb51cf272b6aff2864d6f652ee0ac254814f1ae4f4a8">Mass</enumvalue>
      <enumvalue file="class_particle_medium.html" anchor="afb7e86ca9a1cde46e3668eb51cf272b6ab2ee912b91d69b435159c7c3f6df7f5f">Number</enumvalue>
    </member>
    <member kind="function">
      <type>MassType</type>
      <name>massType</name>
      <anchorfile>class_particle_medium.html</anchorfile>
      <anchor>a4f1972049f7a228ae3fd5ed846aa56d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SmoothingKernel *</type>
      <name>smoothingKernel</name>
      <anchorfile>class_particle_medium.html</anchorfile>
      <anchor>a366bcdddba0ff8c728bfcf685d31a94f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleMedium</name>
      <anchorfile>class_particle_medium.html</anchorfile>
      <anchor>abc33a8e25cb95f7769e60b22341bd1ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_particle_medium.html</anchorfile>
      <anchor>a57cd65cc68d7828dfb8eaf6b59ff4bad</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParticleSnapshot</name>
    <filename>class_particle_snapshot.html</filename>
    <base>Snapshot</base>
    <member kind="function">
      <type></type>
      <name>ParticleSnapshot</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a8f518a0f35c11b6e6d97b1893119f86a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParticleSnapshot</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>adcfc241fb30fe857430a869c6a2d379e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a8ecfe778899bc9d2fdc29829fc310550</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a3cdd646c2d47ead8bf0a9ad304333df9</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>extent</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a253c7ada0958e9f4110e27173933a368</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a35bb670cc3c58b9a2b6e80606c0b6cd2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a1788f9487f87795c0abce50673616fc1</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntities</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a9b5d8c036168f94753263fa1c2c2f003</anchor>
      <arglist>(EntityCollection &amp;entities, Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntities</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a29a5dde55af7c21cdd311c95beb49303</anchor>
      <arglist>(EntityCollection &amp;entities, Position bfr, Direction bfk) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a1a9c6de203cc1bdf4a603b8deb207e4b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numEntities</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a932ffe9179105a5001340173ed9683c4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>position</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a7cebafe30a50b7df10eddf77d49f48b1</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAndClose</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>abe4cf07f1d38d684066ddd4741186083</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSmoothingKernel</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a3029685e54fc30e797870675a32e5b05</anchor>
      <arglist>(const SmoothingKernel *kernel)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a4de80c4c0d08cba2c01d6088dda3d0ad</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>nearestEntity</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>a241b317c8a9ea8a7ae835834ff73cf2e</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Array &amp;</type>
      <name>properties</name>
      <anchorfile>class_particle_snapshot.html</anchorfile>
      <anchor>abeac6703074fa677784e4c480537e3d0</anchor>
      <arglist>(int m) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParticleSource</name>
    <filename>class_particle_source.html</filename>
    <base>ImportedSource</base>
    <member kind="function">
      <type>SmoothingKernel *</type>
      <name>smoothingKernel</name>
      <anchorfile>class_particle_source.html</anchorfile>
      <anchor>aa8078ddb647c85ab6e283c8951db080e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleSource</name>
      <anchorfile>class_particle_source.html</anchorfile>
      <anchor>aa1e93e26106dce56a5dbf08e4cdd34c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_particle_source.html</anchorfile>
      <anchor>afbe2e2cfbe2c63804b72d982ec08d199</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PathSegmentGenerator</name>
    <filename>class_path_segment_generator.html</filename>
    <member kind="function">
      <type></type>
      <name>PathSegmentGenerator</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>aceed7e6a6788d8caea5f6ab8c78b5073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathSegmentGenerator</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a3a957ffe85959b18bf1ad0a6c3842f1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ds</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>abd2f5e4635ad1aba2a594b0d9b4805bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>m</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a258c06087c4e884d697600cca0c8a473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>next</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a43291ee72ad37367b704f08fbc5a333c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a6cb508f40a8c4b809b52dab498a4ed05</anchor>
      <arglist>(const SpatialGridPath *path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a250a8377a3aedc7c42bef60942cb19fa</anchor>
      <arglist>(Position bfr, Direction bfk)</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>State</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>af9df5351030c4a2b59bc2f4604a9df56</anchor>
      <arglist></arglist>
      <enumvalue file="class_path_segment_generator.html" anchor="af9df5351030c4a2b59bc2f4604a9df56a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="class_path_segment_generator.html" anchor="af9df5351030c4a2b59bc2f4604a9df56a9b6d3000134648fc9f1e71094ae0847d">Inside</enumvalue>
      <enumvalue file="class_path_segment_generator.html" anchor="af9df5351030c4a2b59bc2f4604a9df56a76fbf0ccd7fcd64879c2ff2119dc15a4">Outside</enumvalue>
    </member>
    <member kind="function" protection="protected">
      <type>Direction</type>
      <name>k</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>ae29d6de3164a1e627272caa29bf874fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>kx</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a8306707d357e5ba3f2eac605e3b23648</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>ky</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a73556452f0f089c9faf4e2e6ddf5bc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>kz</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a15a8663d9243db3260af9f321feb20d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>moveInside</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a86f189cc73c653d49b401f5131546a25</anchor>
      <arglist>(const Box &amp;box, double eps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>propagater</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>afcbab35384e914f91683e71a5b9e0e38</anchor>
      <arglist>(double ds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>propagaterx</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a8379fac808bfc9d5e627e914e991d84d</anchor>
      <arglist>(double ds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>propagatery</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a0274c0cfc27a7ad8080b272d10af55a9</anchor>
      <arglist>(double ds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>propagaterz</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a3095abaee73cb6d9c5c2e1bd1721feb4</anchor>
      <arglist>(double ds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>propagateToNextAfter</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a733f34bca05aebfde2e53bdf4ae430f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Position</type>
      <name>r</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a5ddea5a43f0976e10d97d6b2b58f2244</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>rx</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a83871f8d58e25ac4bfee6492debd4f74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>ry</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>ae7fb25a7648f56afb4f9d0708a0f3088</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>rz</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>af0c9916583618ea034fecd55b25d7e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setEmptySegment</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>ad4ee517dcf0e8298cf7c2e4036f9ee76</anchor>
      <arglist>(double ds=0.)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setrx</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a68626223d0ac32e3a24eb9055d89abf8</anchor>
      <arglist>(double rx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setry</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>afd8add092f25634820fa376af375fcba</anchor>
      <arglist>(double ry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setrz</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a32687d63929c7eae97aa74bc48e8d7d7</anchor>
      <arglist>(double rz)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSegment</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>a655c2b2ecaa091c4e37f173dc4bf0f13</anchor>
      <arglist>(int m, double ds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setState</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>ac9d391635a7a8fa06c1c26471c07a64f</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>State</type>
      <name>state</name>
      <anchorfile>class_path_segment_generator.html</anchorfile>
      <anchor>aed3071845e3c624c5c409f16139d719f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PerCellForm</name>
    <filename>class_per_cell_form.html</filename>
    <base>SpatialGridForm</base>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_per_cell_form.html</anchorfile>
      <anchor>ac5934ed5a9e77d7585f3478e5da29b97</anchor>
      <arglist>(const ProbeFormBridge *bridge) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PerCellForm</name>
      <anchorfile>class_per_cell_form.html</anchorfile>
      <anchor>a640e75de0de426649b5a3e06dd22bd09</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PerspectiveInstrument</name>
    <filename>class_perspective_instrument.html</filename>
    <base>Instrument</base>
    <member kind="function">
      <type>Direction</type>
      <name>bfkobs</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a7cf060b771491460580245452cd27776</anchor>
      <arglist>(const Position &amp;bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>bfky</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a774ca8c32bd495f397fadfae9b9af253</anchor>
      <arglist>(const Position &amp;bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossX</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a6963b66d795b51075053b41b88003576</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossY</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a214fb84a3fcc60f74cabca4da73b26e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>crossZ</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a61255f03f361b27368a61fec7a9c9ad3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>determineSameObserverAsPreceding</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>af88723ed6231b33d5b958c9d7f5d1f8f</anchor>
      <arglist>(const Instrument *precedingInstrument) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>focal</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a9fcc9481362e65cf1e87a62ad52657dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsX</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a806eff82c05d2e89987bb88f1650a07d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsY</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a494c5e4b605bd87a584d122881c66780</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upX</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>ae99c124cdc39a17e0ff458547fcc86d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upY</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a1bf2f2538b88113abaf69b1ca1e66495</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>upZ</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>aca209c001a821e35897c35b7a7dcab1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>viewX</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a54ca6546391b3cb36adf03ee268c2503</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>viewY</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a3adaef0b2f23bc32ed9d9f0d860c4197</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>viewZ</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>ad1267326bb1318227bdfb44a7894a639</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>width</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>ae1ad120bc75451d247a2c203e945db13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PerspectiveInstrument</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a04a814aaae6e52bd74db1e78d86a8adf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>detect</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a3f81281cd13e4b76514c6d15309a2344</anchor>
      <arglist>(PhotonPacket *pp) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_perspective_instrument.html</anchorfile>
      <anchor>a19ba2479935526c3a93fc8d6b048fdb9</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhotonPacket</name>
    <filename>class_photon_packet.html</filename>
    <base>SpatialGridPath</base>
    <base>StokesVector</base>
    <class kind="class">PhotonPacket::ScatteringInfo</class>
    <member kind="function">
      <type></type>
      <name>PhotonPacket</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a5035d4803eafe450628369393af88bd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBias</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>ad69efe3ce81e03e5a74ae50d1d085288</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compIndex</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a90b16975b4cde66c5e6e490f80c2ea11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScatteringInfo *</type>
      <name>getScatteringInfo</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a8af9b6506f9db2d73b2522a96e3db53d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObservedOpticalDepth</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a9bf050228fc9b05da758421ac5cdb80a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPrimaryOrigin</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>aa14bb2951c50105eea7e7e5e4548bb15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSecondaryOrigin</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>ad071af958a881af962bcf4b87bf8632c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>historyIndex</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a39e338526a6d48a33f13a0863096b3f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launch</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>aebe537ded7c5be10f508e17aded0a565</anchor>
      <arglist>(size_t historyIndex, double lambda, double L, Position bfr, Direction bfk, VelocityInterface *bvi=nullptr, AngularDistributionInterface *adi=nullptr, PolarizationProfileInterface *ppi=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launchEmissionPeelOff</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a9faad62b6c07375418536d8595815b5d</anchor>
      <arglist>(const PhotonPacket *pp, Direction bfk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launchScatteringPeelOff</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a2b05bfb80dbe805da06f1f9a13888ffe</anchor>
      <arglist>(const PhotonPacket *pp, Direction bfk, Vec bfv, double lambda, double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>luminosity</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>addb34bc7e160c0a8e4575703b3bd9750</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numScatt</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a60f2c8cf6fc9d48c650c76132e3781dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>observedOpticalDepth</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>accba1353ceb428f7edc3b9529cbe98cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perceivedLuminosity</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>af51d3698719613c0d1f407d04b4383aa</anchor>
      <arglist>(double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perceivedWavelength</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a324325c270a54cf8a4690058df8b67fb</anchor>
      <arglist>(Vec receiverVelocity, double expansionVelocity) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagate</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a936e0b523c81df58c7f9d455fdd4cb25</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatter</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>aea5007a032b0f52574bbe4fb0d9a39a5</anchor>
      <arglist>(Direction bfk, Vec bfv, double lambda)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObservedOpticalDepth</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a381f66cd477a980bf5a16345869ad1d3</anchor>
      <arglist>(double tau)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrimaryOrigin</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>aa97599b4b0a53ef6812f24e1b4403d19</anchor>
      <arglist>(int sourceCompIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScatteringComponent</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a231e54bac091b0d324ccb26df01790ac</anchor>
      <arglist>(int h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSecondaryOrigin</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a75ce72aa1105721b9421bce44960e51f</anchor>
      <arglist>(int mediumCompIndex)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sourceRestFrameWavelength</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a9c67c36a18d5a8e16bf38cd7337c5d8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelength</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a41db1c339a47a438a2c53e7d12c0520a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shiftedEmissionWavelength</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>a678ac5563ef4836217aadab3dd6094c6</anchor>
      <arglist>(double sourceWavelength, Direction photonDirection, Vec sourceVelocity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shiftedReceptionWavelength</name>
      <anchorfile>class_photon_packet.html</anchorfile>
      <anchor>aacd9a21ea9898f7bb23c92db56e1e3d1</anchor>
      <arglist>(double photonWavelength, Direction photonDirection, Vec receiverVelocity, double expansionVelocity=0.)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhotonPacket::ScatteringInfo</name>
    <filename>class_photon_packet_1_1_scattering_info.html</filename>
  </compound>
  <compound kind="class">
    <name>PhotonPacketOptions</name>
    <filename>class_photon_packet_options.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>bool</type>
      <name>explicitAbsorption</name>
      <anchorfile>class_photon_packet_options.html</anchorfile>
      <anchor>a4b8548d23c2fb91de51b7869ef7ddbed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>forceScattering</name>
      <anchorfile>class_photon_packet_options.html</anchorfile>
      <anchor>aa7bbcf5610e49ad5c048813a9eb0ae52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>minScattEvents</name>
      <anchorfile>class_photon_packet_options.html</anchorfile>
      <anchor>a2f3e6d44e23396ff995eb198c33301bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWeightReduction</name>
      <anchorfile>class_photon_packet_options.html</anchorfile>
      <anchor>a11aee363686e5bf92fc4c5e28debbb62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pathLengthBias</name>
      <anchorfile>class_photon_packet_options.html</anchorfile>
      <anchor>a2e29dd468a1bb916243239da11bf46e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhotonPacketOptions</name>
      <anchorfile>class_photon_packet_options.html</anchorfile>
      <anchor>ae2934d789ebac4426b3b59ed9132df69</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlanarCutsForm</name>
    <filename>class_planar_cuts_form.html</filename>
    <base>GenericForm</base>
    <member kind="function">
      <type>double</type>
      <name>maxX</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>abb99e9850059a56cae145d19ef5293dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxY</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>ac272d1577879bc01652936c0352f1e64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxZ</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>a5db45af80e7e0f5d5b516ddb54625329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minX</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>aebbd43fc64aef965f650a6e4766ac66d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minY</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>a57a0575cb5d0a7955c9dd21510d3bfe3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minZ</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>a6c0a37bd823ebe5f6e72dd76191bb897</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsX</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>a0eae7ddc5ef821783ecc33588bdf1438</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsY</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>aa51d9f3bb6e7bcd0a8c950ddef1614f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsZ</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>acee8641f8ee5de27f8fc0ce2aeadc048</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>positionX</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>afb4a1ae102289ede6428e52a4148e0c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>positionY</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>af53d9d4dab227824a063d31cb0f700ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>positionZ</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>a0dd7db6fd036634bd3fedebd378aca85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>a1d06bf4b380445434dc397513829d88b</anchor>
      <arglist>(const ProbeFormBridge *bridge) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writePlanarCut</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>a80fb2499f6f13d39f4b9c49b23574fbe</anchor>
      <arglist>(const ProbeFormBridge *bridge, bool xd, bool yd, bool zd, const Box &amp;box, double xp, double yp, double zp, int xn, int yn, int zn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlanarCutsForm</name>
      <anchorfile>class_planar_cuts_form.html</anchorfile>
      <anchor>ae33eb21a8be034a39b984440a4be5779</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlanckFunction</name>
    <filename>class_planck_function.html</filename>
    <member kind="function">
      <type></type>
      <name>PlanckFunction</name>
      <anchorfile>class_planck_function.html</anchorfile>
      <anchor>a264df2f1eb3737f8201656be0468c474</anchor>
      <arglist>(double T)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_planck_function.html</anchorfile>
      <anchor>abda7858a8820e3c1f9a6970561d20ae7</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, Range lambdaRange) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>class_planck_function.html</anchorfile>
      <anchor>a82f29b4c58ecbd7f3b9bc85b7f23bcd1</anchor>
      <arglist>(double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>class_planck_function.html</anchorfile>
      <anchor>a24f034396616cc0093a7feff3cba4322</anchor>
      <arglist>(double lambda) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlummerGeometry</name>
    <filename>class_plummer_geometry.html</filename>
    <base>SpheGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_plummer_geometry.html</anchorfile>
      <anchor>ae6f25a754669435675a77211f0070687</anchor>
      <arglist>(double r) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomRadius</name>
      <anchorfile>class_plummer_geometry.html</anchorfile>
      <anchor>a2dfb970c1aacd70c6754cf3caf4ba7ed</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleLength</name>
      <anchorfile>class_plummer_geometry.html</anchorfile>
      <anchor>af6ad163d0c059df0bb7b175a055297fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sigmar</name>
      <anchorfile>class_plummer_geometry.html</anchorfile>
      <anchor>a28e44e5d0607800d7567b7ff5fc0a133</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlummerGeometry</name>
      <anchorfile>class_plummer_geometry.html</anchorfile>
      <anchor>ac4be6ce8bd4d3f555cf798929dfd9232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_plummer_geometry.html</anchorfile>
      <anchor>a0f68754a68df5815ea18d07cdea07dcb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PointSource</name>
    <filename>class_point_source.html</filename>
    <base>SpecialtySource</base>
    <member kind="function">
      <type>AngularDistribution *</type>
      <name>angularDistribution</name>
      <anchorfile>class_point_source.html</anchorfile>
      <anchor>ab1019b2909647d20c6d1cbf07c917c45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>geometryDimension</name>
      <anchorfile>class_point_source.html</anchorfile>
      <anchor>aa90fb308f451d4eec7218dc14b3a0e61</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launchSpecialty</name>
      <anchorfile>class_point_source.html</anchorfile>
      <anchor>ac6c055c4e607a9c9e7ec996836650e44</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double lambda, double Lw, VelocityInterface *bvi) const override</arglist>
    </member>
    <member kind="function">
      <type>PolarizationProfile *</type>
      <name>polarizationProfile</name>
      <anchorfile>class_point_source.html</anchorfile>
      <anchor>a1831c16cda4f10e88eba3107568c116f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>positionX</name>
      <anchorfile>class_point_source.html</anchorfile>
      <anchor>a641ff8b7c69829030a832504395dee66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>positionY</name>
      <anchorfile>class_point_source.html</anchorfile>
      <anchor>a5ec481f07affc347ff05a3544e9b9365</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>positionZ</name>
      <anchorfile>class_point_source.html</anchorfile>
      <anchor>a7b865d71a025f689742c83aab9afaee0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointSource</name>
      <anchorfile>class_point_source.html</anchorfile>
      <anchor>ac9660cf7185bac42e5807956e8ed9c96</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PolarizationProfile</name>
    <filename>class_polarization_profile.html</filename>
    <base>SimulationItem</base>
    <base>PolarizationProfileInterface</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dimension</name>
      <anchorfile>class_polarization_profile.html</anchorfile>
      <anchor>acca165e282e1d0721fc0e443a04ed695</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolarizationProfile</name>
      <anchorfile>class_polarization_profile.html</anchorfile>
      <anchor>a2f3da6adaac832f4d9aed75e1b3541a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PolarizationProfileInterface</name>
    <filename>class_polarization_profile_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PolarizationProfileInterface</name>
      <anchorfile>class_polarization_profile_interface.html</anchorfile>
      <anchor>ae4623f7ca4535f3f8adb24c42c84947c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StokesVector</type>
      <name>polarizationForDirection</name>
      <anchorfile>class_polarization_profile_interface.html</anchorfile>
      <anchor>a7141a4dcd96a6a40e1f059155e16746b</anchor>
      <arglist>(Direction bfk) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolarizationProfileInterface</name>
      <anchorfile>class_polarization_profile_interface.html</anchorfile>
      <anchor>a98a5ba42c984309328cdf078946baa3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PolarizedGraphiteGrainComposition</name>
    <filename>class_polarized_graphite_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_polarized_graphite_grain_composition.html</anchorfile>
      <anchor>a0ae85f9992f7dd28eb832b88f9e1d334</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_polarized_graphite_grain_composition.html</anchorfile>
      <anchor>ae50ffc461a77905f2ff27eee17510e8a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_polarized_graphite_grain_composition.html</anchorfile>
      <anchor>a04c973b206b740ffa4a8009885d1cfc7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForMuellerMatrix</name>
      <anchorfile>class_polarized_graphite_grain_composition.html</anchorfile>
      <anchor>a73cc059cc67a6bb89f5fffb600445423</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_polarized_graphite_grain_composition.html</anchorfile>
      <anchor>a1fca0ce41f5a608c24e9140d30ca0c59</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolarizedGraphiteGrainComposition</name>
      <anchorfile>class_polarized_graphite_grain_composition.html</anchorfile>
      <anchor>ab389d5ca0f760b6caa487f3c21847860</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PolarizedSilicateGrainComposition</name>
    <filename>class_polarized_silicate_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_polarized_silicate_grain_composition.html</anchorfile>
      <anchor>a67033b45ca2dd0d2520c384de194334f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_polarized_silicate_grain_composition.html</anchorfile>
      <anchor>a1d77134d9c6040725ffddce3729f09e4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_polarized_silicate_grain_composition.html</anchorfile>
      <anchor>a7a69c69c38b0b843160ef75474fb51ca</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForMuellerMatrix</name>
      <anchorfile>class_polarized_silicate_grain_composition.html</anchorfile>
      <anchor>ae302558dca8f0f2e6c1f9623b24c1cb9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_polarized_silicate_grain_composition.html</anchorfile>
      <anchor>a87ef3706d2a715ec098c267d03ee6dae</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolarizedSilicateGrainComposition</name>
      <anchorfile>class_polarized_silicate_grain_composition.html</anchorfile>
      <anchor>a61dc811cbdbb592a475aab516348f910</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PolicyTreeSpatialGrid</name>
    <filename>class_policy_tree_spatial_grid.html</filename>
    <base>TreeSpatialGrid</base>
    <member kind="enumeration">
      <type></type>
      <name>TreeType</name>
      <anchorfile>class_policy_tree_spatial_grid.html</anchorfile>
      <anchor>a1d8174d694982473fbf1cd0724423604</anchor>
      <arglist></arglist>
      <enumvalue file="class_policy_tree_spatial_grid.html" anchor="a1d8174d694982473fbf1cd0724423604ab381f9c2e977b1633c1f5e1948d3f3b4">OctTree</enumvalue>
      <enumvalue file="class_policy_tree_spatial_grid.html" anchor="a1d8174d694982473fbf1cd0724423604af183015f42be6d039f7ef89c2cfe940f">BinTree</enumvalue>
    </member>
    <member kind="function">
      <type>TreePolicy *</type>
      <name>policy</name>
      <anchorfile>class_policy_tree_spatial_grid.html</anchorfile>
      <anchor>a8312c54119b3d6066515dd016ee8612e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TreeType</type>
      <name>treeType</name>
      <anchorfile>class_policy_tree_spatial_grid.html</anchorfile>
      <anchor>a0796f21d9fb9c3fbc61ff9c54a9bb4e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolicyTreeSpatialGrid</name>
      <anchorfile>class_policy_tree_spatial_grid.html</anchorfile>
      <anchor>a552956b78cea26bcdfa4c7acae9ca199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vector&lt; TreeNode * &gt;</type>
      <name>constructTree</name>
      <anchorfile>class_policy_tree_spatial_grid.html</anchorfile>
      <anchor>a7185a90d37e19579228c6637d76bd906</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PolygonShape</name>
    <filename>class_polygon_shape.html</filename>
    <base>CenterShape</base>
    <member kind="function">
      <type>bool</type>
      <name>align</name>
      <anchorfile>class_polygon_shape.html</anchorfile>
      <anchor>a19b8b43393a3d7252a686bfbbdfe7418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSides</name>
      <anchorfile>class_polygon_shape.html</anchorfile>
      <anchor>ae7dbf914b17d3277bc60e6df96e9c2f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radius</name>
      <anchorfile>class_polygon_shape.html</anchorfile>
      <anchor>a2f9c86d6e4f291a68c1a738f46d94f9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolygonShape</name>
      <anchorfile>class_polygon_shape.html</anchorfile>
      <anchor>abf8ad5d68bdf66d263a79bc80229bc62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintSelf</name>
      <anchorfile>class_polygon_shape.html</anchorfile>
      <anchor>ad019631dfa3e5d9381504458069fc1e2</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Position</name>
    <filename>class_position.html</filename>
    <base>Vec</base>
    <member kind="enumeration">
      <type></type>
      <name>CoordinateSystem</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>aae1d801319e4aec11083a6e0ccdf0fbb</anchor>
      <arglist></arglist>
      <enumvalue file="class_position.html" anchor="aae1d801319e4aec11083a6e0ccdf0fbbac02304094f2866a43251b12946a9a21b">CARTESIAN</enumvalue>
      <enumvalue file="class_position.html" anchor="aae1d801319e4aec11083a6e0ccdf0fbbaf6840fd287b44b1616267bd19305909a">CYLINDRICAL</enumvalue>
      <enumvalue file="class_position.html" anchor="aae1d801319e4aec11083a6e0ccdf0fbba7f7d7e3a21bf7decf99d6fd26848772d">SPHERICAL</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>a369a577425f8ba02e8750d04b6a088db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>ade0e76e56e7d0cab08be8ea72258b338</anchor>
      <arglist>(Direction bfk)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>a222dd995992240fff3bfd3eb403bbca5</anchor>
      <arglist>(double r, Direction bfk)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>ad4979b93bbfea5b9d66a556106f13211</anchor>
      <arglist>(double u, double v, double w, CoordinateSystem coordtype)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>a039074b4b66e3b570ea2f4e14583b0e0</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>aab7f3f14257cf8c959bd595b6f60fced</anchor>
      <arglist>(Vec r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartesian</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>acc6ae57489ffd3c54bd9bc801853c951</anchor>
      <arglist>(double &amp;x, double &amp;y, double &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cylindrical</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>adc84419b0e8774a935116d5c90aebc6c</anchor>
      <arglist>(double &amp;R, double &amp;phi, double &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cylRadius</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>a6d5ca765239731b096462a222c245872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>height</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>ad004070f5e4d0a5a36d9e865c426f7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radius</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>a29145aa08785d83cd1ed81f27b31c4db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spherical</name>
      <anchorfile>class_position.html</anchorfile>
      <anchor>aead6715f7bed937df40f9bd227ec1db7</anchor>
      <arglist>(double &amp;r, double &amp;theta, double &amp;phi) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PowerLawGrainSizeDistribution</name>
    <filename>class_power_law_grain_size_distribution.html</filename>
    <base>RangeGrainSizeDistribution</base>
    <member kind="function">
      <type></type>
      <name>PowerLawGrainSizeDistribution</name>
      <anchorfile>class_power_law_grain_size_distribution.html</anchorfile>
      <anchor>aecbd3cda7d6bf91fb15be776f6b7c103</anchor>
      <arglist>(SimulationItem *parent, double minSize, double maxSize, double exponent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnda</name>
      <anchorfile>class_power_law_grain_size_distribution.html</anchorfile>
      <anchor>a3d1534d62ac8a0e1646cc0c31a8c3384</anchor>
      <arglist>(double a) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponent</name>
      <anchorfile>class_power_law_grain_size_distribution.html</anchorfile>
      <anchor>ab78a3dfc9a162f72fe4e7f5dfc2e1151</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PowerLawGrainSizeDistribution</name>
      <anchorfile>class_power_law_grain_size_distribution.html</anchorfile>
      <anchor>a27b140a0ad4942273dcb634b2408e9c3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PowMesh</name>
    <filename>class_pow_mesh.html</filename>
    <base>MoveableMesh</base>
    <member kind="function">
      <type>Array</type>
      <name>mesh</name>
      <anchorfile>class_pow_mesh.html</anchorfile>
      <anchor>a950812660cfc472965dc197dc1a5d069</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ratio</name>
      <anchorfile>class_pow_mesh.html</anchorfile>
      <anchor>a2ed3c6632635cbddaec5418fc8909bef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PowMesh</name>
      <anchorfile>class_pow_mesh.html</anchorfile>
      <anchor>affb964394bcba20708588e319abbe7a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PredefinedBandWavelengthGrid</name>
    <filename>class_predefined_band_wavelength_grid.html</filename>
    <base>BandWavelengthGrid</base>
    <member kind="function">
      <type>bool</type>
      <name>include2MASS</name>
      <anchorfile>class_predefined_band_wavelength_grid.html</anchorfile>
      <anchor>ab5e81d43bddab5b59830497c21d9c44f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includeGALEX</name>
      <anchorfile>class_predefined_band_wavelength_grid.html</anchorfile>
      <anchor>ab6f7ca57b62bf88425871ff4ffe88ce8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includeHERSCHEL</name>
      <anchorfile>class_predefined_band_wavelength_grid.html</anchorfile>
      <anchor>af9575ff84c20d560e53216edce3ee09b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includeSDSS</name>
      <anchorfile>class_predefined_band_wavelength_grid.html</anchorfile>
      <anchor>a5166ae32dc2ba1d702bdd8fec0da5eca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includeWISE</name>
      <anchorfile>class_predefined_band_wavelength_grid.html</anchorfile>
      <anchor>ae1d1cea86e96dd222b00585a02b1dfd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PredefinedBandWavelengthGrid</name>
      <anchorfile>class_predefined_band_wavelength_grid.html</anchorfile>
      <anchor>a91197d9c485e97d9e69238322e5468c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vector&lt; Band * &gt;</type>
      <name>bandList</name>
      <anchorfile>class_predefined_band_wavelength_grid.html</anchorfile>
      <anchor>a3e1213376690cadf24bc64e4332e28e8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Probe</name>
    <filename>class_probe.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>string</type>
      <name>itemName</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>a262b38556f1036eebef51a1614da040d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iter</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>a10df660952d8e09896f0a7187b5fc547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>probeName</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>a1fa77661f022a24a0295855ea11edc78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probePrimary</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>a48f166e88b57fbfa6f7017a0395cddf3</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probeRun</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>acac61a6c7f7271a21ad1eeba87ad6a76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probeSecondary</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>ae88261ed715ed4b282053a0f7aab00ca</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probeSetup</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>a3e7991eb031cfb9fd48c65d9dec28e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>When</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>a5d1ed7448eda28c7ae3e64d728a62b61</anchor>
      <arglist></arglist>
      <enumvalue file="class_probe.html" anchor="a5d1ed7448eda28c7ae3e64d728a62b61aad2376beebecdcf7846ba973fa1a005b">Setup</enumvalue>
      <enumvalue file="class_probe.html" anchor="a5d1ed7448eda28c7ae3e64d728a62b61ac5301693c4e792bcd5a479ef38fb8f8d">Run</enumvalue>
      <enumvalue file="class_probe.html" anchor="a5d1ed7448eda28c7ae3e64d728a62b61a074de7e7c226d5c60f8af14c20725352">Primary</enumvalue>
      <enumvalue file="class_probe.html" anchor="a5d1ed7448eda28c7ae3e64d728a62b61a0c7d6cf19426e01dcfa32434828ed266">Secondary</enumvalue>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Probe</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>a958304cf599a29251722228c45b305f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>a0be371bf7c59863465c74f74206e4f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>probe</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>a5b0ce1cb7bfa7140ecf816564e62422c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual When</type>
      <name>when</name>
      <anchorfile>class_probe.html</anchorfile>
      <anchor>aec7d07b58e355e55807f850ef46e899e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProbeFormBridge</name>
    <filename>class_probe_form_bridge.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(TextOutFile &amp;outfile)&gt;</type>
      <name>AddColumnDefinitions</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a33a9d3fcae0f54f60150e045a616d5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Array(Position bfr, Direction bfk)&gt;</type>
      <name>CompoundValueAlongPath</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a625d277439e4fdccf680064400654622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Array(Position bfr)&gt;</type>
      <name>CompoundValueAtPosition</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a887f8e52bd449c23a58a52ebbc3b2bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Array(int m)&gt;</type>
      <name>CompoundValueInCell</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>ad07cb52052b6ccf05e9414980bb3f434</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; double(Position bfr, Direction bfk)&gt;</type>
      <name>ScalarValueAlongPath</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a5103dc1790fa7959dc71abc8c7902b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; double(Position bfr)&gt;</type>
      <name>ScalarValueAtPosition</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a32dc7e84f5aa3e55ac04761e6dd35995</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; double(int m)&gt;</type>
      <name>ScalarValueInCell</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>aaa8443c00e1ebb79684c182acea00063</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; double(const Snapshot *snapshot, int m)&gt;</type>
      <name>ScalarValueInEntity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a10a116d66192c7fbfaa9ec6168e3f008</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Vec(Position bfr, Direction bfk)&gt;</type>
      <name>VectorValueAlongPath</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a02782f45276c41577d430e4e9ce8a34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Vec(Position bfr)&gt;</type>
      <name>VectorValueAtPosition</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>ae4a812d4df36214f18783108cba33754</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Vec(int m)&gt;</type>
      <name>VectorValueInCell</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a4c94ea49fb467d3b9aef14cafa45d915</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Vec(const Snapshot *snapshot, int m)&gt;</type>
      <name>VectorValueInEntity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a0f1a3bb455f3c4c0ecfd77ada3b32906</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; double(int m)&gt;</type>
      <name>WeightInCell</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>aac0b2e0d76d1fc627255709917977873</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; double(const Snapshot *snapshot, int m)&gt;</type>
      <name>WeightInEntity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a49349929d66e08cef8b0f4a2702925e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProbeFormBridge</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>aa7a5339f6aa9a9cd0af9c7a5c004d4af</anchor>
      <arglist>(const Probe *probe, const Form *form)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColumnDefinitions</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a168e3701e0e4cf7482cb65c2ce881f89</anchor>
      <arglist>(TextOutFile &amp;outfile) const</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>axis</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a6fe18669cdff0d39741464a655384446</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>axisUnit</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a36439a74f4784fbb73f32604a3a74817</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>description</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>adf5492a4573265172cbe65b98f557ad1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SpatialGrid *</type>
      <name>grid</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>af7864e091a9bed96bfa1aa83f84a142d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>afbd64da76abb117dfd7eb2b4717c949d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numValues</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>ae0a383a06ffbcf92250da27726b868e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>prefix</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a395de0151745ddf301c2a22c3a682ef9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SimulationItem *</type>
      <name>probe</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a9d186aa79c68c7f6da5e6732054e7e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>projectedDescription</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a0dc547a0826bae3e272b3f36e593dd71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>projectedPrefix</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>ab1b1f22da1d1a576238202648ad2f3f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>projectedUnit</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a042f84f83732ca47a4abe9b6d80383ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>unit</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>ac0122505c99d1aa03ef88133faa5b9c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Units *</type>
      <name>units</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a730e03a46bcfd622d682bc9b5da1989f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>valuesAlongPath</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a2ad6ac441c24eb9a2995dd5b57c555a2</anchor>
      <arglist>(Position bfr, Direction bfk, Array &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>valuesAtPosition</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>ac1d648c72ceedccc09844b52885aad27</anchor>
      <arglist>(Position bfr, Array &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>valuesInCell</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a538a61427f0e87d7681c0aeb22f1a507</anchor>
      <arglist>(int m, Array &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a87f8ce2207694a6e46c4fe281a5b68df</anchor>
      <arglist>(string fileid, string projectedFileid, string quantity, string projectedQuantity, string description, string projectedDescription, const vector&lt; const Snapshot * &gt; &amp;snapshots, ScalarValueInEntity valueInEntity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a7bab7c13522b582be15a263274d940eb</anchor>
      <arglist>(string fileid, string projectedFileid, string quantity, string projectedQuantity, string description, string projectedDescription, ScalarValueAtPosition valueAtPosition, ScalarValueAlongPath valueAlongPath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a352c6c253a0f751ea54d47136482b782</anchor>
      <arglist>(string fileid, string projectedFileid, string quantity, string projectedQuantity, string description, string projectedDescription, ScalarValueInCell valueInCell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a8d3e61707ed1e8d6a3b0327d79171138</anchor>
      <arglist>(string fileid, string projectedFileid, string quantity, string projectedQuantity, string description, string projectedDescription, VectorValueAtPosition valueAtPosition, VectorValueAlongPath valueAlongPath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a640f7f3fa678e9c7eb8c031fa6906712</anchor>
      <arglist>(string fileid, string projectedFileid, string unit, string projectedUnit, string description, string projectedDescription, const Array &amp;axis, string axisUnit, AddColumnDefinitions addColumnDefinitions, CompoundValueAtPosition valueAtPosition, CompoundValueAlongPath valueAlongPath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a2b123ea853f655516a8efe1cb2687e5b</anchor>
      <arglist>(string fileid, string quantity, string description, string projectedDescription, const vector&lt; const Snapshot * &gt; &amp;snapshots, ScalarValueInEntity valueInEntity, WeightInEntity weightInEntity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a3692f58278cc1c20acda744c0968eb87</anchor>
      <arglist>(string fileid, string quantity, string description, string projectedDescription, const vector&lt; const Snapshot * &gt; &amp;snapshots, VectorValueInEntity valueInEntity, WeightInEntity weightInEntity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a7c9a7285b2e977735d144ff707fdb105</anchor>
      <arglist>(string fileid, string quantity, string description, string projectedDescription, ScalarValueInCell valueInCell, WeightInCell weightInCell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>a3a45a9caf265ce15cb0d89292ef139c1</anchor>
      <arglist>(string fileid, string quantity, string description, string projectedDescription, VectorValueInCell valueInCell, WeightInCell weightInCell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeQuantity</name>
      <anchorfile>class_probe_form_bridge.html</anchorfile>
      <anchor>acb4babfa14a68e1e93ab79273d0efe42</anchor>
      <arglist>(string fileid, string unit, string description, string projectedDescription, const Array &amp;axis, string axisUnit, AddColumnDefinitions addColumnDefinitions, CompoundValueInCell valueInCell, WeightInCell weightInCell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProbePhotonPacketInterface</name>
    <filename>class_probe_photon_packet_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProbePhotonPacketInterface</name>
      <anchorfile>class_probe_photon_packet_interface.html</anchorfile>
      <anchor>ad7f5614c0b6abcc00af2d49ff93279de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>probePhotonPacket</name>
      <anchorfile>class_probe_photon_packet_interface.html</anchorfile>
      <anchor>ac20ce3a579cfa24fa87e2e975ba8d788</anchor>
      <arglist>(const PhotonPacket *pp)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProbePhotonPacketInterface</name>
      <anchorfile>class_probe_photon_packet_interface.html</anchorfile>
      <anchor>a9b83ccde91a45bf3b0c19c80f2905f73</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProbeSystem</name>
    <filename>class_probe_system.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>void</type>
      <name>probePrimary</name>
      <anchorfile>class_probe_system.html</anchorfile>
      <anchor>a5d50706c3006be24c766a9b303aa6837</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probeRun</name>
      <anchorfile>class_probe_system.html</anchorfile>
      <anchor>a100d35e9f0c2b275b5a4bde69eb10408</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Probe * &gt; &amp;</type>
      <name>probes</name>
      <anchorfile>class_probe_system.html</anchorfile>
      <anchor>abdbada29dfffd8c10ddfe1fc330e516a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probeSecondary</name>
      <anchorfile>class_probe_system.html</anchorfile>
      <anchor>a0fb27ad9a8cc97a19cc0ef0ca757948b</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probeSetup</name>
      <anchorfile>class_probe_system.html</anchorfile>
      <anchor>ab798547c4a54fb1e923dda637a374950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProbeSystem</name>
      <anchorfile>class_probe_system.html</anchorfile>
      <anchor>a19457430d8e4798b1b20a57ddc2ae5e6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProcessManager</name>
    <filename>class_process_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>ProcessManager</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>a3225b46af2a72aee9b281c96b81b518c</anchor>
      <arglist>(const ProcessManager &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProcessManager</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>a1837082dd05c5175a1a853dafc45517f</anchor>
      <arglist>(int *argc, char ***argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProcessManager</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>aed3cd2ca11d92395228b758d39030b5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProcessManager &amp;</type>
      <name>operator=</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>ad1548da345302a1003539715c4308a99</anchor>
      <arglist>(const ProcessManager &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>abort</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>ad58bf2d893a93ab94fe481380a22ea25</anchor>
      <arglist>(int exitcode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>broadcastAllToAll</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>ad20cf7d18dc59779aaf413f8712eb6f4</anchor>
      <arglist>(std::function&lt; void(vector&lt; double &gt; &amp;data)&gt; producer, std::function&lt; void(const vector&lt; double &gt; &amp;data)&gt; consumer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isMultiProc</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>ab359ae83a894f8bec3e0caea946aa53c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isRoot</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>a4e18ef09e30617521e3adc303a2c84fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>rank</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>a98c512d11067e6b2225bef334ac8131b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>requestChunk</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>ae93915610e973993f69a6f1b81026938</anchor>
      <arglist>(size_t &amp;firstIndex, size_t &amp;numIndices)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>serveChunkRequest</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>a16ea28fa01cf7a67512e20f7fd7969ae</anchor>
      <arglist>(int rank, size_t firstIndex, size_t numIndices)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>size</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>aae25b44b3af25b273b02d705cb1061fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sumToAll</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>a6d5effdb060c707c09d3ddd1213653c4</anchor>
      <arglist>(Array &amp;arr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sumToRoot</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>ab0cf459abe275dbb244c535bb2df8639</anchor>
      <arglist>(Array &amp;arr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>wait</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>a632ca9471cce5be30572d32ddab1cbad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>waitForChunkRequest</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>ae5d0fd716cdb9bcdcfeaa5df09038ebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>finalize</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>a5681ea44188c09b714f8f3d491702652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>class_process_manager.html</anchorfile>
      <anchor>ae025c61d3aee647bdbdbf7ea65a227c9</anchor>
      <arglist>(int *argc, char ***argv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Properties</name>
    <filename>class_properties.html</filename>
  </compound>
  <compound kind="class">
    <name>PropertyAccessor</name>
    <filename>class_property_accessor.html</filename>
  </compound>
  <compound kind="class">
    <name>PropertyDef</name>
    <filename>class_property_def.html</filename>
    <member kind="function">
      <type></type>
      <name>PropertyDef</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a5152eb33c266610f6b6c70bc1de1d006</anchor>
      <arglist>(const PropertyDef &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyDef</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>aa122d7fab51a1a04e665902cf51e6059</anchor>
      <arglist>(string type, string name, string title)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropertyDef</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a4ef6f4a3242ea060e4d64e7bae016f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PropertyAccessor *</type>
      <name>accessor</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a038ae53851de54803ec523f8ad5b7b72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnumeration</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a36d49d67662b5dfa23afc3dfb87b7b46</anchor>
      <arglist>(string name, string title)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>base</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>af1316144999bec9f1498bf32d2778df0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>defaultValue</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>ab09ca5f699d0b1d108bc7fa8612f2699</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>displayedIf</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a3f71882794ce1f93c7b8479f67ad6fda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; string &gt; &amp;</type>
      <name>enumNames</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a79eb9400d9ce23b025368896e48961b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>enumTitle</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a5791b2e086ae7fdb6e76b2ca8c553e08</anchor>
      <arglist>(string enumName) const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; string &gt; &amp;</type>
      <name>enumTitles</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a8b14086be3b64e1ee1fd8a75f5756a8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>insert</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a404395a7a7a8c4002a411080c573c797</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>maxValue</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a32ef761abbf2498dd4ede2d25b6658a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>minValue</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a6ea8ecebd34ea8c187b9c37a9ccc88e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a2c8259f1b72a0f2ba2ff76390776867a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PropertyDef &amp;</type>
      <name>operator=</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>adaaea270715b048e00123219b5e7c02a</anchor>
      <arglist>(const PropertyDef &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>quantity</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>ac32466f147aadefd7566b09e1002f060</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>relevantIf</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a5c19eaae8e64ded66c0d0a5103c1c840</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>requiredIf</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a9b4030c4b955755b719aa8ec59717f18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccessor</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a22ea966eec0c11088338977e0a918827</anchor>
      <arglist>(const PropertyAccessor *accessor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBase</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>af7394253d40c154612bc9e7bed0b9c06</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValue</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a84bd2257d618f9f7247e9e43956b83dd</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayedIf</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>ae1332e736dbf942b093bd058a6735185</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInsert</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a4c164f27532b4b554aee140ee80cc67c</anchor>
      <arglist>(string insert)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxValue</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a39cd84d5b315e4a4bcd828332f5f21d0</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinValue</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a15d142afdfbd70baeecbbdbd31809791</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuantity</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a8e6208c2ec5c166c9103dca4be1c0e55</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelevantIf</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a14c321978e335f99976548f204f3c7cb</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRequiredIf</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a992dcfee5144380edd457e49c575aa99</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>title</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a6b7da57326c2dbf4226df1a53c9e0b79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>type</name>
      <anchorfile>class_property_def.html</anchorfile>
      <anchor>a7460db4c3ae159a6a8b81f9b90d4ae61</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyHandler</name>
    <filename>class_property_handler.html</filename>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a842d0c91ab41aee39f48c0b2159ad785</anchor>
      <arglist>(const PropertyHandler &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a70cc449cdf73913e21c3b1951baa6d2c</anchor>
      <arglist>(Item *target, const PropertyDef *property, const SchemaDef *schema, NameManager *nameMgr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertyHandler</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a2fe6bc763f00a62490435df699f1c68a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>acceptVisitor</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>aaf74f41fdf0260c3c83805e4b0d64873</anchor>
      <arglist>(PropertyHandlerVisitor *visitor)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vector&lt; Item * &gt;</type>
      <name>children</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a6229fb2b7dd8202b84d3ee302586cb15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChanged</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a6e4f651a57500b05162005f29a333deb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDefaultValue</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a64eff0cbee0b329333ff4567a48c8652</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertNames</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>af57956e9a9c619670ef7c3537727031c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompound</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>acabcee1ad5893aef81c65f1bae7507ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConfigured</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>ac26ae7eee75812c6923a6c4124cf43ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConfiguredByUser</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a5179cb32604e5a8b5a04adf6ed3d7795</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisplayed</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a512236d2ef02ade49bfd6617fc4b6e41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRelevant</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a94ae05f5c6124ed36949b3d87d4be60d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRequired</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a88ffedb85fdb0701b5dc1b6badb589f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSilent</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a35b71a3bde2124c965c40a071373b08d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isValidValue</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>afb4d276d9bacb798a0d03ebdd3cd5f23</anchor>
      <arglist>(string value) const =0</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a932ecdc6cb3ae046adfdc6211decf364</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NameManager *</type>
      <name>nameManager</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>affe7eb9c048a01752bfa6acd27b7f657</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PropertyHandler &amp;</type>
      <name>operator=</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a8e7ddffcd2088d1503fae125b62b8943</anchor>
      <arglist>(const PropertyHandler &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuildNames</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a5b6757ef19f097c428e80de7886b75fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Item *</type>
      <name>root</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a6a041d5995286c7e3a34d45f87bbea2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SchemaDef *</type>
      <name>schema</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>af2b2d55fa5cef253258e9f6475927051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConfiguredByUser</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>ad5dd88d7a2a34c9bfb565e96e9806c15</anchor>
      <arglist>(bool valid=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConfiguredToDefault</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a94d08c2275b2cd8f040e51138eacf935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNotConfigured</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>ac42a7fe95c31be4b141cf4bdd3d6fafc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>title</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>af52d997c2394c4c37e5d0447f737ca92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>type</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a768c06b86b9a020e07c58ed836959239</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const PropertyDef *</type>
      <name>property</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a45fbffdc48eb820f8f038830de601b77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setChanged</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>a667a47c55d82cc64e08dad13be3d13c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Item *</type>
      <name>target</name>
      <anchorfile>class_property_handler.html</anchorfile>
      <anchor>ac0fb74a2463806b87d2299f728f53b12</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyHandlerVisitor</name>
    <filename>class_property_handler_visitor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertyHandlerVisitor</name>
      <anchorfile>class_property_handler_visitor.html</anchorfile>
      <anchor>a87d71ac8b5a4578f09452ece94ea8805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitPropertyHandler</name>
      <anchorfile>class_property_handler_visitor.html</anchorfile>
      <anchor>abe617630dbe76e7a0012494de3e602ae</anchor>
      <arglist>(BoolPropertyHandler *handler)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitPropertyHandler</name>
      <anchorfile>class_property_handler_visitor.html</anchorfile>
      <anchor>a34e17d75618530a56468a01f4fc0f969</anchor>
      <arglist>(DoubleListPropertyHandler *handler)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitPropertyHandler</name>
      <anchorfile>class_property_handler_visitor.html</anchorfile>
      <anchor>a364c03e818951a3f5e86d4a94ced38a1</anchor>
      <arglist>(DoublePropertyHandler *handler)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitPropertyHandler</name>
      <anchorfile>class_property_handler_visitor.html</anchorfile>
      <anchor>ab1f390dedee9ac4c1b89e83ca0778570</anchor>
      <arglist>(EnumPropertyHandler *handler)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitPropertyHandler</name>
      <anchorfile>class_property_handler_visitor.html</anchorfile>
      <anchor>a5c056ba43a6965eb5174ef6cb2060f92</anchor>
      <arglist>(IntPropertyHandler *handler)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitPropertyHandler</name>
      <anchorfile>class_property_handler_visitor.html</anchorfile>
      <anchor>a088cb15fd8473b0f511e649966f5df61</anchor>
      <arglist>(ItemListPropertyHandler *handler)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitPropertyHandler</name>
      <anchorfile>class_property_handler_visitor.html</anchorfile>
      <anchor>adc983d67e78f0d9ad4125e6cf6e422c6</anchor>
      <arglist>(ItemPropertyHandler *handler)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitPropertyHandler</name>
      <anchorfile>class_property_handler_visitor.html</anchorfile>
      <anchor>affae1cf2cc155f4608e2c4de8d7757c2</anchor>
      <arglist>(StringPropertyHandler *handler)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PropertyHandlerVisitor</name>
      <anchorfile>class_property_handler_visitor.html</anchorfile>
      <anchor>a408233b1d30989e0a83c5a8343986834</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyWizardPane</name>
    <filename>class_property_wizard_pane.html</filename>
    <member kind="signal">
      <type>void</type>
      <name>propertyValidChanged</name>
      <anchorfile>class_property_wizard_pane.html</anchorfile>
      <anchor>ae3a8302d99c1fca9e93396a4602bfa9f</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>propertyValueChanged</name>
      <anchorfile>class_property_wizard_pane.html</anchorfile>
      <anchor>ae040a4e60c7f354513678634d4c43974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyWizardPane</name>
      <anchorfile>class_property_wizard_pane.html</anchorfile>
      <anchor>a2086fe42979848787cb40bb78c518265</anchor>
      <arglist>(std::unique_ptr&lt; PropertyHandler &gt; handler, QObject *target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropertyWizardPane</name>
      <anchorfile>class_property_wizard_pane.html</anchorfile>
      <anchor>afd2e4f2a26d4c22fa44d96d7e8f0b394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertyHandler *</type>
      <name>handler</name>
      <anchorfile>class_property_wizard_pane.html</anchorfile>
      <anchor>aab50ea94d1987a7c05e2e18601f6daf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateInterface</name>
      <anchorfile>class_property_wizard_pane.html</anchorfile>
      <anchor>ac0fbe7834952edf409697750ed55d4a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>QLabel *</type>
      <name>createHeader</name>
      <anchorfile>class_property_wizard_pane.html</anchorfile>
      <anchor>a951b2e2f1cd2ca42a2dcd9c3ee69993a</anchor>
      <arglist>(string text)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T *</type>
      <name>handlerCast</name>
      <anchorfile>class_property_wizard_pane.html</anchorfile>
      <anchor>a0efb4f2c24c2680fb5b405fdb4dfe6d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>showEvent</name>
      <anchorfile>class_property_wizard_pane.html</anchorfile>
      <anchor>abe0dc98dc42abd426efde0b53164b3cd</anchor>
      <arglist>(QShowEvent *event) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PseudoSersicGeometry</name>
    <filename>class_pseudo_sersic_geometry.html</filename>
    <base>SpheGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_pseudo_sersic_geometry.html</anchorfile>
      <anchor>a7b5ba4987ff4de6f7cad6195fbe17dbf</anchor>
      <arglist>(double r) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>effectiveRadius</name>
      <anchorfile>class_pseudo_sersic_geometry.html</anchorfile>
      <anchor>a9c1c79c9e3507eacfc6a59f8b902d5fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>index</name>
      <anchorfile>class_pseudo_sersic_geometry.html</anchorfile>
      <anchor>af1632363d6bf56839481712474579d96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomRadius</name>
      <anchorfile>class_pseudo_sersic_geometry.html</anchorfile>
      <anchor>a9342a85fcf07b0ea7801a757bf694046</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sigmar</name>
      <anchorfile>class_pseudo_sersic_geometry.html</anchorfile>
      <anchor>aee48f78a05e543ce184f4285e477deab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PseudoSersicGeometry</name>
      <anchorfile>class_pseudo_sersic_geometry.html</anchorfile>
      <anchor>a75d5d7ae61850149f5ba7363b78740d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_pseudo_sersic_geometry.html</anchorfile>
      <anchor>a36c8558aeadf55903c96013cdd7183f7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuasarSED</name>
    <filename>class_quasar_s_e_d.html</filename>
    <base>ResourceSED</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>QuasarSED</name>
      <anchorfile>class_quasar_s_e_d.html</anchorfile>
      <anchor>a5515cbf91632faea9ff534e5cad6cf18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>string</type>
      <name>resourceName</name>
      <anchorfile>class_quasar_s_e_d.html</anchorfile>
      <anchor>a263aa033583ebcaa54e542d17b211d8a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadialVectorField</name>
    <filename>class_radial_vector_field.html</filename>
    <base>VectorField</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_radial_vector_field.html</anchorfile>
      <anchor>ab7c9e7b7bc568e2697014cf290683c17</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponent</name>
      <anchorfile>class_radial_vector_field.html</anchorfile>
      <anchor>a058394fd78e72c84bd3491c84ae8ec38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unityRadius</name>
      <anchorfile>class_radial_vector_field.html</anchorfile>
      <anchor>a4a72fb4613e26e1bcf722cd81ca2f46c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>vector</name>
      <anchorfile>class_radial_vector_field.html</anchorfile>
      <anchor>a790c250138f194cd3527a46853fd0f03</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RadialVectorField</name>
      <anchorfile>class_radial_vector_field.html</anchorfile>
      <anchor>a3ae76449e4fc5dccea417d74a63c47c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadiationFieldOptions</name>
    <filename>class_radiation_field_options.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>DisjointWavelengthGrid *</type>
      <name>radiationFieldWLG</name>
      <anchorfile>class_radiation_field_options.html</anchorfile>
      <anchor>ad7b7127c7615c4b21b688350258f9d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>storeRadiationField</name>
      <anchorfile>class_radiation_field_options.html</anchorfile>
      <anchor>ae4a10095ac7931561926412cacfb2878</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RadiationFieldOptions</name>
      <anchorfile>class_radiation_field_options.html</anchorfile>
      <anchor>ae83038e53c3dd8a977640750a7e0b901</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadiationFieldProbe</name>
    <filename>class_radiation_field_probe.html</filename>
    <base>SpatialGridFormProbe</base>
    <member kind="enumeration">
      <type></type>
      <name>ProbeAfter</name>
      <anchorfile>class_radiation_field_probe.html</anchorfile>
      <anchor>a2954bdfb46e373dc016ad17dfb652e97</anchor>
      <arglist></arglist>
      <enumvalue file="class_radiation_field_probe.html" anchor="a2954bdfb46e373dc016ad17dfb652e97ac5301693c4e792bcd5a479ef38fb8f8d">Run</enumvalue>
      <enumvalue file="class_radiation_field_probe.html" anchor="a2954bdfb46e373dc016ad17dfb652e97a074de7e7c226d5c60f8af14c20725352">Primary</enumvalue>
      <enumvalue file="class_radiation_field_probe.html" anchor="a2954bdfb46e373dc016ad17dfb652e97a0c7d6cf19426e01dcfa32434828ed266">Secondary</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_radiation_field_probe.html</anchorfile>
      <anchor>a78188ffa079885c28593a6325984cec4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ProbeAfter</type>
      <name>probeAfter</name>
      <anchorfile>class_radiation_field_probe.html</anchorfile>
      <anchor>a781c5ae8a6dc0fe09bd487a91064a272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeWavelengthGrid</name>
      <anchorfile>class_radiation_field_probe.html</anchorfile>
      <anchor>a7df75d8e206b2c5a44c457d465cff7ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RadiationFieldProbe</name>
      <anchorfile>class_radiation_field_probe.html</anchorfile>
      <anchor>a3ef7a0b3039d9de916347928c4437160</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>When</type>
      <name>when</name>
      <anchorfile>class_radiation_field_probe.html</anchorfile>
      <anchor>aa457becee5d0bd764a7eda8a27889620</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadiationFieldWavelengthGridProbe</name>
    <filename>class_radiation_field_wavelength_grid_probe.html</filename>
    <base>SpecialtyProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>RadiationFieldWavelengthGridProbe</name>
      <anchorfile>class_radiation_field_wavelength_grid_probe.html</anchorfile>
      <anchor>a1a4ca740aa70fde19d98585d1a6ebfe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_radiation_field_wavelength_grid_probe.html</anchorfile>
      <anchor>a665d35f3bfea4cc0821f7eaddf5b1d3e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Random</name>
    <filename>class_random.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>double</type>
      <name>cdfLinLin</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>a1b846db3954bf66d77bbb32b785fd9b7</anchor>
      <arglist>(const Array &amp;xv, const Array &amp;Pv)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cdfLogLog</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>aec5775a9bed9784efe808ecdb08830b9</anchor>
      <arglist>(const Array &amp;xv, const Array &amp;pv, const Array &amp;Pv)</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>direction</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>afa62521ed2d569e05ed3a4a05b5317fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>direction</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>af034901bac4deeb09606358817bfd177</anchor>
      <arglist>(Direction bfk, double costheta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>expon</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>a21f03bfd394d95f4fa1ccadd12342684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponCutoff</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>a4a7334435945cdc6ec7b27859d9a3d58</anchor>
      <arglist>(double xmax)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gauss</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>a051019cad6facbc64e682fd23a9998bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>maxwell</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>aad42d2302fcbac1ee0006ffbeeb94ad9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>adb88837bf7d7e3f83290b28878175fc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>position</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>aceed1754599bceeabe4571fff5fba6b2</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>aa1e59a41bbe553bece55de094a5b4374</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seed</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>add1f5d72b558c2231779f956b12193a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniform</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>ac18f9394bca3edd384a8b4e809ae052c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Random</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>acb76b49c3903a3c4fb67fd216341f08d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_random.html</anchorfile>
      <anchor>a54e9a3c6a59428c88e6e560ea7bfeba3</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Range</name>
    <filename>class_range.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>Range</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a8db7b21770fcff4f0623d96020ad8b4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Range</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a488cc8447494db9202eead24c7181481</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a7745f2ed7579762c9ff5e80dd013c02e</anchor>
      <arglist>(const Range &amp;range) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a4b2448a27da751c1d9355edc01c58a82</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsFuzzy</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a25f54b1253c7b5aa8457ed79d21cad46</anchor>
      <arglist>(double x, double eps=1e-14) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>af44fb9e22c3e06dd7a68d49547553f97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range &amp;</type>
      <name>extend</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>ac336ba6babbc554f6c686494aa2f563d</anchor>
      <arglist>(const Range &amp;range)</arglist>
    </member>
    <member kind="function">
      <type>Range &amp;</type>
      <name>extend</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a53f08fe32baff382b81316606353c957</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>Range &amp;</type>
      <name>extendWithRedshift</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a9dbea75d63510ef86b23999725c63b8e</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>Range &amp;</type>
      <name>intersect</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a95794b40a4a3cf24024131aba00b880b</anchor>
      <arglist>(const Range &amp;range)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a39ad6df33c644f7646cfe0ddc0cada9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mid</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a5f7ce17fa417602d3df589f9eec5831f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>min</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a076de1535012656bb27cc4651ba1c207</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a683e55f587261d528c559e6463f05333</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>width</name>
      <anchorfile>class_range.html</anchorfile>
      <anchor>a4aa26f1a322fc699405a377361ecda5d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RangeGrainSizeDistribution</name>
    <filename>class_range_grain_size_distribution.html</filename>
    <base>GrainSizeDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>amax</name>
      <anchorfile>class_range_grain_size_distribution.html</anchorfile>
      <anchor>a4055240d4af6f2cae9d6ca8623a04ae6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>amin</name>
      <anchorfile>class_range_grain_size_distribution.html</anchorfile>
      <anchor>a0e11fa22afe2648187108693e428a1c9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxSize</name>
      <anchorfile>class_range_grain_size_distribution.html</anchorfile>
      <anchor>a53e533dd2b57a5e6d8dccdea3a0d634d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minSize</name>
      <anchorfile>class_range_grain_size_distribution.html</anchorfile>
      <anchor>a949c551f84feb769255bac420887108e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RangeGrainSizeDistribution</name>
      <anchorfile>class_range_grain_size_distribution.html</anchorfile>
      <anchor>a834529d162cbf4fcc5a5ef4c43a240c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RangeGrainSizeDistribution</name>
      <anchorfile>class_range_grain_size_distribution.html</anchorfile>
      <anchor>a0b47a229e0433283b19c2b48380ddf6e</anchor>
      <arglist>(double minSize, double maxSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_range_grain_size_distribution.html</anchorfile>
      <anchor>ae87755ef09eb7c750da6bb95739812b4</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RangeWavelengthDistribution</name>
    <filename>class_range_wavelength_distribution.html</filename>
    <base>WavelengthDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>maxWavelength</name>
      <anchorfile>class_range_wavelength_distribution.html</anchorfile>
      <anchor>a437d3980c457b3442e77f53c932fd66d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWavelength</name>
      <anchorfile>class_range_wavelength_distribution.html</anchorfile>
      <anchor>aec2cbcef22a2ec1a554f355afe9c30cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RangeWavelengthDistribution</name>
      <anchorfile>class_range_wavelength_distribution.html</anchorfile>
      <anchor>ad1f4300ddeb852d08a6f3db9b12f1e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Range &amp;</type>
      <name>range</name>
      <anchorfile>class_range_wavelength_distribution.html</anchorfile>
      <anchor>a3c9791f83cf2625286d3fd3e3ab53907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_range_wavelength_distribution.html</anchorfile>
      <anchor>ae2f52a8c26a79830565a1e6ab9086300</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadFits3DGeometry</name>
    <filename>class_read_fits3_d_geometry.html</filename>
    <base>GenGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_read_fits3_d_geometry.html</anchorfile>
      <anchor>a56952658b5ab4e0b6da919716448214f</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_read_fits3_d_geometry.html</anchorfile>
      <anchor>a64731421ea232ce94bf36de4ee14e58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_read_fits3_d_geometry.html</anchorfile>
      <anchor>ac47e7e835da8f39a76bdb224c82340f6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pixelScale</name>
      <anchorfile>class_read_fits3_d_geometry.html</anchorfile>
      <anchor>af2832d0ee44781194175d92e8af1c465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_read_fits3_d_geometry.html</anchorfile>
      <anchor>ab3d0d166962f43e72a7d64becbf17cab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_read_fits3_d_geometry.html</anchorfile>
      <anchor>ad26385872bfdee9d19952bf8625869e9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_read_fits3_d_geometry.html</anchorfile>
      <anchor>ab97ddb8cea3d7426bb6e5a20652b1004</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReadFits3DGeometry</name>
      <anchorfile>class_read_fits3_d_geometry.html</anchorfile>
      <anchor>a408849cc55689a7f55f2897a5686d76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_read_fits3_d_geometry.html</anchorfile>
      <anchor>aca0d9b346f8a8adfecdd9d774badc766</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadFitsGeometry</name>
    <filename>class_read_fits_geometry.html</filename>
    <base>GenGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>centerX</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>ae65180a8f6d09be163cda92d3a281ca9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>centerY</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>ad26615d4971dd2db031684f21bd8cc40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a5d52107d4d1f01d905cdd3d70a9aa665</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a5c6e721420bb53dc3f12982963062f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a97eefc9324f12a4e53641f9ae39405e8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inclination</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a3def87b1c081e6f56ebda3077f37a577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsX</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a6de72f6d819c103d0506fa0190aeafb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPixelsY</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a9a47aab90bef846e9469d03006cb4e4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pixelScale</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>ab9ed83f1adea04f8cfaca82c1c790ac1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>positionAngle</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a8177a135d9c89a5908eedb37f652fd20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleHeight</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a081afc419c47a80375d4c0d6cf73419c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a9a26ee9c405719f5cab6446433d0a9d7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>ae3fd89371c07b9f8caca30cec084350c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a72e78b225a1afd9fb8946e83b2224e83</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReadFitsGeometry</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a135a6114a3a514d1924d7ccb12c2d9c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>aa80695288f8f4b9deb2a5808a42536c9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deproject</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a64862bb28fee17834ce56484bc1cc0c7</anchor>
      <arglist>(double &amp;x) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>derotate</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a40358d709d77ae7e1f5b8a8a8fdade45</anchor>
      <arglist>(double &amp;x, double &amp;y) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>project</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>ad8a2be4a83bbfbb1aaca17f072cc798c</anchor>
      <arglist>(double &amp;x) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>class_read_fits_geometry.html</anchorfile>
      <anchor>a812865bfa1003ee75fbf750fe3038586</anchor>
      <arglist>(double &amp;x, double &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleShape</name>
    <filename>class_rectangle_shape.html</filename>
    <base>CenterShape</base>
    <member kind="function">
      <type>double</type>
      <name>height</name>
      <anchorfile>class_rectangle_shape.html</anchorfile>
      <anchor>a5599f64148f88f9d13ec14a2b1206ef8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>width</name>
      <anchorfile>class_rectangle_shape.html</anchorfile>
      <anchor>a8a8077a6469fd03aafb4ba769fcb7831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RectangleShape</name>
      <anchorfile>class_rectangle_shape.html</anchorfile>
      <anchor>a5b5c1d644f21071bb14c77bc986ecae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintSelf</name>
      <anchorfile>class_rectangle_shape.html</anchorfile>
      <anchor>a010a7b13954f045baab3716d125bd954</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResolutionBorderWavelengthGrid</name>
    <filename>class_resolution_border_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="function">
      <type>double</type>
      <name>maxWavelength</name>
      <anchorfile>class_resolution_border_wavelength_grid.html</anchorfile>
      <anchor>a1ab4e8881495c9fdd94d2b0e13a482cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWavelength</name>
      <anchorfile>class_resolution_border_wavelength_grid.html</anchorfile>
      <anchor>a8c533bc569710d162cdb88178c619fef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>resolution</name>
      <anchorfile>class_resolution_border_wavelength_grid.html</anchorfile>
      <anchor>a08e37fce428c930305df4d8f6e81c47b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ResolutionBorderWavelengthGrid</name>
      <anchorfile>class_resolution_border_wavelength_grid.html</anchorfile>
      <anchor>a442c79bc2d983803f4cf81c3fac0fc89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_resolution_border_wavelength_grid.html</anchorfile>
      <anchor>a1dcb8bbd350fbefaa0da2847b36e0283</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResolutionWavelengthGrid</name>
    <filename>class_resolution_wavelength_grid.html</filename>
    <base>DisjointWavelengthGrid</base>
    <member kind="function">
      <type>double</type>
      <name>maxWavelength</name>
      <anchorfile>class_resolution_wavelength_grid.html</anchorfile>
      <anchor>ab4bc75c0d9e2471280b683783e763112</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWavelength</name>
      <anchorfile>class_resolution_wavelength_grid.html</anchorfile>
      <anchor>adcccdf8953725a5de36d16d332b0bd05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>resolution</name>
      <anchorfile>class_resolution_wavelength_grid.html</anchorfile>
      <anchor>a792013c45f489111b7642f814bb631b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ResolutionWavelengthGrid</name>
      <anchorfile>class_resolution_wavelength_grid.html</anchorfile>
      <anchor>a5ca25e35d82fd82d05c31f4eee710ff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_resolution_wavelength_grid.html</anchorfile>
      <anchor>ab466cb9a52b05a31f59fe3a818cd70a6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResourceSED</name>
    <filename>class_resource_s_e_d.html</filename>
    <base>ContSED</base>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_resource_s_e_d.html</anchorfile>
      <anchor>a480ceca614026ea118c3fa5c40db51c1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>integratedLuminosity</name>
      <anchorfile>class_resource_s_e_d.html</anchorfile>
      <anchor>a0c11ba92a15fb92fe5eec60b3576c595</anchor>
      <arglist>(const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_resource_s_e_d.html</anchorfile>
      <anchor>a741f5f59efecccaa32a20313c00fd975</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_resource_s_e_d.html</anchorfile>
      <anchor>a1399e9a0d18a5e69777a0854590d07a9</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>specificLuminosityArray</name>
      <anchorfile>class_resource_s_e_d.html</anchorfile>
      <anchor>aca70f1e46e7d914e3d69f8f6257a8743</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ResourceSED</name>
      <anchorfile>class_resource_s_e_d.html</anchorfile>
      <anchor>a9e65178a6bedaa4c5f81a460986fe6b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual string</type>
      <name>resourceName</name>
      <anchorfile>class_resource_s_e_d.html</anchorfile>
      <anchor>a3f355a69259c26e0bb0e83fd2c5031cf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_resource_s_e_d.html</anchorfile>
      <anchor>a78d508054004c103d4dc895dbccd8a53</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RingGeometry</name>
    <filename>class_ring_geometry.html</filename>
    <base>SepAxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_ring_geometry.html</anchorfile>
      <anchor>afd1a2234ddb1e14cd7fc89ffa7bf7e30</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>height</name>
      <anchorfile>class_ring_geometry.html</anchorfile>
      <anchor>a8f29837bf5e0a2cdf6359fd87c562287</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomCylRadius</name>
      <anchorfile>class_ring_geometry.html</anchorfile>
      <anchor>aee0ea5067c4b84b8fd528dd12069f302</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomZ</name>
      <anchorfile>class_ring_geometry.html</anchorfile>
      <anchor>a4100db5cf8cb2d81386fd40ace3e2e1c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ringRadius</name>
      <anchorfile>class_ring_geometry.html</anchorfile>
      <anchor>af45b3deeeb6bb89968494653a8d1a5bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_ring_geometry.html</anchorfile>
      <anchor>acad499a0fd7448b15e253a03b268a757</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_ring_geometry.html</anchorfile>
      <anchor>a53588bc7b7650eab0bdc1787011f5f83</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>width</name>
      <anchorfile>class_ring_geometry.html</anchorfile>
      <anchor>adbc11fd016fe927f066f394775eea0aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RingGeometry</name>
      <anchorfile>class_ring_geometry.html</anchorfile>
      <anchor>ac9b65f92d9eb76b14313d465c899559e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_ring_geometry.html</anchorfile>
      <anchor>a43d11add8cea479efe72a64965b35572</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RotateGeometryDecorator</name>
    <filename>class_rotate_geometry_decorator.html</filename>
    <base>GenGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>a8bfc2796c2cb517fd7aca84066b3d26b</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eulerAlpha</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>aa37fd94897aac06359c0a1f1ced8ae88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eulerBeta</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>a6a9dd8e4b305ca9f2c6bf42fef2627de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eulerGamma</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>a62cdbda2fabf26bc22046afa6d8d9ad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>a396824db9bb3c38fa055a5e341715b0e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>geometry</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>a3455989ab14549b31fa188fab9b77624</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>a773a6c5893029c0fb5cb4fc459768b99</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>aae0f599928fdafb7bf05845f6b9e0882</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>aadf455bdc55c5a0f349b190224ed6178</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>abcedfbbd3183c1890c2368d4e9fda7e4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RotateGeometryDecorator</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>a5a5aa7e21541cbc6cf808e81b580678e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Position</type>
      <name>derotate</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>a9ad32d443019aa2798ba09d718d94a52</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Position</type>
      <name>rotate</name>
      <anchorfile>class_rotate_geometry_decorator.html</anchorfile>
      <anchor>a797685c5d3583026058c54ada3c5f4f8</anchor>
      <arglist>(Position bfrorig) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RotateVectorFieldDecorator</name>
    <filename>class_rotate_vector_field_decorator.html</filename>
    <base>VectorField</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_rotate_vector_field_decorator.html</anchorfile>
      <anchor>a01934c26673d01aba9cd9cacc55f0df8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eulerAlpha</name>
      <anchorfile>class_rotate_vector_field_decorator.html</anchorfile>
      <anchor>ad2f4163b5e054a44988ba4b622591073</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eulerBeta</name>
      <anchorfile>class_rotate_vector_field_decorator.html</anchorfile>
      <anchor>afbc46d53bb4b89ab6d0bfe4562bc6eb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eulerGamma</name>
      <anchorfile>class_rotate_vector_field_decorator.html</anchorfile>
      <anchor>a2fde9581ecca28a3545fc959a6890c82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_rotate_vector_field_decorator.html</anchorfile>
      <anchor>a91e6fd97c25a89bb1aa8fbc5521ff78c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>vector</name>
      <anchorfile>class_rotate_vector_field_decorator.html</anchorfile>
      <anchor>a838ceadae0db986fc568a28216ad2cb9</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorField *</type>
      <name>vectorField</name>
      <anchorfile>class_rotate_vector_field_decorator.html</anchorfile>
      <anchor>a2d77bdfdb1f6b711821cc4528f9d0a84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RotateVectorFieldDecorator</name>
      <anchorfile>class_rotate_vector_field_decorator.html</anchorfile>
      <anchor>a2176c657b194add12179b58a6d21b364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Position</type>
      <name>derotate</name>
      <anchorfile>class_rotate_vector_field_decorator.html</anchorfile>
      <anchor>ac5416ca6ac55a0dc81cd445be1c35316</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Vec</type>
      <name>rotate</name>
      <anchorfile>class_rotate_vector_field_decorator.html</anchorfile>
      <anchor>a6737a7e9cad55f8f98f5d37fda676c92</anchor>
      <arglist>(Vec bfrorig) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SamplingOptions</name>
    <filename>class_sampling_options.html</filename>
    <base>SimulationItem</base>
    <member kind="enumeration">
      <type></type>
      <name>AggregatePolicy</name>
      <anchorfile>class_sampling_options.html</anchorfile>
      <anchor>a1662229d94d0ec4d988f4a65c4af0116</anchor>
      <arglist></arglist>
      <enumvalue file="class_sampling_options.html" anchor="a1662229d94d0ec4d988f4a65c4af0116ab1897515d548a960afe49ecf66a29021">Average</enumvalue>
      <enumvalue file="class_sampling_options.html" anchor="a1662229d94d0ec4d988f4a65c4af0116a8321e79c278ec510f63675c040594892">Maximum</enumvalue>
      <enumvalue file="class_sampling_options.html" anchor="a1662229d94d0ec4d988f4a65c4af0116a7fb55ed0b7a30342ba6da306428cae04">First</enumvalue>
    </member>
    <member kind="function">
      <type>AggregatePolicy</type>
      <name>aggregateVelocity</name>
      <anchorfile>class_sampling_options.html</anchorfile>
      <anchor>aec397c212f31bd13f62f7d32f5f29f84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numDensitySamples</name>
      <anchorfile>class_sampling_options.html</anchorfile>
      <anchor>aa73d6d44b784d74d431a15fefa2f5d1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPropertySamples</name>
      <anchorfile>class_sampling_options.html</anchorfile>
      <anchor>ac645a5023d29dd298c0df4f5d801a516</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SamplingOptions</name>
      <anchorfile>class_sampling_options.html</anchorfile>
      <anchor>a4d680aafc90c47d6d6d14faab192aa3c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SaveWizardPane</name>
    <filename>class_save_wizard_pane.html</filename>
    <member kind="slot">
      <type>void</type>
      <name>quit</name>
      <anchorfile>class_save_wizard_pane.html</anchorfile>
      <anchor>a80014c5b287daf9c3d3cb1d397cca93f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>restart</name>
      <anchorfile>class_save_wizard_pane.html</anchorfile>
      <anchor>a159561015258c3b87a21fa241f98a77f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>save</name>
      <anchorfile>class_save_wizard_pane.html</anchorfile>
      <anchor>a260fe221cd1369126a25d18f3d8b6b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>saveAs</name>
      <anchorfile>class_save_wizard_pane.html</anchorfile>
      <anchor>adffbfb6f916c1ca17cadd7d45cd2f034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>hierarchyWasSaved</name>
      <anchorfile>class_save_wizard_pane.html</anchorfile>
      <anchor>a91f7254ac275d58fc36dd87bd9580a32</anchor>
      <arglist>(QString filepath)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>restartWizard</name>
      <anchorfile>class_save_wizard_pane.html</anchorfile>
      <anchor>a5a50e46621e82e72f0ab0ce600ed2785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SaveWizardPane</name>
      <anchorfile>class_save_wizard_pane.html</anchorfile>
      <anchor>a6048c1b9d4b3d983f213d8523ba5336b</anchor>
      <arglist>(const SchemaDef *schema, Item *root, QString filepath, bool dirty, QObject *target)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>saveToFile</name>
      <anchorfile>class_save_wizard_pane.html</anchorfile>
      <anchor>a4ddf8d931c82ddf0c3e2b407a4aad9bc</anchor>
      <arglist>(QString filepath)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateSaveInfo</name>
      <anchorfile>class_save_wizard_pane.html</anchorfile>
      <anchor>a87fc3a5f4e96dc09e94a443d23127988</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScaledGaussianSmoothingKernel</name>
    <filename>class_scaled_gaussian_smoothing_kernel.html</filename>
    <base>SmoothingKernel</base>
    <member kind="function">
      <type>double</type>
      <name>columnDensity</name>
      <anchorfile>class_scaled_gaussian_smoothing_kernel.html</anchorfile>
      <anchor>a1ce57b48a7ab190a50179d6888dcb2e7</anchor>
      <arglist>(double q) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_scaled_gaussian_smoothing_kernel.html</anchorfile>
      <anchor>a2342bc6091a21f0e1fda9842379cf005</anchor>
      <arglist>(double u) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>generateRadius</name>
      <anchorfile>class_scaled_gaussian_smoothing_kernel.html</anchorfile>
      <anchor>a04de65bd379866d052ed0ec722d64ff5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ScaledGaussianSmoothingKernel</name>
      <anchorfile>class_scaled_gaussian_smoothing_kernel.html</anchorfile>
      <anchor>afd5327fda98d764cf66428d9d16f9665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_scaled_gaussian_smoothing_kernel.html</anchorfile>
      <anchor>a3ba316e7c3d4bda12e97f18673d2099c</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SchemaDef</name>
    <filename>class_schema_def.html</filename>
    <member kind="function">
      <type></type>
      <name>SchemaDef</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>ae949a8ddfa910f5e81a684ea6dda931c</anchor>
      <arglist>(const SchemaDef &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SchemaDef</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>aa032163181ee7280a0f34be221e9cedf</anchor>
      <arglist>(string filePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SchemaDef</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a8aa836941db06b11f5effb7e1e5caf78</anchor>
      <arglist>(string name, string title, string version, string extension, string root, string type, string format, string url)</arglist>
    </member>
    <member kind="function">
      <type>TypeDef &amp;</type>
      <name>addTypeDef</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a2e41cd258afd7432e31b49a5976a4f86</anchor>
      <arglist>(string name, string base, string title, TypeDef::Instantiator instantiator=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>allowed</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a128ed65087fcf59dcb46802e74fcc5b8</anchor>
      <arglist>(string type) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>allowedAndDisplayed</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>abc07da15e623a9d64749e613272824cf</anchor>
      <arglist>(string type) const</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>ascendants</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a7ff6092c73d62d9255d8a88776ce1bb9</anchor>
      <arglist>(string type) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Item &gt;</type>
      <name>createItem</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>ab68f1f6459e99ab528aa982c876af4cd</anchor>
      <arglist>(string type) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; PropertyHandler &gt;</type>
      <name>createPropertyHandler</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>ab94244a7e533de265cd3ecb17bc35378</anchor>
      <arglist>(Item *item, string property, NameManager *nameMgr) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>definingType</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a0c84e4ec92b40bfee67257d291b2bb8c</anchor>
      <arglist>(string type, string property) const</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>descendants</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>afaf9ffa2def717b996651ce7c0339371</anchor>
      <arglist>(string type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>af517d374bcd36a717703d2a6cb5d54b5</anchor>
      <arglist>(string qty) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a2b64fe36d9ce17ff4b6be60087bf1b63</anchor>
      <arglist>(string qty, string unit) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMultipleUnitSystems</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>aeda781d48d56d542eb64706ceca91b8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>in</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a8f9a1073adc24dbaed9e7a5eb17f21f1</anchor>
      <arglist>(string qty, string unit, double value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inherits</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a3a2bd05a6d5f00e0482a98dadf9adb89</anchor>
      <arglist>(string childType, string parentType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadUnitDef</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a3715e9eeed7cf11db700974afeca5e3a</anchor>
      <arglist>(const UnitDef &amp;unitDef)</arglist>
    </member>
    <member kind="function">
      <type>SchemaDef &amp;</type>
      <name>operator=</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a8583a9111543eee2415c1e80496aae4e</anchor>
      <arglist>(const SchemaDef &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>out</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>ae0b946423b3f7f878420d2fc15ac7618</anchor>
      <arglist>(string qty, string unit, double value) const</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>properties</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a39b1436f52595609cacea0caecfb2d36</anchor>
      <arglist>(string type) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>propertyTitle</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>abe3c0f12254c58f2ed8aa8cbd3fc2d8a</anchor>
      <arglist>(string type, string property) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>afd0a911a491a7918615f732a57440071</anchor>
      <arglist>(string filePath, string producer=string()) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>schemaExtension</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a833f9a2f9f46104ee744f5ace5767c11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>schemaFormat</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a836557b6ce862fda314458ad1e177664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>schemaName</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>ab4b858974c788761b187030675090b2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>schemaProducer</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>ae446a0aa8bc54cf55ec68dde7c49900f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>schemaRoot</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a85435a162194c65471b946cb8c443859</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>schemaTitle</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a7ab1cc73ab453aa6ec2bfb4363921deb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>schemaType</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a2c45389829197754600cf8c29fab31a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>schemaUrl</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>ae190f9b52902b19455bd1ca8b8ac22ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>schemaVersion</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a477d9f25103567160fd1063e7655536b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>title</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>ab8d450c66af2fb02d2cd4d0e0e4178dd</anchor>
      <arglist>(string type) const</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>titles</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>adc619b4457a97b8287168dbda4e1bb9d</anchor>
      <arglist>(const vector&lt; string &gt; &amp;types) const</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>toBeInserted</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>ae0864521ab0c5a2a4bd30baa3d1a4869</anchor>
      <arglist>(string type) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>unit</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>ae01943a00f092aaab9931244876376bf</anchor>
      <arglist>(string qty, string unitSystem) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>unitSystemBase</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a71414fe4645bcb5ad6970bc3e02fe61e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>getSchemaTitle</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a15959342101c0d268e212795d3d16963</anchor>
      <arglist>(string filePath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isCompatible</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>aa1e91608d8e5589feb3aed702faf8c0c</anchor>
      <arglist>(string schemaFilePath, string dataFilePath)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const PropertyDef &amp;</type>
      <name>propertyDef</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a9f15d5f8343d66c616b36743cf611fa7</anchor>
      <arglist>(string type, string property) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const TypeDef &amp;</type>
      <name>typeDef</name>
      <anchorfile>class_schema_def.html</anchorfile>
      <anchor>a7c2fd4939a223f56126df6d20544ef1a</anchor>
      <arglist>(string type) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SecondaryEmissionOptions</name>
    <filename>class_secondary_emission_options.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>double</type>
      <name>secondaryPacketsMultiplier</name>
      <anchorfile>class_secondary_emission_options.html</anchorfile>
      <anchor>ad6d302383d1079d82abf6ae8e070a796</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sourceBias</name>
      <anchorfile>class_secondary_emission_options.html</anchorfile>
      <anchor>af5ac47229cf411a16979a2031b690214</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>spatialBias</name>
      <anchorfile>class_secondary_emission_options.html</anchorfile>
      <anchor>a176e0f697d4f383986014f35d3a799bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>storeEmissionRadiationField</name>
      <anchorfile>class_secondary_emission_options.html</anchorfile>
      <anchor>aa7b47b3465c029a1513c10209d1678d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SecondaryEmissionOptions</name>
      <anchorfile>class_secondary_emission_options.html</anchorfile>
      <anchor>a9765154ae82867eecd7501633ee579e3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SecondarySource</name>
    <filename>class_secondary_source.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type></type>
      <name>SecondarySource</name>
      <anchorfile>class_secondary_source.html</anchorfile>
      <anchor>a08d3b1214d549381fb44d2308e0d6be4</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>launch</name>
      <anchorfile>class_secondary_source.html</anchorfile>
      <anchor>ade3be5cf1218feae27688cab9c3adc02</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double L) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>prepareLuminosities</name>
      <anchorfile>class_secondary_source.html</anchorfile>
      <anchor>a5b8fb89abe4c9411a33201bc1765f2ac</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preparePacketMap</name>
      <anchorfile>class_secondary_source.html</anchorfile>
      <anchor>abd677a698a8214b029b673ae2d15dcd0</anchor>
      <arglist>(size_t firstIndex, size_t numIndices)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SecondarySourceSystem</name>
    <filename>class_secondary_source_system.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type></type>
      <name>SecondarySourceSystem</name>
      <anchorfile>class_secondary_source_system.html</anchorfile>
      <anchor>a88e2dd10717f53afe4ab74faa2696a9d</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>installLaunchCallBack</name>
      <anchorfile>class_secondary_source_system.html</anchorfile>
      <anchor>a105d52c22c8d15c2d91cb2b14362e96a</anchor>
      <arglist>(ProbePhotonPacketInterface *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launch</name>
      <anchorfile>class_secondary_source_system.html</anchorfile>
      <anchor>a77d610c05683c4cacc165fcd58e537f2</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSources</name>
      <anchorfile>class_secondary_source_system.html</anchorfile>
      <anchor>a7dc82026536a291d73774cf51eafba13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prepareForLaunch</name>
      <anchorfile>class_secondary_source_system.html</anchorfile>
      <anchor>aaa80c4a3307326a4ec4f1a6fcc67887b</anchor>
      <arglist>(size_t numPackets)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_secondary_source_system.html</anchorfile>
      <anchor>a9c6ef777d4458eeb2dfa4a050126098e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SED</name>
    <filename>class_s_e_d.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>generateWavelength</name>
      <anchorfile>class_s_e_d.html</anchorfile>
      <anchor>a705c48710a7f204ff5e47007d2327650</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>integratedLuminosity</name>
      <anchorfile>class_s_e_d.html</anchorfile>
      <anchor>aff27f1c99d13b8fcfef137684b820c6f</anchor>
      <arglist>(const Range &amp;wavelengthRange) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_s_e_d.html</anchorfile>
      <anchor>ac93d0b701dd4dafbb4cf2291bcf44119</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>normalizationWavelengthRange</name>
      <anchorfile>class_s_e_d.html</anchorfile>
      <anchor>ac560d13559ec5ea15b4ecfea3e478a9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SED</name>
      <anchorfile>class_s_e_d.html</anchorfile>
      <anchor>a7f529fdb951c6cc0a0b33b5acadc0029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Random *</type>
      <name>random</name>
      <anchorfile>class_s_e_d.html</anchorfile>
      <anchor>a2adfaf53cb73b238a56786c4c1f7c5b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_s_e_d.html</anchorfile>
      <anchor>ae6b20645d016be140ebbb7ee83d81631</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SEDFamily</name>
    <filename>class_s_e_d_family.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>cdf</name>
      <anchorfile>class_s_e_d_family.html</anchorfile>
      <anchor>a03ac88e308113c3c8f19919acaa25272</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_s_e_d_family.html</anchorfile>
      <anchor>a3e5828a9de3a7d1b86a5206b847512b1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_s_e_d_family.html</anchorfile>
      <anchor>a6abf4ab2bf736aaff52a0cd7060fa4a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_s_e_d_family.html</anchorfile>
      <anchor>af5c6256467feb2e730f76c7b9008f1bb</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SEDFamily</name>
      <anchorfile>class_s_e_d_family.html</anchorfile>
      <anchor>a7f91aa555bc4c6783492a607aee86e14</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SEDInstrument</name>
    <filename>class_s_e_d_instrument.html</filename>
    <base>DistantInstrument</base>
    <member kind="function">
      <type>void</type>
      <name>detect</name>
      <anchorfile>class_s_e_d_instrument.html</anchorfile>
      <anchor>aff1efe60cc48faca42fc5a15c5f15e6c</anchor>
      <arglist>(PhotonPacket *pp) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radius</name>
      <anchorfile>class_s_e_d_instrument.html</anchorfile>
      <anchor>a8ba738ba41a976270951d500e32699a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SEDInstrument</name>
      <anchorfile>class_s_e_d_instrument.html</anchorfile>
      <anchor>a8818a1b23c2d93fb524cda078a94dfb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_s_e_d_instrument.html</anchorfile>
      <anchor>a39f199b5408f75660cc6c7717332e4ba</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SelectDustMixFamily</name>
    <filename>class_select_dust_mix_family.html</filename>
    <base>MaterialMixFamily</base>
    <member kind="function">
      <type>const vector&lt; DustMix * &gt; &amp;</type>
      <name>dustMixes</name>
      <anchorfile>class_select_dust_mix_family.html</anchorfile>
      <anchor>a6887db118671b0b005bb2b2999d2d465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaterialMix *</type>
      <name>mix</name>
      <anchorfile>class_select_dust_mix_family.html</anchorfile>
      <anchor>a02c10d15ee9fd906c12a88035773dae4</anchor>
      <arglist>(const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_select_dust_mix_family.html</anchorfile>
      <anchor>a4e5330ed0aaba43c292f00f2b2ca774a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SelectDustMixFamily</name>
      <anchorfile>class_select_dust_mix_family.html</anchorfile>
      <anchor>af1303752849a8a64455e070fdc6f21ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SepAxGeometry</name>
    <filename>class_sep_ax_geometry.html</filename>
    <base>AxGeometry</base>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_sep_ax_geometry.html</anchorfile>
      <anchor>ae13a1bb57c948069553a33f687bc04cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>randomCylRadius</name>
      <anchorfile>class_sep_ax_geometry.html</anchorfile>
      <anchor>ad3ddf288c33b63e4b0386dcc0fa21c6e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>randomZ</name>
      <anchorfile>class_sep_ax_geometry.html</anchorfile>
      <anchor>a806e693b4b80323b7a3df83b68646416</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SepAxGeometry</name>
      <anchorfile>class_sep_ax_geometry.html</anchorfile>
      <anchor>a7a8675a99fed049340d35a2ecc330f2e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SerialParallel</name>
    <filename>class_serial_parallel.html</filename>
    <base>Parallel</base>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>class_serial_parallel.html</anchorfile>
      <anchor>aff90f4467e1e20e2ae8f740f6cd9d670</anchor>
      <arglist>(size_t maxIndex, std::function&lt; void(size_t firstIndex, size_t numIndices)&gt; target) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SerialParallel</name>
      <anchorfile>class_serial_parallel.html</anchorfile>
      <anchor>a3fbc60557c731c14c44c1e2be3926a49</anchor>
      <arglist>(int threadCount)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SersicFunction</name>
    <filename>class_sersic_function.html</filename>
    <member kind="function">
      <type></type>
      <name>SersicFunction</name>
      <anchorfile>class_sersic_function.html</anchorfile>
      <anchor>ab26f7aae9fdce5e555fb503df372eb90</anchor>
      <arglist>(double n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inverseMass</name>
      <anchorfile>class_sersic_function.html</anchorfile>
      <anchor>a3af02a625d6f738bd69223117ae066d3</anchor>
      <arglist>(const double M) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_sersic_function.html</anchorfile>
      <anchor>a81dc4d53e57509e0798dd6e08c527863</anchor>
      <arglist>(const double s) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>class_sersic_function.html</anchorfile>
      <anchor>acb318621f6416f2bf1aa7726ec9c818f</anchor>
      <arglist>(const double s) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SersicGeometry</name>
    <filename>class_sersic_geometry.html</filename>
    <base>SpheGeometry</base>
    <member kind="function">
      <type></type>
      <name>~SersicGeometry</name>
      <anchorfile>class_sersic_geometry.html</anchorfile>
      <anchor>a6822a0b8582c2e4eb80cf34db788ce7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_sersic_geometry.html</anchorfile>
      <anchor>aa3c7ea9fcd36942b43c3b623a462e4de</anchor>
      <arglist>(double r) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>effectiveRadius</name>
      <anchorfile>class_sersic_geometry.html</anchorfile>
      <anchor>abaa9c70e7c00513c69e9d11c83f2740b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>index</name>
      <anchorfile>class_sersic_geometry.html</anchorfile>
      <anchor>a466fd434d68f74950000edd96cdb5097</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomRadius</name>
      <anchorfile>class_sersic_geometry.html</anchorfile>
      <anchor>aea8e21c7968e6644f4184eaa88e6cb31</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sigmar</name>
      <anchorfile>class_sersic_geometry.html</anchorfile>
      <anchor>a8624a5ecd5f220b484245ac98975337a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SersicGeometry</name>
      <anchorfile>class_sersic_geometry.html</anchorfile>
      <anchor>aa0366967eba7efd0467e99ca23db5ae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_sersic_geometry.html</anchorfile>
      <anchor>a93fe9ea36e18254cbcba3ae63f80bfac</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Shape</name>
    <filename>class_shape.html</filename>
    <base>ShapeItem</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Shape</name>
      <anchorfile>class_shape.html</anchorfile>
      <anchor>aaa8d87171e65e0d8ba3c5459978992a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeCanvas</name>
    <filename>class_shape_canvas.html</filename>
    <base>ShapeItem</base>
    <member kind="function">
      <type>void</type>
      <name>paintAndSave</name>
      <anchorfile>class_shape_canvas.html</anchorfile>
      <anchor>a177e30a983089b4ed43f8eba538f90a0</anchor>
      <arglist>(string outPath)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>savePath</name>
      <anchorfile>class_shape_canvas.html</anchorfile>
      <anchor>a483ff7100af2a4645349969572fd773d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape *</type>
      <name>shape</name>
      <anchorfile>class_shape_canvas.html</anchorfile>
      <anchor>ab16f731bdeb1d4e4a064c6ee264bbe0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShapeCanvas</name>
      <anchorfile>class_shape_canvas.html</anchorfile>
      <anchor>a496468903e11c972e77d8e980b4b656c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>class_shape_canvas.html</anchorfile>
      <anchor>a5510268a7e9e697b90355c789b30b663</anchor>
      <arglist>(double x1, double y1, double x2, double y2) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>popState</name>
      <anchorfile>class_shape_canvas.html</anchorfile>
      <anchor>aa9e90d49642b6f85fca8818280596436</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pushState</name>
      <anchorfile>class_shape_canvas.html</anchorfile>
      <anchor>a42a12639992ba9ed97b04d897d74439c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>class_shape_canvas.html</anchorfile>
      <anchor>a50afc46329ed7ed8fd15059327a9bb6c</anchor>
      <arglist>(double r, double g, double b) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>class_shape_canvas.html</anchorfile>
      <anchor>ae3bf5826fa10a7e82e2fb9d7766e6e66</anchor>
      <arglist>(double w) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeDecorator</name>
    <filename>class_shape_decorator.html</filename>
    <base>Shape</base>
    <member kind="function">
      <type>Shape *</type>
      <name>shape</name>
      <anchorfile>class_shape_decorator.html</anchorfile>
      <anchor>a9348dac3a6e51607d7da45cc9260e1b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShapeDecorator</name>
      <anchorfile>class_shape_decorator.html</anchorfile>
      <anchor>a59822066ec0cc121bce4d14a1decc4cb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeGroup</name>
    <filename>class_shape_group.html</filename>
    <base>Shape</base>
    <member kind="function">
      <type>const vector&lt; Shape * &gt; &amp;</type>
      <name>shapes</name>
      <anchorfile>class_shape_group.html</anchorfile>
      <anchor>af6bc470681e7745aa4809f193864717c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShapeGroup</name>
      <anchorfile>class_shape_group.html</anchorfile>
      <anchor>af659e8437c958f7738a4a346d105a3b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeItem</name>
    <filename>class_shape_item.html</filename>
    <base>Item</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paint</name>
      <anchorfile>class_shape_item.html</anchorfile>
      <anchor>ac2989ac6e1965fe50ce03939aa52a128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShapeItem</name>
      <anchorfile>class_shape_item.html</anchorfile>
      <anchor>a748f6422f20511ce2f163fbf5508ac38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drawLine</name>
      <anchorfile>class_shape_item.html</anchorfile>
      <anchor>a9ccf35ae9981a3953b17ac8ff41d5ee1</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>paintSelf</name>
      <anchorfile>class_shape_item.html</anchorfile>
      <anchor>a60faa7818a59af8f75e9cc4b9421ac86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>popState</name>
      <anchorfile>class_shape_item.html</anchorfile>
      <anchor>aa5c967eed443c85a2c9d88d89ea0ff5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pushState</name>
      <anchorfile>class_shape_item.html</anchorfile>
      <anchor>a662356ed33e1ce39ee8a4ca18b1de102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>class_shape_item.html</anchorfile>
      <anchor>a16bf3df35c44ab279f92988c2e71551e</anchor>
      <arglist>(double r, double g, double b)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setWidth</name>
      <anchorfile>class_shape_item.html</anchorfile>
      <anchor>ac62c378fabed25aefc4b559fa6481780</anchor>
      <arglist>(double w)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeRegistry</name>
    <filename>class_shape_registry.html</filename>
    <member kind="function">
      <type></type>
      <name>ShapeRegistry</name>
      <anchorfile>class_shape_registry.html</anchorfile>
      <anchor>ad162cfbe83f4b4bdcf6f12a210653f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ShapeRegistry</name>
      <anchorfile>class_shape_registry.html</anchorfile>
      <anchor>acec75ed8fabf9d343aff0d04a6f00ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SchemaDef *</type>
      <name>getSchemaDef</name>
      <anchorfile>class_shape_registry.html</anchorfile>
      <anchor>abaec4f56acadae9b403af6cde8e2ce45</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapesCommandLineHandler</name>
    <filename>class_shapes_command_line_handler.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>perform</name>
      <anchorfile>class_shapes_command_line_handler.html</anchorfile>
      <anchor>aa3f017098b1c5098edaaed22efb85dad</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapesUnitDef</name>
    <filename>class_shapes_unit_def.html</filename>
    <base>UnitDef</base>
    <member kind="function">
      <type></type>
      <name>ShapesUnitDef</name>
      <anchorfile>class_shapes_unit_def.html</anchorfile>
      <anchor>ad9bb702f4cca231e20f71a418b241b69</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShellGeometry</name>
    <filename>class_shell_geometry.html</filename>
    <base>SpheGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_shell_geometry.html</anchorfile>
      <anchor>ad1c6db645b248ab9b5e5fb91d441b297</anchor>
      <arglist>(double r) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponent</name>
      <anchorfile>class_shell_geometry.html</anchorfile>
      <anchor>a043461fdea7f2df3eaab0e8657020dad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxRadius</name>
      <anchorfile>class_shell_geometry.html</anchorfile>
      <anchor>abb465202525873a05e33e6e423a80e46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minRadius</name>
      <anchorfile>class_shell_geometry.html</anchorfile>
      <anchor>a89695da47f06357ce1e093d5ee20dc2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomRadius</name>
      <anchorfile>class_shell_geometry.html</anchorfile>
      <anchor>a79c8994fd71a65e3bea1504239554f75</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sigmar</name>
      <anchorfile>class_shell_geometry.html</anchorfile>
      <anchor>a1bb47970095aa7d54cf6bd3cfc2ff57d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShellGeometry</name>
      <anchorfile>class_shell_geometry.html</anchorfile>
      <anchor>ac2f8e6c7216dfaf82339f676f20aee3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_shell_geometry.html</anchorfile>
      <anchor>ab3ad340273e6b7a073103b08fda70636</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShortArray</name>
    <filename>class_short_array.html</filename>
    <member kind="function">
      <type></type>
      <name>ShortArray</name>
      <anchorfile>class_short_array.html</anchorfile>
      <anchor>abe38c67c7ceb30ed351c5e24aa039635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShortArray</name>
      <anchorfile>class_short_array.html</anchorfile>
      <anchor>acb29f787ba7ff2cb0703329254c2a512</anchor>
      <arglist>(const ShortArray &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShortArray</name>
      <anchorfile>class_short_array.html</anchorfile>
      <anchor>a73ebe5d4a6f7bf54943c56312b33ff6e</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ShortArray</name>
      <anchorfile>class_short_array.html</anchorfile>
      <anchor>aeaf02bd14430072e30e0d54397c41f4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_short_array.html</anchorfile>
      <anchor>a6724ed50e2e89ea019a1858b6e0ddaeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ShortArray &amp;</type>
      <name>operator=</name>
      <anchorfile>class_short_array.html</anchorfile>
      <anchor>ac9612ef7788bd1d8ea7e53933e29a9be</anchor>
      <arglist>(const ShortArray &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>class_short_array.html</anchorfile>
      <anchor>a9531551eb85868cc0aa5fb54edca9b67</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>class_short_array.html</anchorfile>
      <anchor>abb19c35dc77414a767c51f52d6d1ec44</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>class_short_array.html</anchorfile>
      <anchor>af9122060f2c516ac38f266b5b6ea6d9e</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_short_array.html</anchorfile>
      <anchor>a1aa216e1a27492d86b9c5abb8c49bfdf</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SignalHandler</name>
    <filename>class_signal_handler.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InstallSignalHandlers</name>
      <anchorfile>class_signal_handler.html</anchorfile>
      <anchor>acddd9caa15c14c42d6a8822d088c9a49</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Simulation</name>
    <filename>class_simulation.html</filename>
    <base>SimulationItem</base>
    <member kind="enumeration">
      <type></type>
      <name>UserLevel</name>
      <anchorfile>class_simulation.html</anchorfile>
      <anchor>a508079518e487a84e514f9c92ccbc8e5</anchor>
      <arglist></arglist>
      <enumvalue file="class_simulation.html" anchor="a508079518e487a84e514f9c92ccbc8e5a972e73b7a882d0802a4e3a16946a2f94">Basic</enumvalue>
      <enumvalue file="class_simulation.html" anchor="a508079518e487a84e514f9c92ccbc8e5ad2203cb1237cb6460cbad94564e39345">Regular</enumvalue>
      <enumvalue file="class_simulation.html" anchor="a508079518e487a84e514f9c92ccbc8e5a0b84df4e0b66e9d55b22eefb55ca928f">Expert</enumvalue>
    </member>
    <member kind="function">
      <type>FilePaths *</type>
      <name>filePaths</name>
      <anchorfile>class_simulation.html</anchorfile>
      <anchor>abb23dc66e39d5c57a230b04b68c043cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Log *</type>
      <name>log</name>
      <anchorfile>class_simulation.html</anchorfile>
      <anchor>a45d21d15e09a7f39276b97dd8b5d131f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParallelFactory *</type>
      <name>parallelFactory</name>
      <anchorfile>class_simulation.html</anchorfile>
      <anchor>a13d22dd01c3b2b6282896fefbbdea7bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Random *</type>
      <name>random</name>
      <anchorfile>class_simulation.html</anchorfile>
      <anchor>a5b2ca3f92d4f9a794b5a3b3186aedadb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupAndRun</name>
      <anchorfile>class_simulation.html</anchorfile>
      <anchor>a04d44222ffa7553b29e661cc48d659da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Units *</type>
      <name>units</name>
      <anchorfile>class_simulation.html</anchorfile>
      <anchor>afb884df07ff5cf000e5165112b5c4ab7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UserLevel</type>
      <name>userLevel</name>
      <anchorfile>class_simulation.html</anchorfile>
      <anchor>a5c349447e9d85b24a388a9aeb19e2b1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Simulation</name>
      <anchorfile>class_simulation.html</anchorfile>
      <anchor>a5b224cc5b36bcc8eb29689aff223de41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>runSimulation</name>
      <anchorfile>class_simulation.html</anchorfile>
      <anchor>a677adb9d7f6c2504108a26e46ed16446</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setupSimulation</name>
      <anchorfile>class_simulation.html</anchorfile>
      <anchor>a9168cf735eb8d87507647b96da8ccdf3</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimulationItem</name>
    <filename>class_simulation_item.html</filename>
    <base>Item</base>
    <member kind="function">
      <type>T *</type>
      <name>find</name>
      <anchorfile>class_simulation_item.html</anchorfile>
      <anchor>aabb10599cdd4d6020e78d9ea7ef40b4b</anchor>
      <arglist>(bool setup=true) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>interface</name>
      <anchorfile>class_simulation_item.html</anchorfile>
      <anchor>a023958e9c531de5be3864a08cceca294</anchor>
      <arglist>(int levels=-999999, bool setup=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>itemName</name>
      <anchorfile>class_simulation_item.html</anchorfile>
      <anchor>a19e93a964f0dc9de3d898567d881d740</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>class_simulation_item.html</anchorfile>
      <anchor>a7283067652be2f6fb4c1d83f1b7867eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>typeAndName</name>
      <anchorfile>class_simulation_item.html</anchorfile>
      <anchor>aac5fc4783c3b18087431dc2fe11f3524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimulationItem</name>
      <anchorfile>class_simulation_item.html</anchorfile>
      <anchor>ac96bcebef914e125356c93845784fa7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>offersInterface</name>
      <anchorfile>class_simulation_item.html</anchorfile>
      <anchor>a18ff02d72f910a7f2461813653abe02f</anchor>
      <arglist>(const std::type_info &amp;interfaceTypeInfo) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_simulation_item.html</anchorfile>
      <anchor>afae38a82edc574952421b0336703f1dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_simulation_item.html</anchorfile>
      <anchor>a0ccd470797e72cae99ed033a454e76df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Item *</type>
      <name>find</name>
      <anchorfile>class_simulation_item.html</anchorfile>
      <anchor>a15a1417fbbe5e7608e2fb9f6459a1cd1</anchor>
      <arglist>(bool setup, SimulationItem *castToRequestedType(Item *)) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SimulationItem *</type>
      <name>interface</name>
      <anchorfile>class_simulation_item.html</anchorfile>
      <anchor>ac1f5189d5b6fc7f89c272acb1ff5603f</anchor>
      <arglist>(int levels, bool setup, bool offersRequestedInterface(SimulationItem *)) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimulationItemRegistry</name>
    <filename>class_simulation_item_registry.html</filename>
    <member kind="function">
      <type></type>
      <name>SimulationItemRegistry</name>
      <anchorfile>class_simulation_item_registry.html</anchorfile>
      <anchor>aa816a38dace737346f5eacc5cf950ff6</anchor>
      <arglist>(string version, string format)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimulationItemRegistry</name>
      <anchorfile>class_simulation_item_registry.html</anchorfile>
      <anchor>a7acef4c0b4b0daa7e85d8a82b9b94671</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SchemaDef *</type>
      <name>getSchemaDef</name>
      <anchorfile>class_simulation_item_registry.html</anchorfile>
      <anchor>aec9eb30e8912e98535d013692ac51914</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SineSquarePolarizationProfile</name>
    <filename>class_sine_square_polarization_profile.html</filename>
    <base>PolarizationProfile</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_sine_square_polarization_profile.html</anchorfile>
      <anchor>a2a28d8e2284e5987051f978949f83bb9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxPolarizationDegree</name>
      <anchorfile>class_sine_square_polarization_profile.html</anchorfile>
      <anchor>a6fa1ae1f6afe6256db7319a1db59bbeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>polarizationAngle</name>
      <anchorfile>class_sine_square_polarization_profile.html</anchorfile>
      <anchor>a483f0f50188792ba7a4d277a2609962f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StokesVector</type>
      <name>polarizationForDirection</name>
      <anchorfile>class_sine_square_polarization_profile.html</anchorfile>
      <anchor>a8d00a2cf8affee0ce8ebe13f47702b99</anchor>
      <arglist>(Direction bfk) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>symmetryX</name>
      <anchorfile>class_sine_square_polarization_profile.html</anchorfile>
      <anchor>a9260fba24454ecabeaee2d2dcfec7ef5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>symmetryY</name>
      <anchorfile>class_sine_square_polarization_profile.html</anchorfile>
      <anchor>a5e40d4801759f90a550bb9b010e67529</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>symmetryZ</name>
      <anchorfile>class_sine_square_polarization_profile.html</anchorfile>
      <anchor>a3c690fedd1d9779bfff97cc291294c71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SineSquarePolarizationProfile</name>
      <anchorfile>class_sine_square_polarization_profile.html</anchorfile>
      <anchor>abc810d0e725d182e7a3cbe61c319f34d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_sine_square_polarization_profile.html</anchorfile>
      <anchor>aa9501b88270f76f593d24d8bf7be16fc</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleGrainDustMix</name>
    <filename>class_single_grain_dust_mix.html</filename>
    <base>DustMix</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleGrainDustMix</name>
      <anchorfile>class_single_grain_dust_mix.html</anchorfile>
      <anchor>abc40f5c4058c04eb80670d2f453e16ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getOpticalProperties</name>
      <anchorfile>class_single_grain_dust_mix.html</anchorfile>
      <anchor>a0100e189d99d20a3e80816c70ef6157d</anchor>
      <arglist>(const Array &amp;lambdav, const Array &amp;thetav, Array &amp;sigmaabsv, Array &amp;sigmascav, Array &amp;asymmparv, Table&lt; 2 &gt; &amp;S11vv, Table&lt; 2 &gt; &amp;S12vv, Table&lt; 2 &gt; &amp;S33vv, Table&lt; 2 &gt; &amp;S34vv, ArrayTable&lt; 2 &gt; &amp;sigmaabsvv, ArrayTable&lt; 2 &gt; &amp;sigmaabspolvv) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual string</type>
      <name>resourceNameForMuellerMatrix</name>
      <anchorfile>class_single_grain_dust_mix.html</anchorfile>
      <anchor>a82b401881417f3a92b2454ecc732a53e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_single_grain_dust_mix.html</anchorfile>
      <anchor>a1e095f4f16caf8d0bd8c8796296fbe42</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleGrainSizeDistribution</name>
    <filename>class_single_grain_size_distribution.html</filename>
    <base>GrainSizeDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>amax</name>
      <anchorfile>class_single_grain_size_distribution.html</anchorfile>
      <anchor>a894adb11325ff5fe6a5fc6ec891c7d05</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>amin</name>
      <anchorfile>class_single_grain_size_distribution.html</anchorfile>
      <anchor>a647b1aa3102b2cf932e0d8c036376050</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnda</name>
      <anchorfile>class_single_grain_size_distribution.html</anchorfile>
      <anchor>a9b56a5873d63becb1a01223c72a87b36</anchor>
      <arglist>(double a) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>size</name>
      <anchorfile>class_single_grain_size_distribution.html</anchorfile>
      <anchor>a7c194f2fc74a074f936218e1bd532df5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleGrainSizeDistribution</name>
      <anchorfile>class_single_grain_size_distribution.html</anchorfile>
      <anchor>aafe4963109093b1eb100a79257e303db</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleWavelengthSED</name>
    <filename>class_single_wavelength_s_e_d.html</filename>
    <base>LineSED</base>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_single_wavelength_s_e_d.html</anchorfile>
      <anchor>ae7aa7e1954b1bc7da6a62323561e34ef</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWavelengthsAndLuminosities</name>
      <anchorfile>class_single_wavelength_s_e_d.html</anchorfile>
      <anchor>af3640fc1e8991cefbeb4c5a2032e29d6</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;Lv) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelength</name>
      <anchorfile>class_single_wavelength_s_e_d.html</anchorfile>
      <anchor>ab27e4b5adb89543ff0c4094ba0908b61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleWavelengthSED</name>
      <anchorfile>class_single_wavelength_s_e_d.html</anchorfile>
      <anchor>addb0244b30da833c8822ba3083c0020c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SiteListInterface</name>
    <filename>class_site_list_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SiteListInterface</name>
      <anchorfile>class_site_list_interface.html</anchorfile>
      <anchor>a4a22c1c4a5d9e107d726a8e1bbdf5ccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numSites</name>
      <anchorfile>class_site_list_interface.html</anchorfile>
      <anchor>a00f9f5a2c41e92cd936e1b60ff9b5b7c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Position</type>
      <name>sitePosition</name>
      <anchorfile>class_site_list_interface.html</anchorfile>
      <anchor>a6e32f22a8c43a6618edcb6be88f60fab</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SiteListInterface</name>
      <anchorfile>class_site_list_interface.html</anchorfile>
      <anchor>a5b011abe2c65a588b7e3deafc16144c8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SiteListTreePolicy</name>
    <filename>class_site_list_tree_policy.html</filename>
    <base>TreePolicy</base>
    <member kind="function">
      <type>vector&lt; TreeNode * &gt;</type>
      <name>constructTree</name>
      <anchorfile>class_site_list_tree_policy.html</anchorfile>
      <anchor>a4dc1b39c3e2763c7b6d27096b5415326</anchor>
      <arglist>(TreeNode *root) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numExtraLevels</name>
      <anchorfile>class_site_list_tree_policy.html</anchorfile>
      <anchor>ad20ca7c8deb488c75396110e2154c895</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SiteListTreePolicy</name>
      <anchorfile>class_site_list_tree_policy.html</anchorfile>
      <anchor>a5249631794f92ae466bb3b3a756a6a88</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SIUnits</name>
    <filename>class_s_i_units.html</filename>
    <base>Units</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>SIUnits</name>
      <anchorfile>class_s_i_units.html</anchorfile>
      <anchor>a38b2314296658fc54dd2e57834525d13</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SkirtCommandLineHandler</name>
    <filename>class_skirt_command_line_handler.html</filename>
    <member kind="function">
      <type></type>
      <name>SkirtCommandLineHandler</name>
      <anchorfile>class_skirt_command_line_handler.html</anchorfile>
      <anchor>a9af06c9cfb92d01e0f54dc26bd8bdcbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>perform</name>
      <anchorfile>class_skirt_command_line_handler.html</anchorfile>
      <anchor>a550a707810d393c3aff27427f1f79cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addSkiFilesFor</name>
      <anchorfile>class_skirt_command_line_handler.html</anchorfile>
      <anchor>abe6dcc0f3f304c20784af38f84c44d3d</anchor>
      <arglist>(string dirpath, string name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addSkiFilesFor</name>
      <anchorfile>class_skirt_command_line_handler.html</anchorfile>
      <anchor>a7906ed11d48ed254660e5a6d8324b1f2</anchor>
      <arglist>(string filepath)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>doBatch</name>
      <anchorfile>class_skirt_command_line_handler.html</anchorfile>
      <anchor>a6aff4c3afcd3fc7ab42c59f7b059fbd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>doInteractive</name>
      <anchorfile>class_skirt_command_line_handler.html</anchorfile>
      <anchor>aae7ff52769533ddcc6bd3c75f4e59067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doSimulation</name>
      <anchorfile>class_skirt_command_line_handler.html</anchorfile>
      <anchor>a6aa0cab16c8470e3149556e67182210b</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>doSmileSchema</name>
      <anchorfile>class_skirt_command_line_handler.html</anchorfile>
      <anchor>ad8e2b2acfc665747cab0525934b67d5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>logErrorToFile</name>
      <anchorfile>class_skirt_command_line_handler.html</anchorfile>
      <anchor>a72a817ca019540304727d37249ab77ec</anchor>
      <arglist>(const vector&lt; string &gt; &amp;message, string skipath)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>printHelp</name>
      <anchorfile>class_skirt_command_line_handler.html</anchorfile>
      <anchor>a2a59c27dc94a9dc51732bae7290482fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SkirtUnitDef</name>
    <filename>class_skirt_unit_def.html</filename>
    <base>UnitDef</base>
    <member kind="function">
      <type></type>
      <name>SkirtUnitDef</name>
      <anchorfile>class_skirt_unit_def.html</anchorfile>
      <anchor>aadbe29cc5c9ec0db9f3730a443a260ac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SmileToolCommandLineHandler</name>
    <filename>class_smile_tool_command_line_handler.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>perform</name>
      <anchorfile>class_smile_tool_command_line_handler.html</anchorfile>
      <anchor>a78172e0603790d35ce03e85be7ba005a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SmoothingKernel</name>
    <filename>class_smoothing_kernel.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>columnDensity</name>
      <anchorfile>class_smoothing_kernel.html</anchorfile>
      <anchor>a97cb0679a77ddcb29f0b184b364049b4</anchor>
      <arglist>(double q) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>density</name>
      <anchorfile>class_smoothing_kernel.html</anchorfile>
      <anchor>aaafc6a6fdacb078054e40cf54d747ae7</anchor>
      <arglist>(double u) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>generateRadius</name>
      <anchorfile>class_smoothing_kernel.html</anchorfile>
      <anchor>a070037879c03625ae349837e939ae258</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SmoothingKernel</name>
      <anchorfile>class_smoothing_kernel.html</anchorfile>
      <anchor>acd0c2bf5db13ec47af33d9fa49d385e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Random *</type>
      <name>random</name>
      <anchorfile>class_smoothing_kernel.html</anchorfile>
      <anchor>ab1759e8129038a406cd08eb78f8d6645</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_smoothing_kernel.html</anchorfile>
      <anchor>a2ff5b4d6febdb9e989cd5bd6bbb2a84b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Snapshot</name>
    <filename>class_snapshot.html</filename>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>afbb9ea1d6bd1c57817fb2de4484d19e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Snapshot</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ad42c004dea44b5d95d53b4434b483286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>age</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a2eaaf50fd8f628362ebca4af2bc89ee4</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>age</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ae1d3a0f6e0ac8b0f42d614ef87cde99e</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>currentMass</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a0ce14c92afc781088379377d32471a09</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>currentMass</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a767867be7259a104f1cf2c6ae1b5846c</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>density</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a1e6c067431b2f293c7a723cc6b928af0</anchor>
      <arglist>(int m) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>density</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ab04bafac463181d2e6662b5bb03a3b9c</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Box</type>
      <name>extent</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>aa4bfdb4a58107263cae4ebbc1ac63ef2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Position</type>
      <name>generatePosition</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a68c75b9ece22887dbb872b54fd818d87</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Position</type>
      <name>generatePosition</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a982b3062a7c9db43b3a47a51a98e96b7</anchor>
      <arglist>(int m) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getEntities</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a221f366d5c5c7ec6d79b7607e24e7540</anchor>
      <arglist>(EntityCollection &amp;entities, Position bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getEntities</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>aee213bd5d59cc0434f5d5c221bf1d1e2</anchor>
      <arglist>(EntityCollection &amp;entities, Position bfr, Direction bfk) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAge</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>aa19b05447d91d4b92ddd44023701bfcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasCurrentMass</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a491fcb3d40fbcce56fb0c9a90ce862f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasInitialMass</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ad5b6a6f7dacc27566ab7c13544737e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMagneticField</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ae88e18912e5a26b0136b1e47928bc013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMetallicity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a41bc5e30ef6831f203df671c48b055fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParameters</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a7b7203e593d5457358b9b24d69da4d77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTemperature</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a1e5e87d65c8b49cf74cf2cc593c2a647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVelocity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a5155752a74c5e7d86c49e35c85a14056</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVelocityDispersion</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a01e9f11af5c52f35500e91c0dc68efab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>holdsNumber</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>aa9d9b3c3c6f19a13eb325dbdb77a6990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importBox</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a5a073edc2ff0b38ee599e6a861e46f68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importCurrentMass</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>aba9e1613acd04f91638471dfffab92da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importMagneticField</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a5bf9f9950c09e1ad5189d61957083b8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importMass</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a484bfc88b0469f515364783b228b253c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importMassDensity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>aa8f282410877a957e8eeb5faa550e020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importMetallicity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a923c76ca1ce0fc23003a1aee0158bb87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importNumber</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ad1461a4fd4e2b78fa19682c257fa07bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importNumberDensity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ae5c6f5ffd14546d4872befedf7b02f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importParameters</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a2b37842700c1aed74fb8aaf2ab5174a3</anchor>
      <arglist>(const vector&lt; SnapshotParameter &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importPosition</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a3a6027e0414d07c11ad349a953b3900a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importSize</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a92dd3a9f546fd9d5e07b82ffc379263f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importTemperature</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a28f452893402001068d8fdfde0d916a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importVelocity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a926dc6e927c38bc4cd3268116c7a310f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>importVelocityDispersion</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a74fd74de879aa9969c62a3ca04cd92e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initialMass</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>aa410e63d6934e89f4a1ecfbddea25d14</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initialMass</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ae2287e767e5fe833e6345d63a7f69345</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>magneticField</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a0c7a1d36b1844bb0864e1145be433149</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>magneticField</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a16dbe7a6d2b641d12a72c9e8b67308dd</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>mass</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a8bc75a0cb7e74f624651de107cfe0ab9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a41bec2bbc3d73d6c2b1f064778c271b4</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a48e40e026f415ee047a5054ac30eae07</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numEntities</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a85ede325a80c2d4b35bdf5fb5e16396e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a91398609d3161645463b594494cd46d0</anchor>
      <arglist>(const SimulationItem *item, string filename, string description)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameters</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a0a4da492f45d1d8d93938cb6e674eca2</anchor>
      <arglist>(int m, Array &amp;params) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameters</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a59575f41dd0677885ec549b5f95d85fc</anchor>
      <arglist>(Position bfr, Array &amp;params) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Position</type>
      <name>position</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a5017716edf16b79669b033bc3d96b000</anchor>
      <arglist>(int m) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readAndClose</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a4ee25c635e25c5f04c834660d25325ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMassDensityPolicy</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a330f78e9188455dc9998b0665e25e9c8</anchor>
      <arglist>(double multiplier, double maxTemperature, bool useMetallicity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNeedGetEntities</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a9bb7a15254d1d1cf8c6427ce1cf41d4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ae5480eb7dddd5ff45f3fba019b96244a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>acc7501ef5dffbc42bf43493c34c19cf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ac0fd8a40e1fcdf747e58ecc388079746</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>temperature</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a4c105ce78979cbf810db4f87ecc12342</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>temperature</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a42764ea4235f4298d41e7ed0f07552bd</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useColumns</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>afde9b5db7d560efe2c26ff338aaa208a</anchor>
      <arglist>(string columns)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>velocity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ab8ccf3840429f872547f93714f9b2b80</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>velocity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ae5f5ff35e91572e75ee2be1ac7fa58da</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>velocityDispersion</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ae9fb763215ffdbe11d2b948cff33dc20</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>velocityDispersion</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a03c432bcbd7e677a9a67e5e8190aaedf</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a9c456d70fa6d7ed87d94ed0b102e189e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>volume</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ae558c8011fdd3c2b287890dfe9c1af5d</anchor>
      <arglist>(int m) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ageIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ad5a79b4f005a11182f36168f7e70a0d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>boxIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a4db83824c6ab7a9198ef5cf9fd47fd9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>currentMassIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ac56be7db3cdc580d0ab9d62eebfbd8f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>densityIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a42c28d21a2094d99bcb208560305620e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasMassDensityPolicy</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a34a2741278c92f623c5b0be8a94c4bda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TextInFile *</type>
      <name>infile</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a54e8c9deeaa7a9f02858932fd6e9e44d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>initialMassIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a122292dad0a158d64bbe7d2c14a10c3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Log *</type>
      <name>log</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ad84a52d7c77df6316e90c5f6c9356f9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>logMassStatistics</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ad8d0b320b6594a7d4f850dc17289cc0d</anchor>
      <arglist>(int numIgnored, double totalOriginalMass, double totalMetallicMass, double totalEffectiveMass)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>magneticFieldIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a86d91da1a6e7e4d3fb848ee230537eb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>massIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a283d6a1397c9aed41f656fe4581c7990</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>maxTemperature</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a6a9a4a861b5cd0e7ac559699936545c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>metallicityIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a45ccb715477db620086f1b8abea397bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>multiplier</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>afb0691a7486ff0dee4d1025ca616afe3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>nearestEntity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a56d9e96d6ef049ee3ea3824f17a11f2f</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>needGetEntities</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a76f25a13ef2cf962cb20e4285fc21651</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a92ca88a63df94ad12e1472620336987a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parametersIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ae262789bf514e23a2e4b96132e97dacb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>positionIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a1d754991650ac51afe3d4fe128565de5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const Array &amp;</type>
      <name>properties</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ae2b7c769994fdc668f48a2231c1eea6a</anchor>
      <arglist>(int m) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Random *</type>
      <name>random</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a06d2240c52d748d766976d69f57c9a56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setContext</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ad555dc07a426e158e95226e2ed934e09</anchor>
      <arglist>(const SimulationItem *item)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>sizeIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a0641b34ce6251c4c5ac18f9e4bd21418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>temperatureIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a81c9736822261572e2f16993fe359248</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Units *</type>
      <name>units</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>aff1d8c90b8b3ab219a1dca6c4dc5138c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>useMetallicity</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>aa9759b2694491501202cfffa3994626b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>useTemperatureCutoff</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>afa079b0e7096db28651c7c1091e8fd8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>velocityDispersionIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>a96424f5bd1a235bbbbd2107266b85eaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>velocityIndex</name>
      <anchorfile>class_snapshot.html</anchorfile>
      <anchor>ae246775dc903c64edd01909ad3f127d8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnapshotParameter</name>
    <filename>class_snapshot_parameter.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Identifier</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>a436ee48aa3cf2dfeea2f8eaab6b2f8e0</anchor>
      <arglist></arglist>
      <enumvalue file="class_snapshot_parameter.html" anchor="a436ee48aa3cf2dfeea2f8eaab6b2f8e0ac1da591ce3b0203b3a7ecc93afac7145">InitialMass</enumvalue>
      <enumvalue file="class_snapshot_parameter.html" anchor="a436ee48aa3cf2dfeea2f8eaab6b2f8e0a9099053b0147f0a2278b6a26505afa51">CurrentMass</enumvalue>
      <enumvalue file="class_snapshot_parameter.html" anchor="a436ee48aa3cf2dfeea2f8eaab6b2f8e0a7214bddc1338cf841e0f2cb275ded06a">Metallicity</enumvalue>
      <enumvalue file="class_snapshot_parameter.html" anchor="a436ee48aa3cf2dfeea2f8eaab6b2f8e0a9d8d2d5ab12b515182a505f54db7f538">Age</enumvalue>
      <enumvalue file="class_snapshot_parameter.html" anchor="a436ee48aa3cf2dfeea2f8eaab6b2f8e0aee7a8e262285ed49ea1b4e4ae11525bd">Temperature</enumvalue>
      <enumvalue file="class_snapshot_parameter.html" anchor="a436ee48aa3cf2dfeea2f8eaab6b2f8e0a90589c47f06eb971d548591f23c285af">Custom</enumvalue>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>defaultUnit</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>adb869e772f3010179ae9e796cface6d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>description</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>a990a93af2ff2ff5143f4cf4538389fd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Identifier</type>
      <name>identifier</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>a35f9809a3ab366cf917045a807372988</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>quantity</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>ac3b3c3ec0fc9e41ac57aacbf1af3db9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SnapshotParameter</type>
      <name>age</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>a357af3a66c6983dd321e31982d549139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SnapshotParameter</type>
      <name>currentMass</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>a234e60ccde4fc8a1a4372faec272a9a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SnapshotParameter</type>
      <name>custom</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>a66a8077ed7c32b3051876668c6538b0d</anchor>
      <arglist>(string description, string quantity=string(), string defaultUnit=string())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SnapshotParameter</type>
      <name>initialMass</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>a7bcb2725ec062c651e356feed28b0725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SnapshotParameter</type>
      <name>metallicity</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>ad8342e9d5cde08600e175eaaa7426e39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SnapshotParameter</type>
      <name>temperature</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>ac82c937d687c01087c35ed3779cf19b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SnapshotParameter</name>
      <anchorfile>class_snapshot_parameter.html</anchorfile>
      <anchor>a05830d6d574cbb4692934cb63560fff0</anchor>
      <arglist>(Identifier identifier, string description, string quantity, string defaultUnit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Source</name>
    <filename>class_source.html</filename>
    <base>SimulationItem</base>
    <base>SourceWavelengthRangeInterface</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dimension</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>a877616a10b21986c0138a1d6bec16fb9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasVelocity</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>ab59fe2ae56272463c1a247e603f6d574</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>launch</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>a0f64dd21e56ce05107a5ce7129c02e62</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double L) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>luminosity</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>a409e17d456e33df8b4d6d4fdf89798cd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prepareForLaunch</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>a5cee127e151d94e20069ede1f6cd17de</anchor>
      <arglist>(double sourceBias, size_t firstIndex, size_t numIndices)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sourceWeight</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>a7e1702c4834bb1587219932aefd6c97c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>a1c98ccfb5ad689abf3177085333fc0e2</anchor>
      <arglist>(double wavelength) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelengthBias</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>aaaaff209264ecba435e3411f1e8f3e2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WavelengthDistribution *</type>
      <name>wavelengthBiasDistribution</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>af3156c1a33bc18ba96fc882ae9e59f5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Source</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>a660c0a4b8b8f8402568bef86f2cb2fbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>informAvailableWavelengthRange</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>a278626b7deba47b501183634d6ba7880</anchor>
      <arglist>(Range available, string itemType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Random *</type>
      <name>random</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>aa92e613af1146d24ff2d369e3d833f09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_source.html</anchorfile>
      <anchor>a699adc8c6d354ad195f9d5cb8465d21a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SourceSystem</name>
    <filename>class_source_system.html</filename>
    <base>SimulationItem</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>a4332cff3dc08a2c9c94c6bc048c9765f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>installLaunchCallBack</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>aed3424ad643db7d81acc349c993a6e86</anchor>
      <arglist>(ProbePhotonPacketInterface *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launch</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>a36710b9b67aa2762f53298a354eae6a1</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>luminosity</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>abf549f731a029280c91dba92d1718f65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxWavelength</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>a578f21586bd366ab3ec892b06d32f36f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minWavelength</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>a8e1ca516eea6107d60b9ffcc2f83581f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSources</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>ad536b31d487d0c44fa160ab15f8b5b50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareForLaunch</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>a5886e99ca2cfe43fc7af028627a61e7e</anchor>
      <arglist>(size_t numPackets)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sourceBias</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>a474ae44802d1fd1a8333576176726bc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Source * &gt; &amp;</type>
      <name>sources</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>aad0b07a040f7c110fdc66914110df25d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>wavelengths</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>a292714566b49479a55b5316175224f17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SourceSystem</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>a3724c27e112ba7c436d131a8dce839f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_source_system.html</anchorfile>
      <anchor>a56e6e93d3981fa58ab26a7b19c9ebe4d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SourceWavelengthRangeInterface</name>
    <filename>class_source_wavelength_range_interface.html</filename>
    <base>WavelengthRangeInterface</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>SourceWavelengthRangeInterface</name>
      <anchorfile>class_source_wavelength_range_interface.html</anchorfile>
      <anchor>a146c348fec3c576dfdce12a361cc75c0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialCellLibrary</name>
    <filename>class_spatial_cell_library.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual vector&lt; int &gt;</type>
      <name>mapping</name>
      <anchorfile>class_spatial_cell_library.html</anchorfile>
      <anchor>a093fb4f51f7c9e45d40443aacc6eb448</anchor>
      <arglist>(const Array &amp;bv) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numEntries</name>
      <anchorfile>class_spatial_cell_library.html</anchorfile>
      <anchor>a63e9ef117aa855dfeb74670f1557113e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpatialCellLibrary</name>
      <anchorfile>class_spatial_cell_library.html</anchorfile>
      <anchor>ac5588c94d5015e21920e81035fdebe85</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialCellPropertiesProbe</name>
    <filename>class_spatial_cell_properties_probe.html</filename>
    <base>SpecialtyWavelengthProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpatialCellPropertiesProbe</name>
      <anchorfile>class_spatial_cell_properties_probe.html</anchorfile>
      <anchor>af7f496d481a3217989e4e2a657d7b365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_spatial_cell_properties_probe.html</anchorfile>
      <anchor>aa970e414935e48e4ec47fd89b0357a55</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialGrid</name>
    <filename>class_spatial_grid.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual Box</type>
      <name>boundingBox</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>aa79dc399497d5b49ab75b36b13295f25</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cellIndex</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>a15ff0b9f7868bb19e2e4027fc4207cd4</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Position</type>
      <name>centralPositionInCell</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>a11849019451afb777568fa18b8a455ba</anchor>
      <arglist>(int m) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; PathSegmentGenerator &gt;</type>
      <name>createPathSegmentGenerator</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>a00d7697e0440935010248b8aa0aaa7f1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>diagonal</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>ac7a66e23204fa515f88cab35a305806a</anchor>
      <arglist>(int m) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dimension</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>aab29e4c94712ef919e832115687e6096</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numCells</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>a22cbc59dfc547e6727bea7a45d842c28</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Position</type>
      <name>randomPositionInCell</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>aa9792d628e79b2bfa24d3aa0b6623cdb</anchor>
      <arglist>(int m) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>volume</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>a2af0628fd48a007de0cb56974b5ca366</anchor>
      <arglist>(int m) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeGridPlotFiles</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>a7aaa40e35576ec9d70f901990aa3d04b</anchor>
      <arglist>(const SimulationItem *probe) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpatialGrid</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>af464090a1a4e8ea125431e07ae9d30f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Random *</type>
      <name>random</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>a5ddf20e7717e30dfefdf05cd9cc05c3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>aa29fc8272fae952aa4d571d498d7a452</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>write_xy</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>a8bc5dc702c64ddbed7c3813de50e8535</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>write_xyz</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>ad85a83d7c1f0b57c7f85d74192d2546f</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>write_xz</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>ab16ac10587e406bfbbedfa679773e22e</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>write_yz</name>
      <anchorfile>class_spatial_grid.html</anchorfile>
      <anchor>aa31fe7ef70fbeb00cb13daed2e850df2</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialGridForm</name>
    <filename>class_spatial_grid_form.html</filename>
    <base>Form</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpatialGridForm</name>
      <anchorfile>class_spatial_grid_form.html</anchorfile>
      <anchor>acd6d31412c47978c5058d9b13a09c5e9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialGridFormProbe</name>
    <filename>class_spatial_grid_form_probe.html</filename>
    <base>Probe</base>
    <member kind="function">
      <type>Form *</type>
      <name>form</name>
      <anchorfile>class_spatial_grid_form_probe.html</anchorfile>
      <anchor>a3adf1d292722abe3910d77ed635ad130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpatialGridFormProbe</name>
      <anchorfile>class_spatial_grid_form_probe.html</anchorfile>
      <anchor>a5660f7f503589eb42971352222ea0ea6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialGridPath</name>
    <filename>class_spatial_grid_path.html</filename>
    <class kind="class">SpatialGridPath::Segment</class>
    <member kind="function">
      <type></type>
      <name>SpatialGridPath</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>a4b9735be78ade7d6016cff62233e8157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialGridPath</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>a0fad2e3ba5262e0b049a0c858bd2748d</anchor>
      <arglist>(const Position &amp;bfr, const Direction &amp;bfk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSegment</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>ae971a1523bdf894568cbe9cc0b6603f6</anchor>
      <arglist>(int m, double ds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>aa55ab6352ff363470707616414d9cec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>direction</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>a04132c92b1a0b6c5eed3642f28e2d1d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findInteractionPoint</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>aa115fcba01c4751082f0d0b08efe4b17</anchor>
      <arglist>(double tauinteract)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>interactionCellIndex</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>aa6785c29441d0dc3ac18b5cf5c9239a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>interactionDistance</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>add8659314a82b04177f49b5c0895635e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>interactionOpticalDepth</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>a5e25f075edf48ca67ced3984e275ff50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>moveInside</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>a9858c4ef1fee1cc7aa6b314a4b7017cc</anchor>
      <arglist>(const Box &amp;box, double eps)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>position</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>a30749c561efe67224a821c942856d939</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagatePosition</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>a4a5b154e41340d38e05af76d5898f467</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Segment &gt; &amp;</type>
      <name>segments</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>acac182cb6ad386c823357789b57224a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Segment &gt; &amp;</type>
      <name>segments</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>a1dbacd6ea64e6a75cab93099a77d6b4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>ad588d57c785c3cf1e01c615436f7549e</anchor>
      <arglist>(const Direction &amp;bfk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInteractionPoint</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>a33a09b0b2f08d11a6f6d2dd23d208e62</anchor>
      <arglist>(int m, double s, double tauAbs=0.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>a3b3e0ef4143550652e923fa959404ec2</anchor>
      <arglist>(const Position &amp;bfr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalOpticalDepth</name>
      <anchorfile>class_spatial_grid_path.html</anchorfile>
      <anchor>aea787c4cd7953d18efc1047349ee6335</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialGridPath::Segment</name>
    <filename>class_spatial_grid_path_1_1_segment.html</filename>
  </compound>
  <compound kind="class">
    <name>SpatialGridPlotFile</name>
    <filename>class_spatial_grid_plot_file.html</filename>
    <base protection="private">TextOutFile</base>
    <member kind="function">
      <type></type>
      <name>SpatialGridPlotFile</name>
      <anchorfile>class_spatial_grid_plot_file.html</anchorfile>
      <anchor>a7823da44a3c1bb7a84f7849c040d3b3e</anchor>
      <arglist>(const SimulationItem *item, string filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeCircle</name>
      <anchorfile>class_spatial_grid_plot_file.html</anchorfile>
      <anchor>a9e7be59c00a67c938368f44bd573aa8b</anchor>
      <arglist>(double radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeCube</name>
      <anchorfile>class_spatial_grid_plot_file.html</anchorfile>
      <anchor>a9e0c84d23a0ffb744af92d1c1bc27a6f</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeLine</name>
      <anchorfile>class_spatial_grid_plot_file.html</anchorfile>
      <anchor>a19daf6e28565e6f16a27209d2ba1a72f</anchor>
      <arglist>(double beg1, double beg2, double end1, double end2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeLine</name>
      <anchorfile>class_spatial_grid_plot_file.html</anchorfile>
      <anchor>a6d1b38d3d7da97401cfcdf86af5a65bd</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePolyhedron</name>
      <anchorfile>class_spatial_grid_plot_file.html</anchorfile>
      <anchor>a03571a8355b0044f509a438f6c93d0ed</anchor>
      <arglist>(const vector&lt; double &gt; &amp;coords, const vector&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRectangle</name>
      <anchorfile>class_spatial_grid_plot_file.html</anchorfile>
      <anchor>a16b95139435828f2a4b38b818c828929</anchor>
      <arglist>(double min1, double min2, double max1, double max2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialGridPlotProbe</name>
    <filename>class_spatial_grid_plot_probe.html</filename>
    <base>SpecialtyProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpatialGridPlotProbe</name>
      <anchorfile>class_spatial_grid_plot_probe.html</anchorfile>
      <anchor>a56adbcb8fb9a591feb74de6b77eb96f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_spatial_grid_plot_probe.html</anchorfile>
      <anchor>a4fc05c3a018649dd9662dd50199409f6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialGridSourceDensityProbe</name>
    <filename>class_spatial_grid_source_density_probe.html</filename>
    <base>SpecialtyProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpatialGridSourceDensityProbe</name>
      <anchorfile>class_spatial_grid_source_density_probe.html</anchorfile>
      <anchor>a6e800fc5142ac953c631b7a8666ce31e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_spatial_grid_source_density_probe.html</anchorfile>
      <anchor>aab84fa2494ffa60d639e60b29d6c9794</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpatialGridWhenFormProbe</name>
    <filename>class_spatial_grid_when_form_probe.html</filename>
    <base>SpatialGridFormProbe</base>
    <member kind="enumeration">
      <type></type>
      <name>ProbeAfter</name>
      <anchorfile>class_spatial_grid_when_form_probe.html</anchorfile>
      <anchor>a34cc32763ba3c202c2f0b5ad861db692</anchor>
      <arglist></arglist>
      <enumvalue file="class_spatial_grid_when_form_probe.html" anchor="a34cc32763ba3c202c2f0b5ad861db692aad2376beebecdcf7846ba973fa1a005b">Setup</enumvalue>
      <enumvalue file="class_spatial_grid_when_form_probe.html" anchor="a34cc32763ba3c202c2f0b5ad861db692ac5301693c4e792bcd5a479ef38fb8f8d">Run</enumvalue>
      <enumvalue file="class_spatial_grid_when_form_probe.html" anchor="a34cc32763ba3c202c2f0b5ad861db692a074de7e7c226d5c60f8af14c20725352">Primary</enumvalue>
      <enumvalue file="class_spatial_grid_when_form_probe.html" anchor="a34cc32763ba3c202c2f0b5ad861db692a0c7d6cf19426e01dcfa32434828ed266">Secondary</enumvalue>
    </member>
    <member kind="function">
      <type>ProbeAfter</type>
      <name>probeAfter</name>
      <anchorfile>class_spatial_grid_when_form_probe.html</anchorfile>
      <anchor>a6d4cc5e4ce160ec68da2478e25b467c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpatialGridWhenFormProbe</name>
      <anchorfile>class_spatial_grid_when_form_probe.html</anchorfile>
      <anchor>a5985ac7e0594ac73dc08c92a19295337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>When</type>
      <name>when</name>
      <anchorfile>class_spatial_grid_when_form_probe.html</anchorfile>
      <anchor>a052436636d67e0a0307081674da4c0b8</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpecialtyProbe</name>
    <filename>class_specialty_probe.html</filename>
    <base>Probe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpecialtyProbe</name>
      <anchorfile>class_specialty_probe.html</anchorfile>
      <anchor>a1eb3200560a80869278a54d67c585792</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpecialtySource</name>
    <filename>class_specialty_source.html</filename>
    <base>NormalizedSource</base>
    <base>VelocityInterface</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_specialty_source.html</anchorfile>
      <anchor>a5bd8f49497916562815132a28862d9d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>geometryDimension</name>
      <anchorfile>class_specialty_source.html</anchorfile>
      <anchor>a8767f332da0eb6f43c104148bd224e35</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVelocity</name>
      <anchorfile>class_specialty_source.html</anchorfile>
      <anchor>a19647c5162c95692360ecb356e2082d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launchNormalized</name>
      <anchorfile>class_specialty_source.html</anchorfile>
      <anchor>a8a504ae5f10c09757329c4de293ac0f5</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double lambda, double Lw) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>launchSpecialty</name>
      <anchorfile>class_specialty_source.html</anchorfile>
      <anchor>a6993972af23bcefcf31846eb247cdf69</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double lambda, double Lw, VelocityInterface *bvi) const =0</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>velocity</name>
      <anchorfile>class_specialty_source.html</anchorfile>
      <anchor>aeee3de5ba1be85fb6fea5a804c643c59</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>velocityX</name>
      <anchorfile>class_specialty_source.html</anchorfile>
      <anchor>a191e3ea09c90ae4e4bebd4f0dc0d6a09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>velocityY</name>
      <anchorfile>class_specialty_source.html</anchorfile>
      <anchor>ad4055d476ab16b3fc0e803d897be7e66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>velocityZ</name>
      <anchorfile>class_specialty_source.html</anchorfile>
      <anchor>a892bb05e6d28995ba7501129b7f8d105</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpecialtySource</name>
      <anchorfile>class_specialty_source.html</anchorfile>
      <anchor>a7507a5263b764ff2e6ad58236f8ec5c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_specialty_source.html</anchorfile>
      <anchor>a471e09bd9d83835e9d0cd63a6972512a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpecialtyWavelengthGridProbe</name>
    <filename>class_specialty_wavelength_grid_probe.html</filename>
    <base>SpecialtyProbe</base>
    <base>MaterialWavelengthRangeInterface</base>
    <member kind="function">
      <type>WavelengthGrid *</type>
      <name>materialWavelengthGrid</name>
      <anchorfile>class_specialty_wavelength_grid_probe.html</anchorfile>
      <anchor>aa66a098c50bc842c40f3a54e1f4e5a14</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>WavelengthGrid *</type>
      <name>wavelengthGrid</name>
      <anchorfile>class_specialty_wavelength_grid_probe.html</anchorfile>
      <anchor>a3b9d2efba96432573654ceb6781adde5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_specialty_wavelength_grid_probe.html</anchorfile>
      <anchor>aa3b56443180fd50f91a4dc1d8abf91f1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpecialtyWavelengthGridProbe</name>
      <anchorfile>class_specialty_wavelength_grid_probe.html</anchorfile>
      <anchor>a0ff5a21aafa44d5870b37b240dab5de9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpecialtyWavelengthProbe</name>
    <filename>class_specialty_wavelength_probe.html</filename>
    <base>SpecialtyWhenProbe</base>
    <base>MaterialWavelengthRangeInterface</base>
    <member kind="function">
      <type>double</type>
      <name>wavelength</name>
      <anchorfile>class_specialty_wavelength_probe.html</anchorfile>
      <anchor>ac69c9859f95a81b96ebe1458b312b1ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_specialty_wavelength_probe.html</anchorfile>
      <anchor>a5d115440bde2061bcd8f247c86183bac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpecialtyWavelengthProbe</name>
      <anchorfile>class_specialty_wavelength_probe.html</anchorfile>
      <anchor>aa613c071350114a98e38dcd404f57627</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpecialtyWhenProbe</name>
    <filename>class_specialty_when_probe.html</filename>
    <base>SpecialtyProbe</base>
    <member kind="enumeration">
      <type></type>
      <name>ProbeAfter</name>
      <anchorfile>class_specialty_when_probe.html</anchorfile>
      <anchor>a310bf49eefb12dedf27541826be41f13</anchor>
      <arglist></arglist>
      <enumvalue file="class_specialty_when_probe.html" anchor="a310bf49eefb12dedf27541826be41f13aad2376beebecdcf7846ba973fa1a005b">Setup</enumvalue>
      <enumvalue file="class_specialty_when_probe.html" anchor="a310bf49eefb12dedf27541826be41f13ac5301693c4e792bcd5a479ef38fb8f8d">Run</enumvalue>
    </member>
    <member kind="function">
      <type>ProbeAfter</type>
      <name>probeAfter</name>
      <anchorfile>class_specialty_when_probe.html</anchorfile>
      <anchor>af180c988e8a545d744031fc86817e2ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpecialtyWhenProbe</name>
      <anchorfile>class_specialty_when_probe.html</anchorfile>
      <anchor>a4d3b014f7d72f68e52cf775d99d96aa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>When</type>
      <name>when</name>
      <anchorfile>class_specialty_when_probe.html</anchorfile>
      <anchor>a5d9bf0eeab0d88a258fea47378059344</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpecificLuminosityNormalization</name>
    <filename>class_specific_luminosity_normalization.html</filename>
    <base>LuminosityNormalization</base>
    <member kind="enumeration">
      <type></type>
      <name>UnitStyle</name>
      <anchorfile>class_specific_luminosity_normalization.html</anchorfile>
      <anchor>ae6ce45fa7f8812524dee7f67837bdeb9</anchor>
      <arglist></arglist>
      <enumvalue file="class_specific_luminosity_normalization.html" anchor="ae6ce45fa7f8812524dee7f67837bdeb9a950aec12e25d8d406c5664cf8f5bbaa4">neutralmonluminosity</enumvalue>
      <enumvalue file="class_specific_luminosity_normalization.html" anchor="ae6ce45fa7f8812524dee7f67837bdeb9a953f5fed0ab133102d96de07e9cc9554">wavelengthmonluminosity</enumvalue>
      <enumvalue file="class_specific_luminosity_normalization.html" anchor="ae6ce45fa7f8812524dee7f67837bdeb9aa32dc40840f7a5f57956d1fe29dd8b85">frequencymonluminosity</enumvalue>
      <enumvalue file="class_specific_luminosity_normalization.html" anchor="ae6ce45fa7f8812524dee7f67837bdeb9a8e94c4281659d40685914cc28fa22fbb">energymonluminosity</enumvalue>
    </member>
    <member kind="function">
      <type>double</type>
      <name>luminosityForSED</name>
      <anchorfile>class_specific_luminosity_normalization.html</anchorfile>
      <anchor>a1924813b7485ba8cba62d43dc0f5004f</anchor>
      <arglist>(SED *sed) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_specific_luminosity_normalization.html</anchorfile>
      <anchor>a36383218978a20f4a13c91d72dfc1dcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UnitStyle</type>
      <name>unitStyle</name>
      <anchorfile>class_specific_luminosity_normalization.html</anchorfile>
      <anchor>a4fe5bcda1aa94e3a060ccf05ff8d9fee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wavelength</name>
      <anchorfile>class_specific_luminosity_normalization.html</anchorfile>
      <anchor>a613ee28fb60325e360716d70e16d3f97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpecificLuminosityNormalization</name>
      <anchorfile>class_specific_luminosity_normalization.html</anchorfile>
      <anchor>a9d8e1dde7dc5f977a418fd12c4cece78</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpheGeometry</name>
    <filename>class_sphe_geometry.html</filename>
    <base>Geometry</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>density</name>
      <anchorfile>class_sphe_geometry.html</anchorfile>
      <anchor>a14cd79a9134a406ad200dd07d0f67153</anchor>
      <arglist>(double r) const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_sphe_geometry.html</anchorfile>
      <anchor>a46802db5d871aadb12bc61fcfc01e5e1</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_sphe_geometry.html</anchorfile>
      <anchor>a364a2310331776d9f878290b00f73dfb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_sphe_geometry.html</anchorfile>
      <anchor>aed3ba69e8c62bebc2c82c9f64af316e7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>randomRadius</name>
      <anchorfile>class_sphe_geometry.html</anchorfile>
      <anchor>aec16d19320ae9757e95e6d1113e164b4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Sigmar</name>
      <anchorfile>class_sphe_geometry.html</anchorfile>
      <anchor>ad9a10bda827f17baee4984b54fd057b7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_sphe_geometry.html</anchorfile>
      <anchor>ac85a77a78199ff53d84f490a6786d3ca</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_sphe_geometry.html</anchorfile>
      <anchor>a61de0b79ce6a2b02bcbdd768791396ba</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_sphe_geometry.html</anchorfile>
      <anchor>a9d9808ea9bd41bf40c5728e9f3b4f59c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpheGeometry</name>
      <anchorfile>class_sphe_geometry.html</anchorfile>
      <anchor>ab3b392e7f78afd12a72cb9478250cfef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sphere1DSpatialGrid</name>
    <filename>class_sphere1_d_spatial_grid.html</filename>
    <base>SphereSpatialGrid</base>
    <member kind="function">
      <type>int</type>
      <name>cellIndex</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>a875baa06e90d7c6842559e7e1b6095b0</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>centralPositionInCell</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>a66b785cad8fdbd96c56a6b00f9a77a20</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; PathSegmentGenerator &gt;</type>
      <name>createPathSegmentGenerator</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>acd9ed2b92682590d8cd052857ff41208</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>ad2b1e2a8e177e30edc769783f580d92b</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>a8ea21ddfc26bbf6d828eebdae8aa9bde</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Mesh *</type>
      <name>meshRadial</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>a96518c4461a15dfbfb137331efafad3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minRadius</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>a0a3925dc879ffb2a5070a329b9e670d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numCells</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>aeeb1c8641b38aedbf42f2cebbd4118fa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>randomPositionInCell</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>a6c6cd91e6bb3c122b75bde820bb147f7</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>a9c1145f7cdbd0ae42076942c5e7ab528</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>aabb2e0a8801ffb842d59e844a367a122</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sphere1DSpatialGrid</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>a98424728fe408c2a33c490d05c2df50a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xy</name>
      <anchorfile>class_sphere1_d_spatial_grid.html</anchorfile>
      <anchor>a5aa9caf286104dbbe7caddf5a3fb5174</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sphere2DSpatialGrid</name>
    <filename>class_sphere2_d_spatial_grid.html</filename>
    <base>SphereSpatialGrid</base>
    <member kind="function">
      <type>int</type>
      <name>cellIndex</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>a08185fb8df3ea134e5a159299669c2a7</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>centralPositionInCell</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>aaf2040d07ab7c6f95955dd3da143d527</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; PathSegmentGenerator &gt;</type>
      <name>createPathSegmentGenerator</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>a3352a809b7092f1202cdcf92ea921fc9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>a5289412ab45f8ea214e721e0e685ab24</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>a1f4e2d8c0ce90540ca0f9e1f176656b0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Mesh *</type>
      <name>meshPolar</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>aec6ad80992af5b320b01e9f5bf74a278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Mesh *</type>
      <name>meshRadial</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>aa4932383cefa563f863b8f76e9dba057</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numCells</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>a1541eb450275c411a6ff75ca546b53d2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>randomPositionInCell</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>a6e758a96cfddda97ffe217e56bb4a8fe</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>a1dd328b59c65233a7de17bdebb965689</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>aa421f96722ec6017dbc5b01c42d5fbf8</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sphere2DSpatialGrid</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>a44863005858812fa328a0785267d04ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xy</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>ab8887de3e3bfc8d78dc6e364d5a869e3</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xz</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>affdaa6b5f1483b51a3020d60e4e1e37f</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>index</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>acc401d603624da62a8dc515ae5b8fc3a</anchor>
      <arglist>(int i, int k) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>invertIndex</name>
      <anchorfile>class_sphere2_d_spatial_grid.html</anchorfile>
      <anchor>a465f9f85b619e739f95c569d3ba00c29</anchor>
      <arglist>(int m, int &amp;i, int &amp;k) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SphereSpatialGrid</name>
    <filename>class_sphere_spatial_grid.html</filename>
    <base>SpatialGrid</base>
    <member kind="function">
      <type>Box</type>
      <name>boundingBox</name>
      <anchorfile>class_sphere_spatial_grid.html</anchorfile>
      <anchor>a93da11acb069c32507ae8a18e9098d79</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxRadius</name>
      <anchorfile>class_sphere_spatial_grid.html</anchorfile>
      <anchor>a849c16ec87e657119e71b00f411fd1f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SphereSpatialGrid</name>
      <anchorfile>class_sphere_spatial_grid.html</anchorfile>
      <anchor>ac361dee1747d5e5bb13ef026faa430be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SphericalBackgroundSource</name>
    <filename>class_spherical_background_source.html</filename>
    <base>CenteredSource</base>
    <member kind="function">
      <type>double</type>
      <name>backgroundRadius</name>
      <anchorfile>class_spherical_background_source.html</anchorfile>
      <anchor>a0dbd51218db36582b7eccc108093898d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>intrinsicDimension</name>
      <anchorfile>class_spherical_background_source.html</anchorfile>
      <anchor>a51322e4fe0bacf7be3fbc6bcdc5ab587</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launchSpecialty</name>
      <anchorfile>class_spherical_background_source.html</anchorfile>
      <anchor>a1c01ae1fd4dedf15cae8fb8e45a81132</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double lambda, double Lw, VelocityInterface *bvi) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SphericalBackgroundSource</name>
      <anchorfile>class_spherical_background_source.html</anchorfile>
      <anchor>a63c83a2d7899733001edca35ca94cdb0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SphericalClipGeometryDecorator</name>
    <filename>class_spherical_clip_geometry_decorator.html</filename>
    <base>ClipGeometryDecorator</base>
    <member kind="function">
      <type>double</type>
      <name>centerX</name>
      <anchorfile>class_spherical_clip_geometry_decorator.html</anchorfile>
      <anchor>adc9735ae556e281654e02ffd94c70c8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>centerY</name>
      <anchorfile>class_spherical_clip_geometry_decorator.html</anchorfile>
      <anchor>a0feffd6e180daba221490ce2d400e5ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>centerZ</name>
      <anchorfile>class_spherical_clip_geometry_decorator.html</anchorfile>
      <anchor>a9d7b63dacca16d374fa72b2dda06b479</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clipRadius</name>
      <anchorfile>class_spherical_clip_geometry_decorator.html</anchorfile>
      <anchor>a15d236bb489c928cbd4214fcea18fcfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_spherical_clip_geometry_decorator.html</anchorfile>
      <anchor>af75496238014c5c334a7b5b0295567eb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>class_spherical_clip_geometry_decorator.html</anchorfile>
      <anchor>a98132fba36eb2772184d75255ec62c38</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SphericalClipGeometryDecorator</name>
      <anchorfile>class_spherical_clip_geometry_decorator.html</anchorfile>
      <anchor>aac419454cdcb6ef7d6625cb808e4155c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_spherical_clip_geometry_decorator.html</anchorfile>
      <anchor>a437a19fa7ed68efa25430346ded172ed</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpheroidalGeometryDecorator</name>
    <filename>class_spheroidal_geometry_decorator.html</filename>
    <base>AxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_spheroidal_geometry_decorator.html</anchorfile>
      <anchor>ab6e433e5e5c35921d51b10c47c8f16e0</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flattening</name>
      <anchorfile>class_spheroidal_geometry_decorator.html</anchorfile>
      <anchor>ad8c88f7dc3329087099e2036623e7246</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_spheroidal_geometry_decorator.html</anchorfile>
      <anchor>a01e7e57b44ecf81350f4490feea57d66</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>SpheGeometry *</type>
      <name>geometry</name>
      <anchorfile>class_spheroidal_geometry_decorator.html</anchorfile>
      <anchor>a3e6449c09ced913202455464a0afda68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_spheroidal_geometry_decorator.html</anchorfile>
      <anchor>a40f3604c8ff2cc5ce74d0d8c73d3d681</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_spheroidal_geometry_decorator.html</anchorfile>
      <anchor>a5adb5ef7bfd1711a788e5a140a873078</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpheroidalGeometryDecorator</name>
      <anchorfile>class_spheroidal_geometry_decorator.html</anchorfile>
      <anchor>af4de448e286013cd3a16325cd1304a0c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpheroidalGraphiteGrainComposition</name>
    <filename>class_spheroidal_graphite_grain_composition.html</filename>
    <base>PolarizedGraphiteGrainComposition</base>
    <member kind="enumeration">
      <type></type>
      <name>TableType</name>
      <anchorfile>class_spheroidal_graphite_grain_composition.html</anchorfile>
      <anchor>a8ba23ebbc6c23bdd6a9b4517ffa323bb</anchor>
      <arglist></arglist>
      <enumvalue file="class_spheroidal_graphite_grain_composition.html" anchor="a8ba23ebbc6c23bdd6a9b4517ffa323bbadefccbed9421a1e9180a9b1fc35dacdb">Builtin</enumvalue>
      <enumvalue file="class_spheroidal_graphite_grain_composition.html" anchor="a8ba23ebbc6c23bdd6a9b4517ffa323bba67f58218d9c8a0b6a5b0a420ce1c57f2">OneTable</enumvalue>
      <enumvalue file="class_spheroidal_graphite_grain_composition.html" anchor="a8ba23ebbc6c23bdd6a9b4517ffa323bbab7e239aa65cb6dc17fee5603d511092e">TwoTables</enumvalue>
    </member>
    <member kind="function">
      <type>string</type>
      <name>alignedEmissionTable</name>
      <anchorfile>class_spheroidal_graphite_grain_composition.html</anchorfile>
      <anchor>a519f9e19e2a30cd1b6560fa973fd8404</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alignmentFraction</name>
      <anchorfile>class_spheroidal_graphite_grain_composition.html</anchorfile>
      <anchor>ad7be67606ff344efe6148decabf38ec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>emissionTable</name>
      <anchorfile>class_spheroidal_graphite_grain_composition.html</anchorfile>
      <anchor>a5700cf729e9a5a0f796074d2c842f0fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_spheroidal_graphite_grain_composition.html</anchorfile>
      <anchor>a0a506b51e5c4a24a90d3ae824961bc26</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>nonAlignedEmissionTable</name>
      <anchorfile>class_spheroidal_graphite_grain_composition.html</anchorfile>
      <anchor>a53098fc0195db9b56174d2f94d2ae6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resourcesForSpheroidalEmission</name>
      <anchorfile>class_spheroidal_graphite_grain_composition.html</anchorfile>
      <anchor>af61c9a244681784d42494c0f126afb26</anchor>
      <arglist>(bool &amp;resource, double &amp;interpol, string &amp;tableName1, string &amp;tableName2) const override</arglist>
    </member>
    <member kind="function">
      <type>TableType</type>
      <name>tableType</name>
      <anchorfile>class_spheroidal_graphite_grain_composition.html</anchorfile>
      <anchor>a05663b21d520bfebdf5a0742259ec42d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpheroidalGraphiteGrainComposition</name>
      <anchorfile>class_spheroidal_graphite_grain_composition.html</anchorfile>
      <anchor>a8e2fe7562e316401fd35d188f3612f7a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpheroidalSilicateGrainComposition</name>
    <filename>class_spheroidal_silicate_grain_composition.html</filename>
    <base>PolarizedSilicateGrainComposition</base>
    <member kind="enumeration">
      <type></type>
      <name>TableType</name>
      <anchorfile>class_spheroidal_silicate_grain_composition.html</anchorfile>
      <anchor>a405938a3f9fd7aef2e6ab3b05cc26639</anchor>
      <arglist></arglist>
      <enumvalue file="class_spheroidal_silicate_grain_composition.html" anchor="a405938a3f9fd7aef2e6ab3b05cc26639adefccbed9421a1e9180a9b1fc35dacdb">Builtin</enumvalue>
      <enumvalue file="class_spheroidal_silicate_grain_composition.html" anchor="a405938a3f9fd7aef2e6ab3b05cc26639a67f58218d9c8a0b6a5b0a420ce1c57f2">OneTable</enumvalue>
      <enumvalue file="class_spheroidal_silicate_grain_composition.html" anchor="a405938a3f9fd7aef2e6ab3b05cc26639ab7e239aa65cb6dc17fee5603d511092e">TwoTables</enumvalue>
    </member>
    <member kind="function">
      <type>string</type>
      <name>alignedEmissionTable</name>
      <anchorfile>class_spheroidal_silicate_grain_composition.html</anchorfile>
      <anchor>a60fa65f0f41872d2743d67fcacd1184c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alignmentFraction</name>
      <anchorfile>class_spheroidal_silicate_grain_composition.html</anchorfile>
      <anchor>af13003592fc01f2881801c377e909c00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>emissionTable</name>
      <anchorfile>class_spheroidal_silicate_grain_composition.html</anchorfile>
      <anchor>a4dbb9993a890a4b5d1865cb7f6db34da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_spheroidal_silicate_grain_composition.html</anchorfile>
      <anchor>a16dd855d55fb841a17c9571491fcfd11</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>nonAlignedEmissionTable</name>
      <anchorfile>class_spheroidal_silicate_grain_composition.html</anchorfile>
      <anchor>a5de3b75c4455be14415c7ac4cb0438c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resourcesForSpheroidalEmission</name>
      <anchorfile>class_spheroidal_silicate_grain_composition.html</anchorfile>
      <anchor>aa4b28a401c7dd37874b1925eb53e2f30</anchor>
      <arglist>(bool &amp;resource, double &amp;interpol, string &amp;tableName1, string &amp;tableName2) const override</arglist>
    </member>
    <member kind="function">
      <type>TableType</type>
      <name>tableType</name>
      <anchorfile>class_spheroidal_silicate_grain_composition.html</anchorfile>
      <anchor>ae73e737f5bf0ce5a8db0b1c98f630400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpheroidalSilicateGrainComposition</name>
      <anchorfile>class_spheroidal_silicate_grain_composition.html</anchorfile>
      <anchor>a28fa0da5cb75e15e94caa44057e6cc06</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpinFlipHydrogenGasMix</name>
    <filename>class_spin_flip_hydrogen_gas_mix.html</filename>
    <base>EmittingGasMix</base>
    <member kind="function">
      <type>double</type>
      <name>defaultMetallicity</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a5fdad0e5b5684da1accf5dfc2a7c9cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>defaultNeutralFraction</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>aa40d4fce25715bec75653a61f3ad9e56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>defaultTemperature</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a14b2d7369c7b772f369bbdd1a9e51c93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DynamicStateType</type>
      <name>hasDynamicMediumState</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a134c45fd260bf742af1c97c41c0e9e90</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasExtraSpecificState</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a1c7bb4c5bc18d82e805f5092294a8eba</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLineEmission</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>adaf367147997d35ed6465660e30e1f59</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeTemperature</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>adfe42c625306a7b70a3ec08b79d4b4aa</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSpecificState</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a86e23cc763de0f4ba7f7824c56f18459</anchor>
      <arglist>(MaterialState *state, double metallicity, double temperature, const Array &amp;params) const override</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>lineEmissionCenters</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a8e6abb5451a6c115d58351b2e3d93f48</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>lineEmissionMasses</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>aa7cf6e84f947b825ad16ca57dcb6d608</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>lineEmissionSpectrum</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>afaf542be31561c74cbce4f87011bc107</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a88ca0a776b05f0e55c843dc285eb43f6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityAbs</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a598951bca3a794fb2f053cc63d754453</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a0ef2d3ed5dc13a2839162c06beafc912</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacitySca</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>ad1580b8c4bb7339e7b01bd8946f51a3c</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>abb746189ddcd1ae964595f39c76869de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peeloffScattering</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a06984db5dad1b8d46069096d7bbcc03c</anchor>
      <arglist>(double &amp;I, double &amp;Q, double &amp;U, double &amp;V, double &amp;lambda, Direction bfkobs, Direction bfky, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performScattering</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>aa79bcfeac1fbd025be50035aea1eed56</anchor>
      <arglist>(double lambda, const MaterialState *state, PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionAbs</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a7d21a0a833ee750ae5dd981dfc706751</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionExt</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a163400943378c634fba90ba4eade251c</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionSca</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>aa74e56e8c14379c3f2cada966db2b3f6</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; StateVariable &gt;</type>
      <name>specificStateVariableInfo</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a010101ead1ff1302750dc84f4960669a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>UpdateStatus</type>
      <name>updateSpecificState</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a77b54e90e60fe8d37bb5deb0a550f824</anchor>
      <arglist>(MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpinFlipHydrogenGasMix</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>ad550526b53e17a408c6e7bbe024ba58e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_spin_flip_hydrogen_gas_mix.html</anchorfile>
      <anchor>a095d2d2793c22ffad3f5a2241820b803</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpiralStructureGeometryDecorator</name>
    <filename>class_spiral_structure_geometry_decorator.html</filename>
    <base>GenGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>a255b36bb997a4ba1f0a8c50ae9747c6a</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>ae6eb3233c61a3761ee5e068393066261</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>AxGeometry *</type>
      <name>geometry</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>a35b04a467bbd370d945ef74489f597fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>a525addf6b62e8c872952c01f11bdac2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numArms</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>a44a7b81535b726a980e2b43035c8ef41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perturbationWeight</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>a34f8ca77bafe347193f510a000c1666b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phaseZeroPoint</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>a54c449089904c7dc36324275939dae75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pitchAngle</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>a5016e54c052ce55dbdfdabc7ae48723a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radiusZeroPoint</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>a4b612ec5db67e695590046e1c8a96aaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>a6c0d3ebe41d15f6de8ca5a6f953d829c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>ab3d2c2416f0b2e1e5c596216baaf6126</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>a520279ff44dcd172e833c5d1f5aa4364</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>a4f43916b01cd713209c39b1864174f87</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpiralStructureGeometryDecorator</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>af24e4b747b3c723bc618bc3c37eae92d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>perturbation</name>
      <anchorfile>class_spiral_structure_geometry_decorator.html</anchorfile>
      <anchor>ae3412566a18ada1d6d82f74b7972a107</anchor>
      <arglist>(double R, double phi) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Starburst99SED</name>
    <filename>class_starburst99_s_e_d.html</filename>
    <base>FamilySED</base>
    <member kind="function">
      <type>double</type>
      <name>age</name>
      <anchorfile>class_starburst99_s_e_d.html</anchorfile>
      <anchor>aab03adfd8b3dcfd8ba74bf85e9443ee2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>metallicity</name>
      <anchorfile>class_starburst99_s_e_d.html</anchorfile>
      <anchor>a5e096521d5bfe20989b113bd015f9bde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Starburst99SED</name>
      <anchorfile>class_starburst99_s_e_d.html</anchorfile>
      <anchor>a24c164d4cabd9b058f1d63f1d15cecd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SEDFamily *</type>
      <name>getFamilyAndParameters</name>
      <anchorfile>class_starburst99_s_e_d.html</anchorfile>
      <anchor>a48eedbaf4e80a78bff6bf0650e4693d5</anchor>
      <arglist>(Array &amp;parameters) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Starburst99SEDFamily</name>
    <filename>class_starburst99_s_e_d_family.html</filename>
    <base>SEDFamily</base>
    <member kind="function">
      <type></type>
      <name>Starburst99SEDFamily</name>
      <anchorfile>class_starburst99_s_e_d_family.html</anchorfile>
      <anchor>a31caed326efc9269f78f6d30453cb3f3</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_starburst99_s_e_d_family.html</anchorfile>
      <anchor>a1313d2e7889e355b0cc5c87d8f13ae8f</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, Array &amp;Pv, const Range &amp;wavelengthRange, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_starburst99_s_e_d_family.html</anchorfile>
      <anchor>a797c3f667af7211f87664f44b2b279d1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; SnapshotParameter &gt;</type>
      <name>parameterInfo</name>
      <anchorfile>class_starburst99_s_e_d_family.html</anchorfile>
      <anchor>a8ece5453dd097074b43d98edd5ef0009</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_starburst99_s_e_d_family.html</anchorfile>
      <anchor>aff83e316783ca0661f59a9f967e7ad5f</anchor>
      <arglist>(double wavelength, const Array &amp;parameters) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Starburst99SEDFamily</name>
      <anchorfile>class_starburst99_s_e_d_family.html</anchorfile>
      <anchor>a2936356d941b2bbddcf8078fc74300bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_starburst99_s_e_d_family.html</anchorfile>
      <anchor>a456de71cefc3954d4284a25e012e2185</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StateVariable</name>
    <filename>class_state_variable.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Identifier</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>a7c42b76f110c8b306a12b7034e6c51bc</anchor>
      <arglist></arglist>
      <enumvalue file="class_state_variable.html" anchor="a7c42b76f110c8b306a12b7034e6c51bcabd7a9717d29c5ddcab1bc175eda1e298">Volume</enumvalue>
      <enumvalue file="class_state_variable.html" anchor="a7c42b76f110c8b306a12b7034e6c51bcac69917f43cb0b8fa26dd81c534fb6ca1">BulkVelocity</enumvalue>
      <enumvalue file="class_state_variable.html" anchor="a7c42b76f110c8b306a12b7034e6c51bca37c662ba0fddd720a47bccc2ec668e23">MagneticField</enumvalue>
      <enumvalue file="class_state_variable.html" anchor="a7c42b76f110c8b306a12b7034e6c51bca7a494ad54edac742fedb68f30236dafd">NumberDensity</enumvalue>
      <enumvalue file="class_state_variable.html" anchor="a7c42b76f110c8b306a12b7034e6c51bca7214bddc1338cf841e0f2cb275ded06a">Metallicity</enumvalue>
      <enumvalue file="class_state_variable.html" anchor="a7c42b76f110c8b306a12b7034e6c51bcaee7a8e262285ed49ea1b4e4ae11525bd">Temperature</enumvalue>
      <enumvalue file="class_state_variable.html" anchor="a7c42b76f110c8b306a12b7034e6c51bca90589c47f06eb971d548591f23c285af">Custom</enumvalue>
    </member>
    <member kind="function">
      <type>int</type>
      <name>customIndex</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>a9f43c11e3c8d6b0e22e7c89a85f2d2ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>description</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>a4cb0fa2cda707474c727e8a91a0520e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>format</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>adb04e68ceaaa3b50cd29eb47736370cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Identifier</type>
      <name>identifier</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>a6e7691fb3f3793b1bc41c55ab819973e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>quantity</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>ad4d199b0778658a235654920ebf7f286</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StateVariable</type>
      <name>bulkVelocity</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>a920a862740fa2b0ef99fcc615f6469ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StateVariable</type>
      <name>custom</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>ac271b637d9f9f15dab75ae4fccb9814e</anchor>
      <arglist>(int customIndex, string description, string quantity, char format=&apos;e&apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StateVariable</type>
      <name>magneticField</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>abdd5b3e30bce35ddfe9e52a9abc7e77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StateVariable</type>
      <name>metallicity</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>af5f4c9ec8dfa7e0fda8e6db944a9efde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StateVariable</type>
      <name>numberDensity</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>a350842df12bebe2bb6f77cccea62c200</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StateVariable</type>
      <name>temperature</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>abf326d526d207f0a0bd6799fa2fd50e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StateVariable</type>
      <name>volume</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>adf3cdb69ac47078de15d110c1e8cf481</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>StateVariable</name>
      <anchorfile>class_state_variable.html</anchorfile>
      <anchor>a56df048ded2034f33beb41b9aae0dbfa</anchor>
      <arglist>(Identifier identifier, int customIndex, string description, string quantity, char format)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StellarSurfaceSource</name>
    <filename>class_stellar_surface_source.html</filename>
    <base>CenteredSource</base>
    <member kind="function">
      <type>int</type>
      <name>intrinsicDimension</name>
      <anchorfile>class_stellar_surface_source.html</anchorfile>
      <anchor>a92cd6d9d3b97aef547f91ca70795a2a3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launchSpecialty</name>
      <anchorfile>class_stellar_surface_source.html</anchorfile>
      <anchor>aa1428a8c02bcd000a3e0b6d789e08a41</anchor>
      <arglist>(PhotonPacket *pp, size_t historyIndex, double lambda, double Lw, VelocityInterface *bvi) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stellarRadius</name>
      <anchorfile>class_stellar_surface_source.html</anchorfile>
      <anchor>a3e19864aaea9b9a88e98bcb4e5194bcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StellarSurfaceSource</name>
      <anchorfile>class_stellar_surface_source.html</anchorfile>
      <anchor>a3167edf7388a6ce15d34447e68fbd38d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StellarUnits</name>
    <filename>class_stellar_units.html</filename>
    <base>Units</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>StellarUnits</name>
      <anchorfile>class_stellar_units.html</anchorfile>
      <anchor>a0f7a29ea248cda6aa16446f4a5a6f8c4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StochasticDustEmissionCalculator</name>
    <filename>class_stochastic_dust_emission_calculator.html</filename>
    <member kind="function">
      <type></type>
      <name>~StochasticDustEmissionCalculator</name>
      <anchorfile>class_stochastic_dust_emission_calculator.html</anchorfile>
      <anchor>a76a88d7550f30906973d28c5a827133f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>allocatedBytes</name>
      <anchorfile>class_stochastic_dust_emission_calculator.html</anchorfile>
      <anchor>adae8859d19ca2c8c390ceffd047f2b5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array</type>
      <name>emissivity</name>
      <anchorfile>class_stochastic_dust_emission_calculator.html</anchorfile>
      <anchor>ab5db032a2ac2f5f9fa07becbb19ba5fa</anchor>
      <arglist>(const Array &amp;Jv) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precalculate</name>
      <anchorfile>class_stochastic_dust_emission_calculator.html</anchorfile>
      <anchor>acd9bc12bb9273c19e30177db1037e92e</anchor>
      <arglist>(SimulationItem *item, const Array &amp;lambdav, const Array &amp;sigmaabsv, string grainType, double bulkDensity, double meanMass, const StoredTable&lt; 1 &gt; &amp;enthalpy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StokesVector</name>
    <filename>class_stokes_vector.html</filename>
    <member kind="function">
      <type></type>
      <name>StokesVector</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a7accd0b284948524d8bfc7ab0cc785e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StokesVector</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>ae14d623b2c27b1a84e3dcb64029404c9</anchor>
      <arglist>(double I, double Q, double U, double V, Direction n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyMueller</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>abe1291971f6b36a215966f25e5f4441c</anchor>
      <arglist>(double S11, double S12, double S33, double S34)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPolarized</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a8f80415eac387190b49cad0733f27e34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>linearPolarizationDegree</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a5db80953689906df1bf4fb720e38deb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>normal</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a1ca0246246def39742a67dcdf4439afd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>polarizationAngle</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a40370ee2bef76995694330431261b1b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rotateIntoPlane</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>aac5eb88249ddef274b66126e3dc9cade</anchor>
      <arglist>(Direction k, Direction knew)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotateStokes</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a14340de3d3cc8222fd90ca75a4afa9b7</anchor>
      <arglist>(double phi, Direction k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPolarized</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a3d61b018b939a7bf894944e3d2391515</anchor>
      <arglist>(const StokesVector &amp;polarization)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPolarized</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a46fd619fe38f049b0e254619419d9edf</anchor>
      <arglist>(double I, double Q, double U, double V, Direction n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnpolarized</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a7930c719d34ced2a8e6aa8a571fab5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stokes</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>ac99844c982ffacc7ad23b3bcfd4b4880</anchor>
      <arglist>(double &amp;I, double &amp;Q, double &amp;U, double &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stokesI</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a149a72a788de1b3a961f1a291fa955be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stokesQ</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a0ec594fbba2ed663a71c56aad08acd5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stokesU</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>ad84b85592ba010af55053790320e2283</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stokesV</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>accc9905daadc37915ac74a508dfc51c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalPolarizationDegree</name>
      <anchorfile>class_stokes_vector.html</anchorfile>
      <anchor>a2dffcdcd50f19ee5709e18f7453536f2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StopWatch</name>
    <filename>class_stop_watch.html</filename>
    <member kind="function">
      <type></type>
      <name>StopWatch</name>
      <anchorfile>class_stop_watch.html</anchorfile>
      <anchor>ad715945060eeb23baa3c036ad19b1edb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StopWatch</name>
      <anchorfile>class_stop_watch.html</anchorfile>
      <anchor>a223ec0da71dd0bc4f2b14d1af44bf20a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector&lt; string &gt;</type>
      <name>report</name>
      <anchorfile>class_stop_watch.html</anchorfile>
      <anchor>aabdd25c3faf3fcdb6013f05f12154db3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>start</name>
      <anchorfile>class_stop_watch.html</anchorfile>
      <anchor>ae6f3432d212fbb66f3575464a2453cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stop</name>
      <anchorfile>class_stop_watch.html</anchorfile>
      <anchor>ac7d6fa789ee27a514ddc4dca6da20528</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StoredColumns</name>
    <filename>class_stored_columns.html</filename>
    <member kind="function">
      <type></type>
      <name>StoredColumns</name>
      <anchorfile>class_stored_columns.html</anchorfile>
      <anchor>a39bddb1eadd26309de3bcef163cdc6a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StoredColumns</name>
      <anchorfile>class_stored_columns.html</anchorfile>
      <anchor>a96dd472d2e29683021ad922b11d69789</anchor>
      <arglist>(string filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StoredColumns</name>
      <anchorfile>class_stored_columns.html</anchorfile>
      <anchor>a3c86510d1d1d21135382103145a9e5e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>class_stored_columns.html</anchorfile>
      <anchor>a966a4734175ea0f429e07586f6c6ec9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; string &gt; &amp;</type>
      <name>columnNames</name>
      <anchorfile>class_stored_columns.html</anchorfile>
      <anchor>a62c1e632778ea03011dd9be63364da43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; string &gt; &amp;</type>
      <name>columnUnits</name>
      <anchorfile>class_stored_columns.html</anchorfile>
      <anchor>ab7edb9ed1f96c0346899113fba8019e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>nextRow</name>
      <anchorfile>class_stored_columns.html</anchorfile>
      <anchor>a54c9d540b8af0c33fd0c40c7a41fc06c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>class_stored_columns.html</anchorfile>
      <anchor>a79964772ae61bd13fffbd24d614abd73</anchor>
      <arglist>(string filepath)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StoredTable</name>
    <filename>class_stored_table.html</filename>
    <templarg>size_t N</templarg>
    <member kind="function">
      <type></type>
      <name>StoredTable</name>
      <anchorfile>class_stored_table.html</anchorfile>
      <anchor>ac94e0a356c4cd5dc530e1e1887370aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StoredTable</name>
      <anchorfile>class_stored_table.html</anchorfile>
      <anchor>afa1f22d25114b2d0fa4008c0c0278ce6</anchor>
      <arglist>(const SimulationItem *item, string filename, string axes, string quantity, bool clampFirstAxis=true, bool resource=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StoredTable</name>
      <anchorfile>class_stored_table.html</anchorfile>
      <anchor>a743e5f152726128b55eeda7ffcacbe9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cdf</name>
      <anchorfile>class_stored_table.html</anchorfile>
      <anchor>ace16795b5621608071ac1a389e09f8a9</anchor>
      <arglist>(Array &amp;xv, Array &amp;pv, Array &amp;Pv, Range xrange, Values... values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>class_stored_table.html</anchorfile>
      <anchor>a6ea035e3ee1065d36d184da9b0c8879d</anchor>
      <arglist>(const SimulationItem *item, string filename, string axes, string quantity, bool clampFirstAxis=true, bool resource=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>class_stored_table.html</anchorfile>
      <anchor>a05298a901d68c2a25c563a4380a2d674</anchor>
      <arglist>(Values... values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>class_stored_table.html</anchorfile>
      <anchor>ae9106a4eeb769d953315b9b0e4a0845a</anchor>
      <arglist>(Value value) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>valueArray</name>
      <anchorfile>class_stored_table.html</anchorfile>
      <anchor>a1582f74db5814cda9a4124344e7738d4</anchor>
      <arglist>(Array &amp;yv, const Array &amp;xv, Values... values) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringPropertyHandler</name>
    <filename>class_string_property_handler.html</filename>
    <base>PropertyHandler</base>
    <member kind="function">
      <type>void</type>
      <name>acceptVisitor</name>
      <anchorfile>class_string_property_handler.html</anchorfile>
      <anchor>a1f4e0289fefe9865c802894a590e35e3</anchor>
      <arglist>(PropertyHandlerVisitor *visitor) override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>defaultValue</name>
      <anchorfile>class_string_property_handler.html</anchorfile>
      <anchor>a70e33065ee6db3247af6b0268aaa50f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNames</name>
      <anchorfile>class_string_property_handler.html</anchorfile>
      <anchor>ae7bd4bc2cfe7110d2aacb3b24ea7d447</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidValue</name>
      <anchorfile>class_string_property_handler.html</anchorfile>
      <anchor>ab3162c9adb1d1ef51a2fd4e2dc438a34</anchor>
      <arglist>(string value) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_string_property_handler.html</anchorfile>
      <anchor>a842d0c91ab41aee39f48c0b2159ad785</anchor>
      <arglist>(const PropertyHandler &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyHandler</name>
      <anchorfile>class_string_property_handler.html</anchorfile>
      <anchor>a70cc449cdf73913e21c3b1951baa6d2c</anchor>
      <arglist>(Item *target, const PropertyDef *property, const SchemaDef *schema, NameManager *nameMgr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>class_string_property_handler.html</anchorfile>
      <anchor>a2d675156245f8ab2a3c940c684747705</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>value</name>
      <anchorfile>class_string_property_handler.html</anchorfile>
      <anchor>a234cbe7f4dc159a37f55bb448f5e1186</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringPropertyWizardPane</name>
    <filename>class_string_property_wizard_pane.html</filename>
    <base>PropertyWizardPane</base>
    <member kind="slot">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>class_string_property_wizard_pane.html</anchorfile>
      <anchor>aaf2b238e87c0c9cca8ce4ccf67d75d07</anchor>
      <arglist>(const QString &amp;text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPropertyWizardPane</name>
      <anchorfile>class_string_property_wizard_pane.html</anchorfile>
      <anchor>ab76b163f0f2325aaf6e67a916a975446</anchor>
      <arglist>(std::unique_ptr&lt; PropertyHandler &gt; handler, QObject *target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringUtils</name>
    <filename>class_string_utils.html</filename>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>addExtension</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a9385daa69cee91ea0bd371a1bbd000a8</anchor>
      <arglist>(string filename, string extension)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a3f97f365d65cfe2438acc0deb2c81d20</anchor>
      <arglist>(const vector&lt; string &gt; &amp;list, string find)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>ae06bbe9bd7356395d3838c72357199ee</anchor>
      <arglist>(string text, string find)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>dirPath</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a420e248e4a4c6fa13b6e44dd3e961e95</anchor>
      <arglist>(string filepath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>endsWith</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>ab023874eaaa2a397fa8ac3bfd5f2a44c</anchor>
      <arglist>(string text, string find)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>filename</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a02ca89d2cbce23d96cd6a809f1c1b34b</anchor>
      <arglist>(string filepath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>filenameBase</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a95bb26e7c2d58ef61506facd39bf3218</anchor>
      <arglist>(string filepath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>indexOf</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>aec04b544531076ea9f7f3d4edfc168ab</anchor>
      <arglist>(const vector&lt; string &gt; &amp;list, string find)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAbsolutePath</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>ade282859c2792175052b37051a507e75</anchor>
      <arglist>(string filepath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidBool</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a08f09cc99798074f8c59fd080d84500e</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidDouble</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a58237f363fd650ce2b45af9dab5390b1</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidInt</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a3ab8fc68500bfda4e301de42272a4289</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>join</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a95ed3e3a67bee0dddcb6c3fae310b35e</anchor>
      <arglist>(const vector&lt; string &gt; &amp;list, string separator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>joinPaths</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a917cacb61ddc234e2d9a8f288c84dbda</anchor>
      <arglist>(string segment1, string segment2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>matches</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a993963feb451e7c4257b56cb3a7dd3f5</anchor>
      <arglist>(string text, string pattern)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>padLeft</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a9f3298b15bcef8966c71c54b2d7be1d1</anchor>
      <arglist>(string text, size_t length, char pad=&apos; &apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>padRight</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>adee90c72e9a368473445a727602a04c1</anchor>
      <arglist>(string text, size_t length, char pad=&apos; &apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>replace</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>aa44bc2e72c3b79e5c2cb98f0a64cc598</anchor>
      <arglist>(string text, string find, string replace)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector&lt; string &gt;</type>
      <name>split</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a0a48eaca7c19945bdb20624512bb43f8</anchor>
      <arglist>(string text, string separator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>squeeze</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a87519edb316aba6e2a722131bffd0299</anchor>
      <arglist>(string text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>startsWith</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>ac4235704cc5c04896f40543500ff1691</anchor>
      <arglist>(string text, string find)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>toBool</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a5d0bcf18e711861805540e30538df310</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>toDouble</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a9d9b19a2328800c544b9e9d09d221c93</anchor>
      <arglist>(string value, bool *ok=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>toInt</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>aa47b9e7996249fbb36044d6c55092d07</anchor>
      <arglist>(string value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>toLower</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>adadddfe300d18cfbc6b5b0dd32cfed75</anchor>
      <arglist>(string text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>toMemSizeString</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a878d89b0fd1fb2a82562ef1f3ede3aaa</anchor>
      <arglist>(size_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>toString</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>aaef371398ddcc8c8eee8a7441bec7efe</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>toString</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>a178ce60d8b15f2493ca756c95cf98638</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>toString</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>ac08a6c1e49295ce8448efa011c766ad9</anchor>
      <arglist>(double value, char format, int precision=6, int width=1, char pad=&apos; &apos;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>toString</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>adadde0380b331f6350d585c8191d5579</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>toUpper</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>aef46aa21252c87624ac7e530d823a741</anchor>
      <arglist>(string text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>toUpperFirst</name>
      <anchorfile>class_string_utils.html</anchorfile>
      <anchor>aa3b140f65d3be47203fb10f1828e73a4</anchor>
      <arglist>(string text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubItemPropertyWizardPane</name>
    <filename>class_sub_item_property_wizard_pane.html</filename>
    <base>PropertyWizardPane</base>
    <member kind="slot">
      <type>void</type>
      <name>selectTypeFor</name>
      <anchorfile>class_sub_item_property_wizard_pane.html</anchorfile>
      <anchor>a22191d8ba33afbb8f51500ac53ee9324</anchor>
      <arglist>(QAbstractButton *button)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubItemPropertyWizardPane</name>
      <anchorfile>class_sub_item_property_wizard_pane.html</anchorfile>
      <anchor>adeaebbcfc1a4c6c4c040c0f4eddff864</anchor>
      <arglist>(std::unique_ptr&lt; PropertyHandler &gt; handler, QObject *target)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>selectedIndex</name>
      <anchorfile>class_sub_item_property_wizard_pane.html</anchorfile>
      <anchor>a8003e48040fc7e85650c867505c8dd44</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SunSED</name>
    <filename>class_sun_s_e_d.html</filename>
    <base>ResourceSED</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>SunSED</name>
      <anchorfile>class_sun_s_e_d.html</anchorfile>
      <anchor>a674ab0adaccfe2b6d52fe0232f629df8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>string</type>
      <name>resourceName</name>
      <anchorfile>class_sun_s_e_d.html</anchorfile>
      <anchor>ae408513eb454c30dc6723fa0addb801f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SymPowMesh</name>
    <filename>class_sym_pow_mesh.html</filename>
    <base>MoveableMesh</base>
    <member kind="function">
      <type>Array</type>
      <name>mesh</name>
      <anchorfile>class_sym_pow_mesh.html</anchorfile>
      <anchor>aad1f83ba92d402dc6fa4966df7368440</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ratio</name>
      <anchorfile>class_sym_pow_mesh.html</anchorfile>
      <anchor>a4c7a664923aca4638fce9b60daf03501</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SymPowMesh</name>
      <anchorfile>class_sym_pow_mesh.html</anchorfile>
      <anchor>a03b54afad333abdce21b757353a00a33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>System</name>
    <filename>class_system.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>ab072f5bfc9e277b72b9749a87a0675b8</anchor>
      <arglist></arglist>
      <enumvalue file="class_system.html" anchor="ab072f5bfc9e277b72b9749a87a0675b8a4059b0251f66a18cb56f544728796875">Info</enumvalue>
      <enumvalue file="class_system.html" anchor="ab072f5bfc9e277b72b9749a87a0675b8a0eaadb4fcb48a0a0ed7bc9868be9fbaa">Warning</enumvalue>
      <enumvalue file="class_system.html" anchor="ab072f5bfc9e277b72b9749a87a0675b8a505a83f220c02df2f85c3810cd9ceb38">Success</enumvalue>
      <enumvalue file="class_system.html" anchor="ab072f5bfc9e277b72b9749a87a0675b8a902b0d55fddef6f8d651fe1035b7d4bd">Error</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>System</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a5f57703169a9d3588126c571ca1ab068</anchor>
      <arglist>(const System &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>System</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a86bd5ecd97dc806e38e8afc4226d02d5</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~System</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a3be70bb338e3f062f821173fd15680d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>System &amp;</type>
      <name>operator=</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>aafae2e9e2b6fca162706a06861605194</anchor>
      <arglist>(const System &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; void *, size_t &gt;</type>
      <name>acquireMemoryMap</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>af93a97ce768f01109e396b0332e2ffaa</anchor>
      <arglist>(string path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector&lt; string &gt;</type>
      <name>arguments</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a32bf7d22150f8c6a506b98fc7b915f4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>availableMemory</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>ae48e4567bea318ddf93d5ebc58b41e62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>canonicalPath</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>aa180eda8fa60960f58372f7aac71e2ce</anchor>
      <arglist>(string path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>currentMemoryUsage</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a7351c28cef6ce408e9d3fbe1a9b7553a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector&lt; string &gt;</type>
      <name>dirsInDirectory</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a3129d809f443052c81c3d555a1b7543f</anchor>
      <arglist>(string directory)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>executablePath</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>adc7af6e28f1e443d1cf9b73d8c2fb13b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector&lt; string &gt;</type>
      <name>filesInDirectory</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>afc421b9b91bcdfd1b470c593b2cf2cf2</anchor>
      <arglist>(string directory)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>hostname</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a0bc163b4afa777558b7c6041c356f021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ifstream</type>
      <name>ifstream</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>acee12f6b2da03cc2c971709aa3912ceb</anchor>
      <arglist>(string path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDir</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>aaa6ec1faca9a25e4f37c45ea8371211d</anchor>
      <arglist>(string path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isFile</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a7aab9aaf6bbe105a14738771f73f032f</anchor>
      <arglist>(string path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>log</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a4452aba17ba7376c2134e027d689e060</anchor>
      <arglist>(string message, LogLevel level=LogLevel::Info)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>makeDir</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a6ad4626ce4eb8327861298aba4e9c98a</anchor>
      <arglist>(string directory)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ofstream</type>
      <name>ofstream</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a6bb17657fe5e7b98d4e7986977c7b6fb</anchor>
      <arglist>(string path, bool append=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>peakMemoryUsage</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a08fa6eb70d54cf3ce0e7fb5cf71bafd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>prompt</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>ab2dad667c70ab38fcdd62e7bd0a5fcdf</anchor>
      <arglist>(string message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>releaseMemoryMap</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a4e4a71b5488d9f8dcf835bd19dc00771</anchor>
      <arglist>(string path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>removeFile</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a827bcbb2b06846d19560635878aa5e6a</anchor>
      <arglist>(string path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector&lt; string &gt;</type>
      <name>stacktrace</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a55f8eb6c58f1fb90b4566347911df03e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>timestamp</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a12563bc9ffaf96e99cd3663f8730dfb2</anchor>
      <arglist>(bool iso8601=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>username</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a2df18b44b5e408655a2bb10b80f29df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>finalize</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a9c7ea7e613c7a9708a928aa75f72b1bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>class_system.html</anchorfile>
      <anchor>a22d2f9480bbda324e9df731d918c7723</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Table</name>
    <filename>class_table.html</filename>
    <templarg>size_t N</templarg>
    <member kind="function">
      <type></type>
      <name>Table</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>acc931f37156eece0fec5c85da521d187</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Table</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>a136e2e07edd652aa0184137ca3b1e201</anchor>
      <arglist>(Sizes... sizes)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>data</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>a3fc1988c2634c71f6ab9b390ff988088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Array &amp;</type>
      <name>data</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>ad710f807fb368f232b3ca879f930cbcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>flattenedIndex</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>adb0fa150b0f949080f9b39cf052c5071</anchor>
      <arglist>(Indices... indices) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>af9e83a6f61644ab12b2a765b47a3927e</anchor>
      <arglist>(Indices... indices)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>aa925aea9e522115faaac822031a6464b</anchor>
      <arglist>(Indices... indices) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>af77e0f1aa7825edc1ef3f9973d7c8250</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>a0c0d0803f14a1a7c8b22714c9c757b68</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>a98846ef3a0b89567b6cda33c858b104d</anchor>
      <arglist>(Sizes... sizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToZero</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>abf245303c19b443f4994f3c9a58487c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>a36bcc3563d2ddd3ce1265dede7e5d277</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_table.html</anchorfile>
      <anchor>a59264337babc653e6077ec3b2ca3703b</anchor>
      <arglist>(size_t dim) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabulatedBand</name>
    <filename>class_tabulated_band.html</filename>
    <base>Band</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>TabulatedBand</name>
      <anchorfile>class_tabulated_band.html</anchorfile>
      <anchor>abf718005144587510a8c45a5c57a5cde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>dataSize</name>
      <anchorfile>class_tabulated_band.html</anchorfile>
      <anchor>acf2850d914ecc5cfa0a42642e170109b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>getWavelengthsAndTransmissions</name>
      <anchorfile>class_tabulated_band.html</anchorfile>
      <anchor>a4b30e7494142c17ea9516a8938574ae8</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;transv) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_tabulated_band.html</anchorfile>
      <anchor>ada11193a950238a7b83719e8908c7051</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const double *</type>
      <name>transmissionData</name>
      <anchorfile>class_tabulated_band.html</anchorfile>
      <anchor>a07a9e51c94318f69855718b42556dd41</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const double *</type>
      <name>wavelengthData</name>
      <anchorfile>class_tabulated_band.html</anchorfile>
      <anchor>afe9e43cb6a1a31df7412d3e902e069eb</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabulatedDustMix</name>
    <filename>class_tabulated_dust_mix.html</filename>
    <base>DustMix</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>TabulatedDustMix</name>
      <anchorfile>class_tabulated_dust_mix.html</anchorfile>
      <anchor>ad3d04f6dd73e795edec17a0efc6d3b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>getDustProperties</name>
      <anchorfile>class_tabulated_dust_mix.html</anchorfile>
      <anchor>ab47099ee96b59ada74ef9a99f95cb06a</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;kappaextv, Array &amp;albedov, Array &amp;asymmparv) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getOpticalProperties</name>
      <anchorfile>class_tabulated_dust_mix.html</anchorfile>
      <anchor>a90091e491c79559b8123e9a90a1c14bc</anchor>
      <arglist>(const Array &amp;lambdav, const Array &amp;thetav, Array &amp;sigmaabsv, Array &amp;sigmascav, Array &amp;asymmparv, Table&lt; 2 &gt; &amp;S11vv, Table&lt; 2 &gt; &amp;S12vv, Table&lt; 2 &gt; &amp;S33vv, Table&lt; 2 &gt; &amp;S34vv, ArrayTable&lt; 2 &gt; &amp;sigmaabsvv, ArrayTable&lt; 2 &gt; &amp;sigmaabspolvv) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabulatedMesh</name>
    <filename>class_tabulated_mesh.html</filename>
    <base>MoveableMesh</base>
    <member kind="function">
      <type>Array</type>
      <name>mesh</name>
      <anchorfile>class_tabulated_mesh.html</anchorfile>
      <anchor>abda099cfa069c4ff2b0eecdf10c234c7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TabulatedMesh</name>
      <anchorfile>class_tabulated_mesh.html</anchorfile>
      <anchor>a570bf39f65dc30f7c784687dc26a0af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual vector&lt; double &gt;</type>
      <name>getMeshBorderPoints</name>
      <anchorfile>class_tabulated_mesh.html</anchorfile>
      <anchor>a512f4782c8ce3dfc1c9a7b1348a22ec2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_tabulated_mesh.html</anchorfile>
      <anchor>a28a4df15fe212f7043f27a46b44a4279</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabulatedSED</name>
    <filename>class_tabulated_s_e_d.html</filename>
    <base>ContSED</base>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_tabulated_s_e_d.html</anchorfile>
      <anchor>a76a8a60fb727fe0c1e03a3690e3dfa0b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>integratedLuminosity</name>
      <anchorfile>class_tabulated_s_e_d.html</anchorfile>
      <anchor>a1f9ff0002b85d61fe2095ce8dc2aed85</anchor>
      <arglist>(const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>intrinsicWavelengthRange</name>
      <anchorfile>class_tabulated_s_e_d.html</anchorfile>
      <anchor>abcf5b5842a29b3feb02d72797e04f124</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>specificLuminosity</name>
      <anchorfile>class_tabulated_s_e_d.html</anchorfile>
      <anchor>a29c5413cf81a0e4724aa52ce3b25537b</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>specificLuminosityArray</name>
      <anchorfile>class_tabulated_s_e_d.html</anchorfile>
      <anchor>a9e358c55b719a84023bc1ee5bb28f636</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv, const Range &amp;wavelengthRange) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TabulatedSED</name>
      <anchorfile>class_tabulated_s_e_d.html</anchorfile>
      <anchor>a4214e03a20890c2072e4b5ad75e9c92c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>getWavelengthsAndLuminosities</name>
      <anchorfile>class_tabulated_s_e_d.html</anchorfile>
      <anchor>acad540247d7633881d481fda25c8dec2</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_tabulated_s_e_d.html</anchorfile>
      <anchor>afc685b39cc26618992490a85bc0b0651</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TabulatedWavelengthDistribution</name>
    <filename>class_tabulated_wavelength_distribution.html</filename>
    <base>WavelengthDistribution</base>
    <member kind="function">
      <type>double</type>
      <name>generateWavelength</name>
      <anchorfile>class_tabulated_wavelength_distribution.html</anchorfile>
      <anchor>a66540966fbdcbb767d5d86b3a1e1ee68</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probability</name>
      <anchorfile>class_tabulated_wavelength_distribution.html</anchorfile>
      <anchor>ad64193388b034bcf902ab7adfbd1ff4b</anchor>
      <arglist>(double wavelength) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TabulatedWavelengthDistribution</name>
      <anchorfile>class_tabulated_wavelength_distribution.html</anchorfile>
      <anchor>aee391c0835bb41c90ca651e75c738892</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>getWavelengthsAndProbabilities</name>
      <anchorfile>class_tabulated_wavelength_distribution.html</anchorfile>
      <anchor>a99e17dac5f38499b94b504546d89c354</anchor>
      <arglist>(Array &amp;lambdav, Array &amp;pv) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_tabulated_wavelength_distribution.html</anchorfile>
      <anchor>a2a3cc802b28df35fec9b6d323ee79f79</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TargetTypedPropertyAccessor</name>
    <filename>class_target_typed_property_accessor.html</filename>
    <templarg>typename V</templarg>
    <templarg>class T</templarg>
    <templarg>typename</templarg>
    <base>TypedPropertyAccessor</base>
  </compound>
  <compound kind="class">
    <name>TemperatureProbe</name>
    <filename>class_temperature_probe.html</filename>
    <base>SpatialGridWhenFormProbe</base>
    <member kind="enumeration">
      <type></type>
      <name>Aggregation</name>
      <anchorfile>class_temperature_probe.html</anchorfile>
      <anchor>a1bb52ba0eba57ba4e7e45e9281aaf929</anchor>
      <arglist></arglist>
      <enumvalue file="class_temperature_probe.html" anchor="a1bb52ba0eba57ba4e7e45e9281aaf929a2cb05e4bb7830be982f0922fed86b4cd">Component</enumvalue>
      <enumvalue file="class_temperature_probe.html" anchor="a1bb52ba0eba57ba4e7e45e9281aaf929aa1fa27779242b4902f7ae3bdd5c6d508">Type</enumvalue>
    </member>
    <member kind="function">
      <type>Aggregation</type>
      <name>aggregation</name>
      <anchorfile>class_temperature_probe.html</anchorfile>
      <anchor>ad7209d95823a55ca2d6422b9565a7861</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_temperature_probe.html</anchorfile>
      <anchor>abbe3754bf0008a6dfc49d3df4b3b31c7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TemperatureProbe</name>
      <anchorfile>class_temperature_probe.html</anchorfile>
      <anchor>a5afcc4780f2bdc52c49a50d93f0e58ac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemperatureWavelengthCellLibrary</name>
    <filename>class_temperature_wavelength_cell_library.html</filename>
    <base>SpatialCellLibrary</base>
    <member kind="function">
      <type>int</type>
      <name>numTemperatures</name>
      <anchorfile>class_temperature_wavelength_cell_library.html</anchorfile>
      <anchor>a6c7a2e36b0deeb63fd02480f1b752a18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numWavelengths</name>
      <anchorfile>class_temperature_wavelength_cell_library.html</anchorfile>
      <anchor>a5c8bc3dd0c037c8291f0e1266d4a826d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TemperatureWavelengthCellLibrary</name>
      <anchorfile>class_temperature_wavelength_cell_library.html</anchorfile>
      <anchor>a3aee1c6f419422f03e38215a173bf0da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>mapping</name>
      <anchorfile>class_temperature_wavelength_cell_library.html</anchorfile>
      <anchor>a0a7770e08a21343086fad6d79ae4fd23</anchor>
      <arglist>(const Array &amp;bv) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numEntries</name>
      <anchorfile>class_temperature_wavelength_cell_library.html</anchorfile>
      <anchor>a2842ca15cafcec03e69d3261fa96fac9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextInFile</name>
    <filename>class_text_in_file.html</filename>
    <class kind="class">TextInFile::ColumnInfo</class>
    <member kind="function">
      <type></type>
      <name>TextInFile</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>adc979a6aebf67e7a69c0876930058bfe</anchor>
      <arglist>(const SimulationItem *item, string filename, string description, bool resource=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextInFile</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>a61e6c425a9a7f01ec71c85e4cebb42e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColumn</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>ad905b4534918f22788ff744be7c504a0</anchor>
      <arglist>(string description, string quantity=string(), string defaultUnit=string())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>ad9b225a40da9b9270f4f6ed9e09700e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Array &gt;</type>
      <name>readAllColumns</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>aa82bf3fa34dc84bad119cb8d8adf7fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAllColumns</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>a349e4cb21f31e1a74ebb70ac85e4931e</anchor>
      <arglist>(Columns &amp;... columns)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Array &gt;</type>
      <name>readAllRows</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>a53c79a65bb70678b10272da02b710ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readNonLeaf</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>ad4cae0125fa8f6886413b86921f9f018</anchor>
      <arglist>(int &amp;nx, int &amp;ny, int &amp;nz)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readRow</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>a7be60642e15a47465c05eb42fe493d43</anchor>
      <arglist>(Array &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readRow</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>a05d3ce8bb2d83a16ee8f2e832c1b67b9</anchor>
      <arglist>(Values &amp;... values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useColumns</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>a5cdf26f9b6f082df6d215c95f03a654e</anchor>
      <arglist>(string columns)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>size_t</type>
      <name>indexForName</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>a24d589cc8bd96da39ca58d5d017de905</anchor>
      <arglist>(string name) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>size_t</type>
      <name>waveIndexForSpecificQuantity</name>
      <anchorfile>class_text_in_file.html</anchorfile>
      <anchor>a2699a42375263a31c7a69d46f35ef284</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TextInFile::ColumnInfo</name>
    <filename>class_text_in_file_1_1_column_info.html</filename>
  </compound>
  <compound kind="class">
    <name>TextOutFile</name>
    <filename>class_text_out_file.html</filename>
    <member kind="function">
      <type></type>
      <name>TextOutFile</name>
      <anchorfile>class_text_out_file.html</anchorfile>
      <anchor>a4c04bc60bbfb27c1f9a08c8ea1a1975c</anchor>
      <arglist>(const SimulationItem *item, string filename, string description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextOutFile</name>
      <anchorfile>class_text_out_file.html</anchorfile>
      <anchor>a90d9b1bfc28eaa1240a9fa11870cb959</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColumn</name>
      <anchorfile>class_text_out_file.html</anchorfile>
      <anchor>a976abc75a1cab23a0e627cf1b4732258</anchor>
      <arglist>(string quantityDescription, string unitDescription=string(), char format=&apos;e&apos;, int precision=9)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>class_text_out_file.html</anchorfile>
      <anchor>ac9a62137816cc20ddf03692c58271a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeLine</name>
      <anchorfile>class_text_out_file.html</anchorfile>
      <anchor>a392bf96f7092937202db33bcbff228dc</anchor>
      <arglist>(string line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRow</name>
      <anchorfile>class_text_out_file.html</anchorfile>
      <anchor>a7ab628389024b0476f0e9c7ab7cb79a3</anchor>
      <arglist>(Values... values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRow</name>
      <anchorfile>class_text_out_file.html</anchorfile>
      <anchor>a295e52a898095504a752983315db7548</anchor>
      <arglist>(vector&lt; double &gt; values)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeRowPrivate</name>
      <anchorfile>class_text_out_file.html</anchorfile>
      <anchor>a561cb37bbd384cbafa76ff09b421b1cc</anchor>
      <arglist>(size_t n, const double *values)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThemisDustMix</name>
    <filename>class_themis_dust_mix.html</filename>
    <base>MultiGrainDustMix</base>
    <member kind="function">
      <type>int</type>
      <name>numHydrocarbonSizes</name>
      <anchorfile>class_themis_dust_mix.html</anchorfile>
      <anchor>af7fd33c9e64d0e898ce9188748226789</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSilicateSizes</name>
      <anchorfile>class_themis_dust_mix.html</anchorfile>
      <anchor>a8cd1675fb41f5fadb006d4c9ed977ca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThemisDustMix</name>
      <anchorfile>class_themis_dust_mix.html</anchorfile>
      <anchor>a9e3a40c50f149947e70750f572e32850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_themis_dust_mix.html</anchorfile>
      <anchor>a9dd0c2b58865c4712554793f3e221ceb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadLocalMember</name>
    <filename>class_thread_local_member.html</filename>
    <templarg>class T</templarg>
    <class kind="struct">ThreadLocalMember::Repository</class>
    <member kind="function">
      <type>vector&lt; T * &gt;</type>
      <name>all</name>
      <anchorfile>class_thread_local_member.html</anchorfile>
      <anchor>ae6b761c0754bdb9bef01ec6c86986322</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>local</name>
      <anchorfile>class_thread_local_member.html</anchorfile>
      <anchor>a8eca8544a5697d13e5b03ccf2c083543</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ThreadLocalMember::Repository</name>
    <filename>struct_thread_local_member_1_1_repository.html</filename>
  </compound>
  <compound kind="class">
    <name>TimeLogger</name>
    <filename>class_time_logger.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeLogger</name>
      <anchorfile>class_time_logger.html</anchorfile>
      <anchor>a60dadea1979e6edf0e152f2d24caf4c3</anchor>
      <arglist>(Log *log, string scope)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeLogger</name>
      <anchorfile>class_time_logger.html</anchorfile>
      <anchor>a1d9436da7c7e769ef16f7b13b0ba4689</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TorusGeometry</name>
    <filename>class_torus_geometry.html</filename>
    <base>AxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>cutoffRadius</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>a0fe827834eebd7ba8a590b9c35f69e31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>a8ccdbe01c744631277066342967c85c7</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponent</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>adaa625a5d68b5a7cd0de6ff7612ac29b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>ad7532f92cbf7f89c7b92ea31ab38ed32</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>index</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>a850cb9ebcc9d52c3babd413830b16a0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxRadius</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>a6c865b3da6a2fc5be4fbb1ce07b2fff1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minRadius</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>a0067d870791d238496b3a31380d2534f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>openingAngle</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>aa50694c1a932997db178d45126b57193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reshapeInnerRadius</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>a7d54b438f654383c9c6ad153469f87e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>a5fcdef88ec384426a85d1011c0e1bf27</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>a57c280216871b61d145dde38c128bfac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TorusGeometry</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>ad9cb51b2c85217c4ee8d4c7b921981b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_torus_geometry.html</anchorfile>
      <anchor>a995f165910c12bf28ddb8a4099da0aad</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeNode</name>
    <filename>class_tree_node.html</filename>
    <base>Box</base>
    <member kind="enumeration">
      <type></type>
      <name>Wall</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>af8ce96fb484ed8587e9f6ffddb700cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeNode</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>a88b20de8b88cc626a5b4423247e675f4</anchor>
      <arglist>(const Box &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeNode</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>af6d3c6ca610a38ac0d31867ffc521c96</anchor>
      <arglist>(TreeNode *parent, int id, const Box &amp;extent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TreeNode</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>aeafdc2c34a1b958cfd39b0ded64738ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNeighbor</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>adeb0303893b5dfe9c1f06c55bac93d44</anchor>
      <arglist>(Wall wall, TreeNode *node)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addNeighbors</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>ac065ba00db9667dab7d2828a1a507fea</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TreeNode *</type>
      <name>child</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>abbecbaab695442f3d05456ac3ef10898</anchor>
      <arglist>(Vec r)=0</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; TreeNode * &gt; &amp;</type>
      <name>children</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>ab6793610b150866efbb19f0b4572703d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>createChildren</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>a45cb4b2eb2576caaae7b7264a4037d8b</anchor>
      <arglist>(int id)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteNeighbor</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>a3acd8c7a7bf7b25a718dcec4125239f9</anchor>
      <arglist>(Wall wall, TreeNode *node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>ad546a49ffba15cfda6910ac0195fe13e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChildless</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>aeb659555ce861b8cbdd43874282e4073</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TreeNode *</type>
      <name>leafChild</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>a24897f73109b5294426ac97fbcbc8106</anchor>
      <arglist>(Vec r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>a0bd518e75d64f8f5140fe4c125ab69c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TreeNode *</type>
      <name>neighbor</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>ac2e1ecb5d6a31b413c949b714398abbc</anchor>
      <arglist>(Wall wall, Vec r) const</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; TreeNode * &gt; &amp;</type>
      <name>neighbors</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>a0b29aaf75b6372d2cfa382de37bc2ad2</anchor>
      <arglist>(Wall wall) const</arglist>
    </member>
    <member kind="function">
      <type>TreeNode *</type>
      <name>parent</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>a697499278ab681622a4da620aa6612de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortNeighbors</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>a4bd9a91e324a4dda81730b08ee79e64e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subdivide</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>ab91bf3f8c392977e963353593ed15085</anchor>
      <arglist>(vector&lt; TreeNode * &gt; &amp;nodev)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeNeighbors</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>a8710086e708cb6b1be3182a5be1c99f3</anchor>
      <arglist>(Wall wall1, TreeNode *node1, TreeNode *node2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>a6b1c9937781afd0acae55b610a5c327c</anchor>
      <arglist>(TreeNode *child)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TreeNode *</type>
      <name>childAt</name>
      <anchorfile>class_tree_node.html</anchorfile>
      <anchor>ae1196ceb15c116df281c6e1a6cb9bc73</anchor>
      <arglist>(int l)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreePolicy</name>
    <filename>class_tree_policy.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual vector&lt; TreeNode * &gt;</type>
      <name>constructTree</name>
      <anchorfile>class_tree_policy.html</anchorfile>
      <anchor>aca943d2bbb97f351380accb0a6dbb589</anchor>
      <arglist>(TreeNode *root)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>class_tree_policy.html</anchorfile>
      <anchor>af322879ff8c75f4fe9699ccf304e3737</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>minLevel</name>
      <anchorfile>class_tree_policy.html</anchorfile>
      <anchor>a3bc26768e333196325199a9932f7b3ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TreePolicy</name>
      <anchorfile>class_tree_policy.html</anchorfile>
      <anchor>a2ef127e337af8ec5dc86ada0c8cad434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_tree_policy.html</anchorfile>
      <anchor>a7f6dfed456cb39a3b4b0bca082d12ba1</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeSpatialGrid</name>
    <filename>class_tree_spatial_grid.html</filename>
    <base>BoxSpatialGrid</base>
    <member kind="function">
      <type></type>
      <name>~TreeSpatialGrid</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a51fe92c9220789c17b6517e2c3925149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cellIndex</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a1fdf5b5d731ed6679f313085cfd555c8</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>centralPositionInCell</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a2bd91da19c2339b0a9f68ca5130b95fe</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; PathSegmentGenerator &gt;</type>
      <name>createPathSegmentGenerator</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a34d1ba93d1ae0ca041ff9aed575e4c50</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a80d8acc1412b93d54bc5c9bc0d46341e</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numCells</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a0ace1972968ef580d23de90e063fbc54</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>randomPositionInCell</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>ab9d8fd27980c6877b8be1345243b6807</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a94dad9ac4f3c24f86fcd7ba52aa7eef3</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTopology</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a947522a09995b013dcff0be50a958f7c</anchor>
      <arglist>(TextOutFile *outfile) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TreeSpatialGrid</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a1717c6cca192a4019859abc50d8ee0a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual vector&lt; TreeNode * &gt;</type>
      <name>constructTree</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a193c6ef9b0e90f0c28a545772607edfc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfAfter</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a4f587d4091bb4f816269790488480a3c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xy</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>ada4896ad323d1d15ddf1e0b8b20d918c</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xyz</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>a2e33ec0e04145ef2f89b7aeee15b7144</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_xz</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>af6b6e51f55a8408cf3664256494c95f6</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_yz</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>ac6d9f902d2693ffb2837078918193fa7</anchor>
      <arglist>(SpatialGridPlotFile *outfile) const override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>cellIndexForNode</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>ac1bca6c3799b547672661c0ea6bb07c0</anchor>
      <arglist>(const TreeNode *node) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TreeNode *</type>
      <name>nodeForCellIndex</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>ab5226610ac64d4ee8b8f909b96bb8ff7</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TreeNode *</type>
      <name>root</name>
      <anchorfile>class_tree_spatial_grid.html</anchorfile>
      <anchor>ab73079e30b2a560c4a612b339e2cd6e3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeSpatialGridTopologyProbe</name>
    <filename>class_tree_spatial_grid_topology_probe.html</filename>
    <base>SpecialtyProbe</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>TreeSpatialGridTopologyProbe</name>
      <anchorfile>class_tree_spatial_grid_topology_probe.html</anchorfile>
      <anchor>afc054adb6a930bb8cc8dfce094501330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_tree_spatial_grid_topology_probe.html</anchorfile>
      <anchor>ae50aa49c85f294f9e37b045129edbff2</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriaxialGeometryDecorator</name>
    <filename>class_triaxial_geometry_decorator.html</filename>
    <base>GenGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_triaxial_geometry_decorator.html</anchorfile>
      <anchor>ab8192a6e5cfaf3d4866e02dd343e2fd5</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flatteningY</name>
      <anchorfile>class_triaxial_geometry_decorator.html</anchorfile>
      <anchor>a8c04ac2f79699bf86e1f2daad2083234</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flatteningZ</name>
      <anchorfile>class_triaxial_geometry_decorator.html</anchorfile>
      <anchor>a3c58ec18315b5c7cebd5bde522e0d2ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_triaxial_geometry_decorator.html</anchorfile>
      <anchor>a4729bc34f3b1de48b0bf0f08465e3c04</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>SpheGeometry *</type>
      <name>geometry</name>
      <anchorfile>class_triaxial_geometry_decorator.html</anchorfile>
      <anchor>a9c08f07d25a6f4a223f9d9322c620b1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_triaxial_geometry_decorator.html</anchorfile>
      <anchor>a51818e647a85a9cfb828a0cae55522d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_triaxial_geometry_decorator.html</anchorfile>
      <anchor>adfaa170226053b5e9976489d28a33996</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_triaxial_geometry_decorator.html</anchorfile>
      <anchor>a8be5409acd0a72db843ac2093943f091</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TriaxialGeometryDecorator</name>
      <anchorfile>class_triaxial_geometry_decorator.html</anchorfile>
      <anchor>a4b74568a032be1731fb8bd87979354b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrivialGasMix</name>
    <filename>class_trivial_gas_mix.html</filename>
    <base>MaterialMix</base>
    <member kind="function">
      <type>double</type>
      <name>absorptionCrossSection</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>a7ca05d52c49a6becc0486042e29e96a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>asymmetryParameter</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>a78f478227d1079c8e158f2e11fb1b50e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>asymmpar</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>ad43f06aa18075ad8b29f532a11a2f691</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNegativeExtinction</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>adf6ac7c8f18da8535089cbde13373b69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeTemperature</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>ae728f276fafa1f7d93ac7cb877bdf042</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>ae490984ec2f197b2d059894d1fb923d1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>MaterialType</type>
      <name>materialType</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>af33465fa6c59ac29f5d0701fdef450f8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityAbs</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>a698db5634c0f4a5592022427e5f1c842</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>adcea92534e500b64f6d7777ca4667bf6</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacitySca</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>a2eeff533fd28fb89ccc1f316fa73a7a9</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peeloffScattering</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>aa4207df44567eefcbc8b3be276457e63</anchor>
      <arglist>(double &amp;I, double &amp;Q, double &amp;U, double &amp;V, double &amp;lambda, Direction bfkobs, Direction bfky, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performScattering</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>ae5de03c3eaaa0ab044b7dc6045fdc051</anchor>
      <arglist>(double lambda, const MaterialState *state, PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scatteringCrossSection</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>aa0454a487f06652de68eaceed946cb7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionAbs</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>a391aa954ffeb3edde8377cfa73615ff8</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionExt</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>a9244a5943410fb209195ff644036e95a</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionSca</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>ac2477bce14895086b94a908efbc5d38c</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; StateVariable &gt;</type>
      <name>specificStateVariableInfo</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>a47be3477c17254e524553c41ec7a529d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TrivialGasMix</name>
      <anchorfile>class_trivial_gas_mix.html</anchorfile>
      <anchor>a8e2660f98f3ec31b1601494e3132f59a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrustBenchmarkDustMix</name>
    <filename>class_trust_benchmark_dust_mix.html</filename>
    <base>MultiGrainDustMix</base>
    <member kind="function">
      <type>int</type>
      <name>numGraphiteSizes</name>
      <anchorfile>class_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>a2976632e6c10daeb40cace4d1b3b71df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPAHSizes</name>
      <anchorfile>class_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>a608a35eb3f73fcddd8de6dbbb8c2549e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSilicateSizes</name>
      <anchorfile>class_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>a66a4c2fadb46fb102ff728e7ed8dfd16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TrustBenchmarkDustMix</name>
      <anchorfile>class_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>a8fe0699302fe738f2224c859935a4f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_trust_benchmark_dust_mix.html</anchorfile>
      <anchor>ab958f30ebd048734832346271620d2ff</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrustGraphiteGrainComposition</name>
    <filename>class_trust_graphite_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type></type>
      <name>TrustGraphiteGrainComposition</name>
      <anchorfile>class_trust_graphite_grain_composition.html</anchorfile>
      <anchor>a87bdf224c458ec7972428c025022ea34</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_trust_graphite_grain_composition.html</anchorfile>
      <anchor>a3a312f34dbde831a5d3a5ebf1ea0890a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_trust_graphite_grain_composition.html</anchorfile>
      <anchor>a428ba4a7f8541895e61b8593a4324c9b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_trust_graphite_grain_composition.html</anchorfile>
      <anchor>a183aa7301f8d75dd6c039e12f123c132</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_trust_graphite_grain_composition.html</anchorfile>
      <anchor>a61cfff07d42ea8e27174353f0ccf52cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TrustGraphiteGrainComposition</name>
      <anchorfile>class_trust_graphite_grain_composition.html</anchorfile>
      <anchor>a1d133143dd0c9b981072845ec231c9b4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrustNeutralPAHGrainComposition</name>
    <filename>class_trust_neutral_p_a_h_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type></type>
      <name>TrustNeutralPAHGrainComposition</name>
      <anchorfile>class_trust_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>a6aabdd4e47352e75ef5f3f2149c3a44c</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_trust_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>ab1457348c19f3d6612bed7e2d9cded55</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_trust_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>ad84ef27f9a91e731a8969f47f214af2f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_trust_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>aa776c90ba04409f082410b26742fa3a8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_trust_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>ad9f01043329c8b6a06c43633bdca9f5c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TrustNeutralPAHGrainComposition</name>
      <anchorfile>class_trust_neutral_p_a_h_grain_composition.html</anchorfile>
      <anchor>a2e91a31b1de9f7b6de161ab0514f98ac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrustSilicateGrainComposition</name>
    <filename>class_trust_silicate_grain_composition.html</filename>
    <base>GrainComposition</base>
    <member kind="function">
      <type></type>
      <name>TrustSilicateGrainComposition</name>
      <anchorfile>class_trust_silicate_grain_composition.html</anchorfile>
      <anchor>a59aa5f72680615624ffccd5fa25dc352</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bulkDensity</name>
      <anchorfile>class_trust_silicate_grain_composition.html</anchorfile>
      <anchor>a96e85c2c8af4fd2e993b05e09d875707</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_trust_silicate_grain_composition.html</anchorfile>
      <anchor>ad1492ebdf74b46ee3dc2545b5adbd721</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForEnthalpies</name>
      <anchorfile>class_trust_silicate_grain_composition.html</anchorfile>
      <anchor>aef9f375b30ed263a6abb4456aeabc946</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>resourceNameForOpticalProps</name>
      <anchorfile>class_trust_silicate_grain_composition.html</anchorfile>
      <anchor>af2698748af15f84f068c007147760e16</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TrustSilicateGrainComposition</name>
      <anchorfile>class_trust_silicate_grain_composition.html</anchorfile>
      <anchor>aadaec33300b7103114dc773328d1cc44</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TTauriDiskGeometry</name>
    <filename>class_t_tauri_disk_geometry.html</filename>
    <base>AxGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>aa83363a243318e6bdc81cf383800493d</anchor>
      <arglist>(double R, double z) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>ae4f4dfb3a26990bdb051fc9a98247108</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxRadius</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>a9803adcdd9fe8bc4c00eb8845870a0da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minRadius</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>ac34dd3f7ecd5f6faec95e532cfffb4fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radialIndex</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>a6a77d5dba0c4a069fc0b6f2ee8fd9b93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleHeight</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>a37fdc638c5cace8da873ec50e7638a23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleLength</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>a60854a6e0e05b9f94ab919a6b104d404</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaR</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>adc0f4c0032e185c5700d870ca3e435d6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>a346faac752098d9d1b40414a9e1bf38d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>verticalIndex</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>a67f239202bc274dbb9eb72879af86ea9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TTauriDiskGeometry</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>a36e3c9884472270b824f8421fc9800c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_t_tauri_disk_geometry.html</anchorfile>
      <anchor>a4ef2973d520eb578c72ef9d0c44855f5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeDef</name>
    <filename>class_type_def.html</filename>
    <member kind="typedef">
      <type>Item *(*)()</type>
      <name>Instantiator</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>af098e9c5b57f93d20575446c661986c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeDef</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a455a770532cd7473ac4687c67ae72606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeDef</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a3ebb3495887d80db385e7664f8d80676</anchor>
      <arglist>(const TypeDef &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>PropertyDef &amp;</type>
      <name>addPropertyDef</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a12d01c04ffe2a641c3767c863e6c790f</anchor>
      <arglist>(string type, string name, string title)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>allowedIf</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a51aaca1936c24c17c99a08e0ff80c4cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>base</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>abe55c7e950962b357ed319d6c09d7690</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>concrete</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a4d3d9021d091e78739be30fc9d0cbcdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>displayedIf</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a51c55fb81026a194a55b83a951f5f9a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>insert</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a947644a5a64e4dbc7ecba42d194b4bab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Instantiator</type>
      <name>instantiator</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a1c8d45a263bb41e5ff0f757210f9eb1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>ac2c63905b8aeacbdc3b94665da1e27da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSubProperties</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a5b50ed106d47bfee74da0f4fbf5750af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TypeDef &amp;</type>
      <name>operator=</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>ab0c6fa6d91c673341ed42d398e242373</anchor>
      <arglist>(const TypeDef &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>const std::list&lt; PropertyDef &gt; &amp;</type>
      <name>propertyDefs</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a51fafb1f05a1d6dced1b98fa9ab62d61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllowedIf</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a845a92111dbc2cd7555ba4a20112901b</anchor>
      <arglist>(string allowedIf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBase</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a24c0f1ecd0839c6856d12cc51fc9fa0b</anchor>
      <arglist>(string base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConcrete</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a19dae4a5221b41577072a48189687259</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayedIf</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>aed88a80f0cda7ca2926b8e60428eab66</anchor>
      <arglist>(string displayedIf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInsert</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a6a902ffc357ca489d17d9a827acd76a5</anchor>
      <arglist>(string insert)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInstantiator</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>af1288679dcb123aa152cffd7b03a900f</anchor>
      <arglist>(Instantiator instantiator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>ab010bd4cef4472f0ef331876b7f82797</anchor>
      <arglist>(string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubPropertyIndex</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a13335fdf9cfbaabac63bdc1bea4d4e92</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubPropertyIndexHere</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a5a7662948c86fcbc73532061e43db522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitle</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>abc77fb93a88055f991c9e1d68c14f637</anchor>
      <arglist>(string title)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subPropertyIndex</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a5ffc66ced4402cb20f33eac406226076</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>title</name>
      <anchorfile>class_type_def.html</anchorfile>
      <anchor>a90a0abfead09b8f16a04cd71130a8c57</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypedPropertyAccessor</name>
    <filename>class_typed_property_accessor.html</filename>
    <templarg>typename V</templarg>
    <base>PropertyAccessor</base>
  </compound>
  <compound kind="class">
    <name>UnidirectionalVectorField</name>
    <filename>class_unidirectional_vector_field.html</filename>
    <base>VectorField</base>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>class_unidirectional_vector_field.html</anchorfile>
      <anchor>ace2f21934f8aea7976b9ff4a3cbcce8b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fieldX</name>
      <anchorfile>class_unidirectional_vector_field.html</anchorfile>
      <anchor>a41cbf553214a490506857ba8cfdf9b64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fieldY</name>
      <anchorfile>class_unidirectional_vector_field.html</anchorfile>
      <anchor>aa82fcfc09aa28d5322e36002d6ffd6c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fieldZ</name>
      <anchorfile>class_unidirectional_vector_field.html</anchorfile>
      <anchor>a684b951e9d2b62a917fa4c58b5f4f292</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>vector</name>
      <anchorfile>class_unidirectional_vector_field.html</anchorfile>
      <anchor>a06e6e809b679c7204f433d816175667c</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnidirectionalVectorField</name>
      <anchorfile>class_unidirectional_vector_field.html</anchorfile>
      <anchor>a26f9dbad27608794ab1fda694170246e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_unidirectional_vector_field.html</anchorfile>
      <anchor>a38c31228d3b4632b197d4980a8717f2e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UniformBoxGeometry</name>
    <filename>class_uniform_box_geometry.html</filename>
    <base>GenGeometry</base>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>a08e3d1e5a01c2e0c51be2497a8de897a</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>a28d794440f296dfbb33c6d84c1666a54</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxX</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>a12169963d5161d58b20eac6b59dc524b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxY</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>a0c92ff5ebd6f52a79ace4a84f5199171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxZ</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>a65fb0fae47e80fd19a30637b73cfa58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minX</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>accfa91dea456749e924a4b799f9959ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minY</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>a7a21d26ded379b7a20c77106b20b6cd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minZ</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>a4aa36e818351df93089965b163837ff7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaX</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>a33690759c14b04a7ed9e50e9ee48cfb8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaY</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>a0eb57fed7a02655ad3ff69e657777712</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SigmaZ</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>ae2d98df36196a3c2118427b96f60c251</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UniformBoxGeometry</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>a1cf235d6d96652c20b2e0a85aad68cb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_uniform_box_geometry.html</anchorfile>
      <anchor>a8a45413a52fcb2bfee0224a9595de7de</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UniformSmoothingKernel</name>
    <filename>class_uniform_smoothing_kernel.html</filename>
    <base>SmoothingKernel</base>
    <member kind="function">
      <type>double</type>
      <name>columnDensity</name>
      <anchorfile>class_uniform_smoothing_kernel.html</anchorfile>
      <anchor>a980df844e23e902601bdf4ba1a87c9bc</anchor>
      <arglist>(double q) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_uniform_smoothing_kernel.html</anchorfile>
      <anchor>a23b33f551f3bbedb35558bc03601842c</anchor>
      <arglist>(double u) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>generateRadius</name>
      <anchorfile>class_uniform_smoothing_kernel.html</anchorfile>
      <anchor>a72fe0b3181fcd9bde1983ec85e0e61d2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UniformSmoothingKernel</name>
      <anchorfile>class_uniform_smoothing_kernel.html</anchorfile>
      <anchor>a79221f3c40e0957c052408493541f64e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnitDef</name>
    <filename>class_unit_def.html</filename>
    <member kind="function">
      <type></type>
      <name>UnitDef</name>
      <anchorfile>class_unit_def.html</anchorfile>
      <anchor>a2caa1bc6da9f8c00edd33863b95bd016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitDef</name>
      <anchorfile>class_unit_def.html</anchorfile>
      <anchor>a775d29603c176e059b322e53d470a8d1</anchor>
      <arglist>(const UnitDef &amp;UnitDef)=default</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; double, double, double &gt;</type>
      <name>def</name>
      <anchorfile>class_unit_def.html</anchorfile>
      <anchor>af1e11442d06da7e4be48d9a9ae2a94d3</anchor>
      <arglist>(string qty, string unit) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>class_unit_def.html</anchorfile>
      <anchor>abc5a38398ab05f9ded221d52958916d3</anchor>
      <arglist>(string qty) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>class_unit_def.html</anchorfile>
      <anchor>a38f3f85576ab68939245790a5e16ad50</anchor>
      <arglist>(string qty, string unit) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>in</name>
      <anchorfile>class_unit_def.html</anchorfile>
      <anchor>abfb54f848e4bc46c6fde62c918ad7f7a</anchor>
      <arglist>(string qty, string unit, double value) const</arglist>
    </member>
    <member kind="function">
      <type>UnitDef &amp;</type>
      <name>operator=</name>
      <anchorfile>class_unit_def.html</anchorfile>
      <anchor>a39677aa3a10bfcea09f5deac3417b9d1</anchor>
      <arglist>(const UnitDef &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>out</name>
      <anchorfile>class_unit_def.html</anchorfile>
      <anchor>a1f56f4bf19cea62f2791d3f4d0593107</anchor>
      <arglist>(string qty, string unit, double value) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>unit</name>
      <anchorfile>class_unit_def.html</anchorfile>
      <anchor>a1f7b79534cacc6e70250e3f735a0a3b8</anchor>
      <arglist>(string qty, string unitSystem) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDefaultUnit</name>
      <anchorfile>class_unit_def.html</anchorfile>
      <anchor>aa341a47de06d27c22c718f43911b6d97</anchor>
      <arglist>(string unitSystem, string quantity, string unit)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addUnit</name>
      <anchorfile>class_unit_def.html</anchorfile>
      <anchor>afdf721ed139d6ae0eb4f219415da9958</anchor>
      <arglist>(string quantity, string unit, double factor, double power=1., double offset=0.)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Units</name>
    <filename>class_units.html</filename>
    <base>SimulationItem</base>
    <member kind="enumeration">
      <type></type>
      <name>FluxOutputStyle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a254fea9ebe9e09b9febd3c81e7cd9e7a</anchor>
      <arglist></arglist>
      <enumvalue file="class_units.html" anchor="a254fea9ebe9e09b9febd3c81e7cd9e7aae9bb5320b3890b6747c91b5a71ae5a01">Neutral</enumvalue>
      <enumvalue file="class_units.html" anchor="a254fea9ebe9e09b9febd3c81e7cd9e7aab25b2722ad826f67423cdb48bdbc837e">Wavelength</enumvalue>
      <enumvalue file="class_units.html" anchor="a254fea9ebe9e09b9febd3c81e7cd9e7aa7cf395303ce3665a9834721d4b748e4b">Frequency</enumvalue>
      <enumvalue file="class_units.html" anchor="a254fea9ebe9e09b9febd3c81e7cd9e7aa5cc28f31113ec7cd7e546b836ccae2b9">Energy</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WavelengthOutputStyle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>af344f7f9de880eac6eb924d627806260</anchor>
      <arglist></arglist>
      <enumvalue file="class_units.html" anchor="af344f7f9de880eac6eb924d627806260ab25b2722ad826f67423cdb48bdbc837e">Wavelength</enumvalue>
      <enumvalue file="class_units.html" anchor="af344f7f9de880eac6eb924d627806260a7cf395303ce3665a9834721d4b748e4b">Frequency</enumvalue>
      <enumvalue file="class_units.html" anchor="af344f7f9de880eac6eb924d627806260a5cc28f31113ec7cd7e546b836ccae2b9">Energy</enumvalue>
    </member>
    <member kind="function">
      <type>std::tuple&lt; double, double, double &gt;</type>
      <name>def</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a8ad2b5196a3be9974261ac7d19d195b9</anchor>
      <arglist>(string qty, string unit) const</arglist>
    </member>
    <member kind="function">
      <type>FluxOutputStyle</type>
      <name>fluxOutputStyle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a9fcae12afac625f1b3e696dda9ca4375</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a978164fb17820a2ec987bde8e52f2aae</anchor>
      <arglist>(string qty, string unit) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>in</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a5663051a9e8293ea340dde691c2592f0</anchor>
      <arglist>(string qty, string unit, double value) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>oangle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ab5dcf9aea654bbed7645e625d48f1424</anchor>
      <arglist>(double theta) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>obolluminosity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>afb3d9ca996f6f42a1348cf9be1dcb557</anchor>
      <arglist>(double L) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>obulkmass</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>adb07a5d7ea4a04621caf3cb58851cfc8</anchor>
      <arglist>(double mu) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>obulkmassdensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a8716483a2137a7e9fcdd3f214bbaa497</anchor>
      <arglist>(double rho) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>odistance</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>afb9ee57eb4216b7a2404cd02bfdf55c9</anchor>
      <arglist>(double d) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>oenergy</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a94576e480792c7075bdf7ff65ad4fe6e</anchor>
      <arglist>(double E) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ofluxdensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>add43b430e7c3d9dbb420cd31be0eb994</anchor>
      <arglist>(double lambda, double Flambda) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ograinsize</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a5a527dcfdc4aecd77a7bd0bd954d1b96</anchor>
      <arglist>(double a) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>olength</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>af5fd28c88a7fdf8320c92997ea7fd888</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omagneticfield</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>aaf9a7d71b341be0a95cc8ff26ac3e82f</anchor>
      <arglist>(double B) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omass</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ad469b875a99203c35356c43087b57d9d</anchor>
      <arglist>(double M) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omasscoefficient</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a8e47ae38e634562d9fda2c2b6d185f10</anchor>
      <arglist>(double kappa) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omasssurfacedensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a3ec401aacab19672056ad1a7ffd4cf39</anchor>
      <arglist>(double Sigma) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omassvolumedensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a04fd2f80c7b35fa324c9afc77724d325</anchor>
      <arglist>(double rho) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omeanintensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a68596087fcd67d981acf80a32a102810</anchor>
      <arglist>(double lambda, double Jlambda) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omonluminosity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a29ca1cd081aa736a8187cb22cb196362</anchor>
      <arglist>(double lambda, double Llambda) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omonluminosityvolumedensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a2f827eb37568c9f3e7d0fe749f271692</anchor>
      <arglist>(double lambda, double Llambda) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>onumbersurfacedensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ab18aaffcd2d3c7162f0d16134f6ad1bb</anchor>
      <arglist>(double N) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>onumbervolumedensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a68fd3a8626f437a91b453ca293562ccc</anchor>
      <arglist>(double n) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opergrainsize</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ada53be675bae308349714547d0d85dba</anchor>
      <arglist>(double a) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>oposangle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a36c61cf32be79e5bf4b54a2fe3016633</anchor>
      <arglist>(double theta) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opressure</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>aa5cd3670b4136efe51ae260e726bc047</anchor>
      <arglist>(double p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>osection</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a6b577dc72c8ee47d9650622ef0dbf764</anchor>
      <arglist>(double C) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>osolidangle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ade0897a049510e55902a6fca6c445ad6</anchor>
      <arglist>(double Omega) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>osurfacebrightness</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>aa445dd0230de40dda1138a79c56a456c</anchor>
      <arglist>(double lambda, double flambda) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>otemperature</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>aa3128694c310320e6d86a6549d5d4510</anchor>
      <arglist>(double T) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>out</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a40777de7968c90e5dbe3575c9286cc1c</anchor>
      <arglist>(string qty, double value) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ovelocity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a23d2bfae47e8b124df6bedc106f0c712</anchor>
      <arglist>(double v) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ovolume</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a3ed3f0d0127224d85da84c19dcd31c85</anchor>
      <arglist>(double V) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>owavelength</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>addbf171f0126158357cd13bc4c1197c4</anchor>
      <arglist>(double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rwavelength</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>aeb31b9c10a00fd71289b33629d2a5054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>sfluxdensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a0a40ab1839bf2ef9e2ef79bd2c605485</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>smeanintensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>aa6ae7449f7bc2814a253795e3bb447cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>smonluminosity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a60fcca90ba74f51e5879b7d473e8de80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>smonluminosityvolumedensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a3562a2f2333b730fb18dbde3d8aa0079</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ssurfacebrightness</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>afae1ea9d1b860e2c7eba061ac5f4e134</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>swavelength</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a5ef065a0f8b2c3ab05913a5fef13671f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>uangle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>afe42054b3d626a450ef5fdce16f0e154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ubolluminosity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ae9d2cd5e868ccac0dec1d31b13fefd6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ubulkmass</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a009a1d1411bc96e61d916bb9eb19b938</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ubulkmassdensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a200e436b349ef874ce4f3ca0d12cac76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>udistance</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ac8ca3e1a52b84117e5523cf49f35363b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>uenergy</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a637f1e535ffb1d2d1acdbef6a30afb0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ufluxdensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ac25f77d22986e9b380a748e0c95d409a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ugrainsize</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>aa035ad7b11bdb03794463af87c5240a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ulength</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a41a1328b39ddbe537488a2cb201489ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>umagneticfield</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ab734fcca61bd6e2b2b2bdacdb201ee41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>umass</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ad372e1eb80dd8876cf4d2ce973180a0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>umasscoefficient</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a21f5753545d77dd59e27a3b90e70df97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>umasssurfacedensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a02601a91375dc8ee65e40f1da4ca8920</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>umassvolumedensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a206f2ff95329e179797c7a6101006e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>umeanintensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a20dec663ee53354273b4bcec1666e930</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>umonluminosity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a2ae9fa77909abfe37cd90f875b5e4093</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>umonluminosityvolumedensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>af4d9513481af3f377848c7c8de3accf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>unit</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a0c68e826ca11e9d69da1f78eb52ad775</anchor>
      <arglist>(string qty) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>unumbersurfacedensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a9266b559b904b99c4823067cc99799ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>unumbervolumedensity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a1b5c44be9ea66f2765c2be7c8df895ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>upergrainsize</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ab36f53db6f070367eec22fb35e75d1bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>uposangle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a943f489cc8d6a1b74769d4149e0c83fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>upressure</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a724809fdaa196393cf0bb7c29fb2c5c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>usection</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ae527813e70b701c5de55a9bb9c6f7ba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>usolidangle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a81c3b63e207c6bef1f95ec2d596ced70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>usurfacebrightness</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a7fa86edaad386fbd509861ad14b94f83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>utemperature</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ab44fdad4f33e16e98161e46346c58794</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>uvelocity</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ae53938c5bc4da193687f699faca91bed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>uvolume</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>ad912df4d32ad53e9747ff3efed1f96ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>uwavelength</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a3fd348ba6b7572082f56d5f3f0d9b198</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WavelengthOutputStyle</type>
      <name>wavelengthOutputStyle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>adb28721d491b52767388d7752fefd9b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FluxOutputStyle</type>
      <name>fluxStyle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a8c5be760e93cf440c05fcb01e74011f9</anchor>
      <arglist>(Style style)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array</type>
      <name>fromFluxStyle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a83d84b653024a2fe148378ef713aa4a8</anchor>
      <arglist>(const Array &amp;lambdav, const Array &amp;Lv, FluxOutputStyle style)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>fromFluxStyle</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>a75766ba22cc295f176d72b9c715d9f56</anchor>
      <arglist>(double lambda, double L, FluxOutputStyle style)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Units</name>
      <anchorfile>class_units.html</anchorfile>
      <anchor>aa10ded064259f35f044246879725b98a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UpdateStatus</name>
    <filename>class_update_status.html</filename>
    <member kind="function">
      <type></type>
      <name>UpdateStatus</name>
      <anchorfile>class_update_status.html</anchorfile>
      <anchor>aa1f4a91d8534146b6f3d635cdba92bfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConverged</name>
      <anchorfile>class_update_status.html</anchorfile>
      <anchor>a6703186898c58995b2812e3f3b9a4b30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpdated</name>
      <anchorfile>class_update_status.html</anchorfile>
      <anchor>aaeb29cfc287b87ca6fa816428981b508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>class_update_status.html</anchorfile>
      <anchor>abae017e9659d7afdfc7333b1b83675e6</anchor>
      <arglist>(UpdateStatus other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateConverged</name>
      <anchorfile>class_update_status.html</anchorfile>
      <anchor>a08bda5506d63fee193fef2dd5d684a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNotConverged</name>
      <anchorfile>class_update_status.html</anchorfile>
      <anchor>a5ed21e99aa5d0918d3a692d5fe74fdac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vec</name>
    <filename>class_vec.html</filename>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>aefd6dd5ca241f55cdc5548e4c02dc187</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>a5d91fbd672a826e322d480c13437ba58</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>a1d7bd50d55dae62343f165c5a6b7ebfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>aa16f54bfab93ab42a84031ea5b696b45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>a2490b40c24a597116e92f53cee62f4c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator*=</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>a5b038d9c1fcf5a14b069f6d975e7405e</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>a5d00c7fa6dc66945318b4a9479df77ad</anchor>
      <arglist>(Vec v)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>a9acd120cb56cfa31f2af1d1f6ec717d8</anchor>
      <arglist>(Vec v)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator/=</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>a7f3be46bb0d4335fb8589249373c9152</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>a7e7eb898a326b153c7e16391f86e2c8e</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>a91365081fc64a56dbcab340c1dfda76d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>a0b916ed6b602324e367f6495c6bcd8ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>aefbeabd2c232dcb9469a7ab032d4dd01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec</type>
      <name>cross</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>a510c7ce8ebaef5d0586a2a581d2f2fb2</anchor>
      <arglist>(Vec a, Vec b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dot</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>aa61dd958d428b625b59d513dd5f1f8c1</anchor>
      <arglist>(Vec a, Vec b)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_x</name>
      <anchorfile>class_vec.html</anchorfile>
      <anchor>ad90ff0121597bbf027dacdf89f2f918a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorField</name>
    <filename>class_vector_field.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dimension</name>
      <anchorfile>class_vector_field.html</anchorfile>
      <anchor>a62e07fac409ea796bca38fef90a55003</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vec</type>
      <name>vector</name>
      <anchorfile>class_vector_field.html</anchorfile>
      <anchor>ab45aaabf1016862615e78562cc2952cf</anchor>
      <arglist>(Position bfr) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VectorField</name>
      <anchorfile>class_vector_field.html</anchorfile>
      <anchor>a5d6391364e8679147c6d88ba60fd06ff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VelocityInterface</name>
    <filename>class_velocity_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VelocityInterface</name>
      <anchorfile>class_velocity_interface.html</anchorfile>
      <anchor>abe47785d87d66755af2fc9d7c8b853ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vec</type>
      <name>velocity</name>
      <anchorfile>class_velocity_interface.html</anchorfile>
      <anchor>af3fe08abc5a1b5be16302ab722ae198d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VelocityInterface</name>
      <anchorfile>class_velocity_interface.html</anchorfile>
      <anchor>a4dda71acb0191ab2152090fac9e07879</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VelocityProbe</name>
    <filename>class_velocity_probe.html</filename>
    <base>SpatialGridFormProbe</base>
    <member kind="function">
      <type>void</type>
      <name>probe</name>
      <anchorfile>class_velocity_probe.html</anchorfile>
      <anchor>a4faf7072abab9de086df6831c56e0006</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VelocityProbe</name>
      <anchorfile>class_velocity_probe.html</anchorfile>
      <anchor>aacfd392398bbd481146bfc34eb607c8e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VoronoiMeshGeometry</name>
    <filename>class_voronoi_mesh_geometry.html</filename>
    <base>MeshGeometry</base>
    <base>VoronoiMeshInterface</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>VoronoiMeshGeometry</name>
      <anchorfile>class_voronoi_mesh_geometry.html</anchorfile>
      <anchor>addc02574b72e6b05a38e2f0181be1369</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_voronoi_mesh_geometry.html</anchorfile>
      <anchor>a5417fa6912303379970ce77d02544d9f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VoronoiMeshSnapshot *</type>
      <name>voronoiMesh</name>
      <anchorfile>class_voronoi_mesh_geometry.html</anchorfile>
      <anchor>a03af415be6c91c9a34c55af5515f77e5</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VoronoiMeshInterface</name>
    <filename>class_voronoi_mesh_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VoronoiMeshInterface</name>
      <anchorfile>class_voronoi_mesh_interface.html</anchorfile>
      <anchor>afe78cf02fa68cb29150024cf6d59da1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoronoiMeshSnapshot *</type>
      <name>voronoiMesh</name>
      <anchorfile>class_voronoi_mesh_interface.html</anchorfile>
      <anchor>a27080ab91c7ea3b343af94c94086f10a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VoronoiMeshInterface</name>
      <anchorfile>class_voronoi_mesh_interface.html</anchorfile>
      <anchor>afa8933f66619877237ad4f367aeed5e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VoronoiMeshMedium</name>
    <filename>class_voronoi_mesh_medium.html</filename>
    <base>MeshMedium</base>
    <base>VoronoiMeshInterface</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>VoronoiMeshMedium</name>
      <anchorfile>class_voronoi_mesh_medium.html</anchorfile>
      <anchor>a426f5f79df41602d844436b80502a723</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_voronoi_mesh_medium.html</anchorfile>
      <anchor>aec5def46e088b9b62454ccdc0c76e5af</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VoronoiMeshSnapshot *</type>
      <name>voronoiMesh</name>
      <anchorfile>class_voronoi_mesh_medium.html</anchorfile>
      <anchor>a8bb1a620e12949739acee486fd82090f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VoronoiMeshSnapshot</name>
    <filename>class_voronoi_mesh_snapshot.html</filename>
    <base>Snapshot</base>
    <member kind="function">
      <type></type>
      <name>VoronoiMeshSnapshot</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a6f06c063a2c2025cbfc9846bb5aa1c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoronoiMeshSnapshot</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>ad9deea2e930fcd593d1729e0f2956c0a</anchor>
      <arglist>(const SimulationItem *item, const Box &amp;extent, const vector&lt; Vec &gt; &amp;sites, bool relax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoronoiMeshSnapshot</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a68b274ee94bde0ea68f5617cf2b44624</anchor>
      <arglist>(const SimulationItem *item, const Box &amp;extent, SiteListInterface *sli, bool relax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoronoiMeshSnapshot</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a67bb0a628ac288a66b92cf71cc719331</anchor>
      <arglist>(const SimulationItem *item, const Box &amp;extent, string filename, bool relax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VoronoiMeshSnapshot</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a920565196d86a03c2e1efb020fca5612</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cellIndex</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a02f439be55db83de4c73a7c11c1d3b98</anchor>
      <arglist>(Position bfr) const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>centroidPosition</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a7cd95e728fc56e6f43c7ca0ff4b05e11</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; PathSegmentGenerator &gt;</type>
      <name>createPathSegmentGenerator</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a2bcd51eddd2dbbdd4acdd165a3e363f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a823a4381af1e55a505fab1f5abd94bcb</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a4e0d368e4900323e884a2c26694d68c6</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>extent</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>aa7d936145b164a3c87c452439e17ced2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>extent</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>aa672e2383111daf26adeeecf045391eb</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foregoVoronoiMesh</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>aa2f4857a3a11fe223950e35fd76fc694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>af31098b846973fd0e210ee9fc13104bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>generatePosition</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a5149219d1e16e5e4f667387b78bf82fd</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntities</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a7fa9b625e27add3b2c2519276996c06c</anchor>
      <arglist>(EntityCollection &amp;entities, Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntities</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>ae310020928a20aebeeac1650f7518346</anchor>
      <arglist>(EntityCollection &amp;entities, Position bfr, Direction bfk) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a5bd5a761e526071095c3f0716d0037a9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numEntities</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a25749b578cd23ac5baacf8170d6dea4c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>position</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>acb3e459cba5850dc0a57426d8ddc37a2</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAndClose</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>ab3723cc90d4a8dc9a5c73b7d3fd140d4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtent</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>ad6e996600b7952bd488fac7f5cdc3c53</anchor>
      <arglist>(const Box &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a396ec748a61c7413a53e1f96f0e58f7c</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGridPlotFiles</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a63e5f4a4bd2fa6c4953f5dcebfd57877</anchor>
      <arglist>(const SimulationItem *probe) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>nearestEntity</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a917c2446db15619b79a7df435bc1fd79</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Array &amp;</type>
      <name>properties</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>aee2890016da930d46737a307bdb2e606</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildMesh</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>af9739101420a7ab77c1d0bf71198926b</anchor>
      <arglist>(bool relax)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildSearchPerBlock</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>ad90e5526f912cf8ae2e0684c30d57a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildSearchSingle</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>ab579f2448ed8626080b40eae353c0253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Node *</type>
      <name>buildTree</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a3561f77380bd4abe14707fda902210d2</anchor>
      <arglist>(vector&lt; int &gt;::iterator first, vector&lt; int &gt;::iterator last, int depth) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculateDensityAndMass</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a1fe38cd1bd5929b89fa51e1b3125f15e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculateVolume</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>a0f8fa0e32ccdbbf5ccfa209c8cc6cf5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isPointClosestTo</name>
      <anchorfile>class_voronoi_mesh_snapshot.html</anchorfile>
      <anchor>af2f35e58fddcc309c24d1795d296d078</anchor>
      <arglist>(Vec r, int m, const vector&lt; int &gt; &amp;ids) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VoronoiMeshSource</name>
    <filename>class_voronoi_mesh_source.html</filename>
    <base>MeshSource</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>VoronoiMeshSource</name>
      <anchorfile>class_voronoi_mesh_source.html</anchorfile>
      <anchor>a480709343aeb83a98cdc37032004b2c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Snapshot *</type>
      <name>createAndOpenSnapshot</name>
      <anchorfile>class_voronoi_mesh_source.html</anchorfile>
      <anchor>a7c0ea4bebd207abb026692cc9c7de6a7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VoronoiMeshSpatialGrid</name>
    <filename>class_voronoi_mesh_spatial_grid.html</filename>
    <base>BoxSpatialGrid</base>
    <base>DensityInCellInterface</base>
    <member kind="enumeration">
      <type></type>
      <name>Policy</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>af60b18b38c80b8f7f4c4e9c2faef3356</anchor>
      <arglist></arglist>
      <enumvalue file="class_voronoi_mesh_spatial_grid.html" anchor="af60b18b38c80b8f7f4c4e9c2faef3356af19516d11f2946f894070e92fcb56b6d">Uniform</enumvalue>
      <enumvalue file="class_voronoi_mesh_spatial_grid.html" anchor="af60b18b38c80b8f7f4c4e9c2faef3356ac6d9d5a60a342b3e952846d5cc20211e">CentralPeak</enumvalue>
      <enumvalue file="class_voronoi_mesh_spatial_grid.html" anchor="af60b18b38c80b8f7f4c4e9c2faef3356aa68541b0235cb6ead08d7dfe15476743">DustDensity</enumvalue>
      <enumvalue file="class_voronoi_mesh_spatial_grid.html" anchor="af60b18b38c80b8f7f4c4e9c2faef3356ad47101755289809d537b90d5f1737add">ElectronDensity</enumvalue>
      <enumvalue file="class_voronoi_mesh_spatial_grid.html" anchor="af60b18b38c80b8f7f4c4e9c2faef3356a4b55c50f69bf9c82bac4d49605ac2703">GasDensity</enumvalue>
      <enumvalue file="class_voronoi_mesh_spatial_grid.html" anchor="af60b18b38c80b8f7f4c4e9c2faef3356a0b27918290ff5323bea1e3b78a9cf04e">File</enumvalue>
      <enumvalue file="class_voronoi_mesh_spatial_grid.html" anchor="af60b18b38c80b8f7f4c4e9c2faef3356ae64563751ceea5a1345c75e79eed3eb5">ImportedSites</enumvalue>
      <enumvalue file="class_voronoi_mesh_spatial_grid.html" anchor="af60b18b38c80b8f7f4c4e9c2faef3356aba89bb6dd975aec3abe1f15f6b1ab8f0">ImportedMesh</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>~VoronoiMeshSpatialGrid</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>a81ece77411d8a22f8321f7254be3b391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cellIndex</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>ac0349398913a5ba816a226c46e855c6c</anchor>
      <arglist>(Position bfr) const override</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>centralPositionInCell</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>a162b102ffeeb4f50dfda3cb642a3f3ff</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; PathSegmentGenerator &gt;</type>
      <name>createPathSegmentGenerator</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>ac2d458918e576f4cae78c45b0a24e332</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diagonal</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>ae15023ede80364494ab216f640958e2c</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>filename</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>adcfc8a43d7f8a780d3dc22abe57cb892</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numberDensity</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>a68aafd7abe8f1a0180f807647ff41910</anchor>
      <arglist>(int h, int m) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numCells</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>ac604b699aba577bb24d2350a0918dcf3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSites</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>aeb02d3018b9f85cf821e5b98a7379182</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Policy</type>
      <name>policy</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>a564f55dc8cd65cb1fb670b1534a0ce73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>randomPositionInCell</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>a43b7a80d6f205fbd8646e2cb2aea6c5c</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>relaxSites</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>a0e88eb09120018adf24e446ee78284aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>a0b77fc14d8d50d4bce5a6582211fd9e4</anchor>
      <arglist>(int m) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGridPlotFiles</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>af4b6f942e71f4b10d0d02aaa55175108</anchor>
      <arglist>(const SimulationItem *probe) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VoronoiMeshSpatialGrid</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>a5d947b197802917fce80f3cce706ced7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>offersInterface</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>a0bbb26090feee62382f522da6e7ebf13</anchor>
      <arglist>(const std::type_info &amp;interfaceTypeInfo) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_voronoi_mesh_spatial_grid.html</anchorfile>
      <anchor>aab650d25d43c034aa7b0771a7c14437b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WavelengthDistribution</name>
    <filename>class_wavelength_distribution.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>generateWavelength</name>
      <anchorfile>class_wavelength_distribution.html</anchorfile>
      <anchor>aea5b353daf9347b5dc150b8c4b887080</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>probability</name>
      <anchorfile>class_wavelength_distribution.html</anchorfile>
      <anchor>a1d3ec58c5c2cda6c9bddb4aea88f363c</anchor>
      <arglist>(double wavelength) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WavelengthDistribution</name>
      <anchorfile>class_wavelength_distribution.html</anchorfile>
      <anchor>aa8b8e444d70511e79a67f86b7f61b1cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Random *</type>
      <name>random</name>
      <anchorfile>class_wavelength_distribution.html</anchorfile>
      <anchor>a0ee3de84fdf95e0746e1f51ee6a98139</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_wavelength_distribution.html</anchorfile>
      <anchor>a15a1afe41c9d48894881750901ee6f02</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WavelengthGrid</name>
    <filename>class_wavelength_grid.html</filename>
    <base>SimulationItem</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>bin</name>
      <anchorfile>class_wavelength_grid.html</anchorfile>
      <anchor>ab6a68f8324bccb48f67b1e89fd5cc306</anchor>
      <arglist>(double lambda) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual vector&lt; int &gt;</type>
      <name>bins</name>
      <anchorfile>class_wavelength_grid.html</anchorfile>
      <anchor>adf05fc62fd05c556eb75119d7f71d29f</anchor>
      <arglist>(double lambda) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>effectiveWidth</name>
      <anchorfile>class_wavelength_grid.html</anchorfile>
      <anchor>a10142552ddea15c7c63e61bfb8ed999c</anchor>
      <arglist>(int ell) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>leftBorder</name>
      <anchorfile>class_wavelength_grid.html</anchorfile>
      <anchor>a23d00b0e282f2bdb09fe6d2aab9a8a50</anchor>
      <arglist>(int ell) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numBins</name>
      <anchorfile>class_wavelength_grid.html</anchorfile>
      <anchor>ae6fe9dded7ab01d422a5fd1cb49e3ec0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>rightBorder</name>
      <anchorfile>class_wavelength_grid.html</anchorfile>
      <anchor>a4a22f55beee0c9d2c2d5b94a2add9ed6</anchor>
      <arglist>(int ell) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>transmission</name>
      <anchorfile>class_wavelength_grid.html</anchorfile>
      <anchor>ab77868baa40131c671900a5072db259b</anchor>
      <arglist>(int ell, double lambda) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>wavelength</name>
      <anchorfile>class_wavelength_grid.html</anchorfile>
      <anchor>aa291e53fffa7345154dff01079970f7a</anchor>
      <arglist>(int ell) const =0</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_wavelength_grid.html</anchorfile>
      <anchor>a463548014b3ac0f8e0d8ce8000d9eb3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WavelengthGrid</name>
      <anchorfile>class_wavelength_grid.html</anchorfile>
      <anchor>a67858f26757a90d76f072f5b120b01a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WavelengthRangeInterface</name>
    <filename>class_wavelength_range_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WavelengthRangeInterface</name>
      <anchorfile>class_wavelength_range_interface.html</anchorfile>
      <anchor>a5372ae9285efd5da9b7c44104f7e278a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Range</type>
      <name>wavelengthRange</name>
      <anchorfile>class_wavelength_range_interface.html</anchorfile>
      <anchor>a3ae0033215e48fad1bcd8c6f894ff59f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WavelengthRangeInterface</name>
      <anchorfile>class_wavelength_range_interface.html</anchorfile>
      <anchor>a7cdc5e7ef9dccf5554b8ee39f4bf44f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WeingartnerDraineDustMix</name>
    <filename>class_weingartner_draine_dust_mix.html</filename>
    <base>MultiGrainDustMix</base>
    <member kind="enumeration">
      <type></type>
      <name>Environment</name>
      <anchorfile>class_weingartner_draine_dust_mix.html</anchorfile>
      <anchor>ab8f32c78fb329e44f10dd72d3362b3f0</anchor>
      <arglist></arglist>
      <enumvalue file="class_weingartner_draine_dust_mix.html" anchor="ab8f32c78fb329e44f10dd72d3362b3f0ad5b542e44ff79984f795302ee909fd84">MilkyWay</enumvalue>
      <enumvalue file="class_weingartner_draine_dust_mix.html" anchor="ab8f32c78fb329e44f10dd72d3362b3f0af5ceeb93d4e19e3b0aad0188f7a09e38">LMC</enumvalue>
      <enumvalue file="class_weingartner_draine_dust_mix.html" anchor="ab8f32c78fb329e44f10dd72d3362b3f0a381f153a0e6e6dc7d3bf5dbef251b370">SMC</enumvalue>
    </member>
    <member kind="function">
      <type>Environment</type>
      <name>environment</name>
      <anchorfile>class_weingartner_draine_dust_mix.html</anchorfile>
      <anchor>aad57d53ccfd0fea82f77372aaba3b3d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numGraphiteSizes</name>
      <anchorfile>class_weingartner_draine_dust_mix.html</anchorfile>
      <anchor>a7f9c7d2f93f6e132a09d148bfbcd90c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPAHSizes</name>
      <anchorfile>class_weingartner_draine_dust_mix.html</anchorfile>
      <anchor>a19945ad83b4111b62d585ea06ff075cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSilicateSizes</name>
      <anchorfile>class_weingartner_draine_dust_mix.html</anchorfile>
      <anchor>a8949314f4d79557a35f3d3793b47c40b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WeingartnerDraineDustMix</name>
      <anchorfile>class_weingartner_draine_dust_mix.html</anchorfile>
      <anchor>a9d4dfc4484b37b3cbbd6ce902d852bcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_weingartner_draine_dust_mix.html</anchorfile>
      <anchor>ae0874659713df34f63c99a3e2ddd4234</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WidthDecorator</name>
    <filename>class_width_decorator.html</filename>
    <base>ShapeDecorator</base>
    <member kind="function">
      <type>double</type>
      <name>width</name>
      <anchorfile>class_width_decorator.html</anchorfile>
      <anchor>aac3a306cdc453795420dbe64a7bd85ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WidthDecorator</name>
      <anchorfile>class_width_decorator.html</anchorfile>
      <anchor>ac64621b824726d4be3a44c8d38c22144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>paintSelf</name>
      <anchorfile>class_width_decorator.html</anchorfile>
      <anchor>a3c9b530b5830696be5a507a00396e531</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WizardEngine</name>
    <filename>class_wizard_engine.html</filename>
    <class kind="class">WizardEngine::State</class>
    <member kind="slot">
      <type>void</type>
      <name>advance</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>aae4a5e5cc726d6608e97cf8ce1f18d14</anchor>
      <arglist>(bool state=true, bool descend=true)</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>advanceToEditSubItem</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a3ccc77ffa961f5a11276e8eea5a04caa</anchor>
      <arglist>(int subItemIndex)</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>hierarchyWasChanged</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a396afdb20817f3357a9aa357e0407d3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>hierarchyWasLoaded</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a0ec9ad18bd9df8f2fff53b0687ddbb5a</anchor>
      <arglist>(Item *root, QString filepath)</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>hierarchyWasSaved</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a4fabb6b85a7fcc67414252b4035f5bc1</anchor>
      <arglist>(QString filepath)</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>restartWizard</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a11870d205633b7cc71a367b48b54d5ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>retreat</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>ad5adf50ed8d5990bbec3270d594f491c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>setBasicChoice</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a95433bd48e38e7923a7081fcc8044a07</anchor>
      <arglist>(bool openExisting, string libraryPath, string schemaName)</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>setPropertyValid</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>ae6e0128528f0f6dfcd8abf1cae29a1d5</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="slot">
      <type>void</type>
      <name>setRootType</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>ae274fc4f6fea5b0552bc30579a98efd5</anchor>
      <arglist>(string newRootType)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>canAdvanceChangedTo</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>ab96877488a46ba06a988b5685ff3f011</anchor>
      <arglist>(bool canAdvance)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>canRetreatChangedTo</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a2f98935ecaec2d1b084d40350298c63d</anchor>
      <arglist>(bool canRetreat)</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>dirtyChanged</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a9219130dd5d0059137d1423236d6f11a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>stateChanged</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a3a730f51d1e4fa741649504c2b38dde1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="signal">
      <type>void</type>
      <name>titleChanged</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a84034d9ddecee493e59aa93ac625942e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WizardEngine</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a3be8c0cc9b586c90a960f7adabcbfa52</anchor>
      <arglist>(QObject *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WizardEngine</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>acb85dededdd74a25dbc73b617b751b0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canAdvance</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a53c11c698ae7dd809c96439739c888d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canRetreat</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>ae7acfad4722bcd7b338cda2dc84da7cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QWidget *</type>
      <name>createPane</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>aedc8b209a6df081d187ca2e88b90a088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emitStateChanged</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>af4c00ed6cf0637c9ac49fb8705d13521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>filepath</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a662f657370360fda3d4410e2e34c3950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>hierarchyPath</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>ab6bab5704f46109032f00d966e16585c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirty</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a602e636339f5ba0a7a7d7c4d91811775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SchemaDef *</type>
      <name>schema</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>afa2e30ec80bf7dc29457cb3a675a108e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::unique_ptr&lt; PropertyHandler &gt;</type>
      <name>createPropertyHandler</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>a1a9a6b2b0a39ff7df85f226b83cd5831</anchor>
      <arglist>(int propertyIndex)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>propertyIndexForChild</name>
      <anchorfile>class_wizard_engine.html</anchorfile>
      <anchor>af206de7e3896a59421d49f8985aa247f</anchor>
      <arglist>(Item *child)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WizardEngine::State</name>
    <filename>class_wizard_engine_1_1_state.html</filename>
  </compound>
  <compound kind="class">
    <name>XmlHierarchyCreator</name>
    <filename>class_xml_hierarchy_creator.html</filename>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Item &gt;</type>
      <name>readFile</name>
      <anchorfile>class_xml_hierarchy_creator.html</anchorfile>
      <anchor>a856b2c6c82dcf38d4d1874fbe7767343</anchor>
      <arglist>(const SchemaDef *schema, string filepath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Item &gt;</type>
      <name>readString</name>
      <anchorfile>class_xml_hierarchy_creator.html</anchorfile>
      <anchor>a9537bffadf922ffb8bb8dddc0c666528</anchor>
      <arglist>(const SchemaDef *schema, string contents, string description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlHierarchyWriter</name>
    <filename>class_xml_hierarchy_writer.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>class_xml_hierarchy_writer.html</anchorfile>
      <anchor>a216a22a3fcbe9a9ba77a5e0627423bfe</anchor>
      <arglist>(Item *item, const SchemaDef *schema, string filePath, string producer=string())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlReader</name>
    <filename>class_xml_reader.html</filename>
    <class kind="struct">XmlReader::ElementInfo</class>
    <member kind="function">
      <type></type>
      <name>XmlReader</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>ac7900c1066c246cd3b1f309ba7962edd</anchor>
      <arglist>(const XmlReader &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlReader</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>aeb444ea92ef9a2dd4f191bcacb9b3df8</anchor>
      <arglist>(std::istream &amp;inputStream, string streamName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlReader</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>a32779750e6ffa83b41e497e22b7d6609</anchor>
      <arglist>(string filePath)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>attributeNames</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>ab9d7f5db8d713193b5626b62c044d200</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>attributeValue</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>a313c2357369ea8d7f78bccf2649f3fa5</anchor>
      <arglist>(string name) const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>elementName</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>a9fa13118936e831dd31e495427d578ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>XmlReader &amp;</type>
      <name>operator=</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>a675343d0fb9ba1ea8a95b4cdf8f55042</anchor>
      <arglist>(const XmlReader &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readNextStartElement</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>a53e5c66d23124ae417e1465747dd0417</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skipCurrentElement</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>ae02515671c1474eca020127cef8f42a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>throwError</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>ad17a359b25a14676291c883645cb895a</anchor>
      <arglist>(string message)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char</type>
      <name>get</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>abe51114d3f5d4e764671d433d2704ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>string</type>
      <name>getName</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>a52e0845c2bb17e0e76cee4675a3e85ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>string</type>
      <name>getValue</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>a91eb1ec24afe5cc68345965322ebe0b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char</type>
      <name>peek</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>a0e7eed617a4e3ac42b1b2d1964b3f0eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>skip</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>add1f09074edffd84ed629d32254be4ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>skipBOM</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>a550cb2f486bf5ad21f4a74e1586d3d89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>skipUpTo</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>af0964269975b3a4d52ad39136f0d2465</anchor>
      <arglist>(string match)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>skipWhiteSpace</name>
      <anchorfile>class_xml_reader.html</anchorfile>
      <anchor>a8a636ba9fcd5bbaedba87a032df969df</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>XmlReader::ElementInfo</name>
    <filename>struct_xml_reader_1_1_element_info.html</filename>
  </compound>
  <compound kind="class">
    <name>XmlWriter</name>
    <filename>class_xml_writer.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlWriter</name>
      <anchorfile>class_xml_writer.html</anchorfile>
      <anchor>a27104dee76107d7206994838d2c10264</anchor>
      <arglist>(const XmlWriter &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlWriter</name>
      <anchorfile>class_xml_writer.html</anchorfile>
      <anchor>a93d20e0d4954c6e86cc3d0b392d95e21</anchor>
      <arglist>(std::ostream &amp;outputStream, string streamName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlWriter</name>
      <anchorfile>class_xml_writer.html</anchorfile>
      <anchor>ad85a7dfef829bbb212465af4a6d46f5e</anchor>
      <arglist>(string filePath)</arglist>
    </member>
    <member kind="function">
      <type>XmlWriter &amp;</type>
      <name>operator=</name>
      <anchorfile>class_xml_writer.html</anchorfile>
      <anchor>a3f4eb6a34e59faeab2ef96ea7d94666c</anchor>
      <arglist>(const XmlWriter &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAttribute</name>
      <anchorfile>class_xml_writer.html</anchorfile>
      <anchor>aa887048fedcba3c1346d5fd3f3ece4b6</anchor>
      <arglist>(string name, string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeComment</name>
      <anchorfile>class_xml_writer.html</anchorfile>
      <anchor>ae0cfc4c932c5ee291e4ccb20f57dc04e</anchor>
      <arglist>(string text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeEndDocument</name>
      <anchorfile>class_xml_writer.html</anchorfile>
      <anchor>ab0251d279c8878b334b7f2a866d095f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeEndElement</name>
      <anchorfile>class_xml_writer.html</anchorfile>
      <anchor>a821a81755e4efd82ae2c83718fd216c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeStartDocument</name>
      <anchorfile>class_xml_writer.html</anchorfile>
      <anchor>a7d691f515a09bbbd88bf90fc079dd497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeStartElement</name>
      <anchorfile>class_xml_writer.html</anchorfile>
      <anchor>ab52f62fdd713e5af16e61d4f27b3eb37</anchor>
      <arglist>(string name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeIndentation</name>
      <anchorfile>class_xml_writer.html</anchorfile>
      <anchor>a5f30c4eadb89f670c4cdd13ac6958d31</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XRayAtomicGasMix</name>
    <filename>class_x_ray_atomic_gas_mix.html</filename>
    <base>MaterialMix</base>
    <member kind="enumeration">
      <type></type>
      <name>BoundElectrons</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>a2cea87087913b39b7df8266148aee70d</anchor>
      <arglist></arglist>
      <enumvalue file="class_x_ray_atomic_gas_mix.html" anchor="a2cea87087913b39b7df8266148aee70da6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="class_x_ray_atomic_gas_mix.html" anchor="a2cea87087913b39b7df8266148aee70dab24ce0cd392a5b0b8dedc66c25213594">Free</enumvalue>
      <enumvalue file="class_x_ray_atomic_gas_mix.html" anchor="a2cea87087913b39b7df8266148aee70da0c6ad70beb3a7e76c3fc7adab7c46acc">Good</enumvalue>
      <enumvalue file="class_x_ray_atomic_gas_mix.html" anchor="a2cea87087913b39b7df8266148aee70da1649aed298f99d587e2eb30c1db5946b">Exact</enumvalue>
    </member>
    <member kind="function">
      <type>const vector&lt; double &gt; &amp;</type>
      <name>abundancies</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>a028ed00d7206306a0618dc561ae97e96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasScatteringDispersion</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>a9f4bda08528fbd13d493e9eda8af5bf6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>indicativeTemperature</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>ae987a344aacd916d4b70af6fd08e9f54</anchor>
      <arglist>(const MaterialState *state, const Array &amp;Jv) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>aff60be3d6db0a845beaa6b552cd96b15</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>MaterialType</type>
      <name>materialType</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>ae3a9ee4a6c671fde9a22c5a1e1698dc6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityAbs</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>a7baabe2371395a764ea1cfcf901fdd94</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacityExt</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>aab08bf8dbc26d96efdd471f5e018bd56</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opacitySca</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>a6611bc2addae3b325d1bb320020fe8af</anchor>
      <arglist>(double lambda, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>peeloffScattering</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>abc0eb4b4ea25b6bb9a45c0a616b606d6</anchor>
      <arglist>(double &amp;I, double &amp;Q, double &amp;U, double &amp;V, double &amp;lambda, Direction bfkobs, Direction bfky, const MaterialState *state, const PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performScattering</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>a9936a372634778abe8cd935fd6e9d0d4</anchor>
      <arglist>(double lambda, const MaterialState *state, PhotonPacket *pp) const override</arglist>
    </member>
    <member kind="function">
      <type>BoundElectrons</type>
      <name>scatterBoundElectrons</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>ae4f0294044d1993f2020b2efdc3f8c80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionAbs</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>aec5903a1f8c51ee2373c021f60aacd7f</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionExt</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>a26ba936286e0ef542d91c8798657c316</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sectionSca</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>af778a7b9ecbf5831f9cb987d2bf3df0f</anchor>
      <arglist>(double lambda) const override</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; StateVariable &gt;</type>
      <name>specificStateVariableInfo</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>a5058443a052fcb05e0a7482c85135ca0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>temperature</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>ae9cc94caee00e580c2895abe7ca7b0eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>XRayAtomicGasMix</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>a008c34f266d6cbde1196ab2d94ab5c56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~XRayAtomicGasMix</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>a831342a452254d445c99b077738dbb81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>afa11f73cb1d4d096f12f9ba0f7d907e1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>indexForLambda</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>ad5596e3a3e362705bb5f9ed5424004f7</anchor>
      <arglist>(double lambda) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setScatteringInfoIfNeeded</name>
      <anchorfile>class_x_ray_atomic_gas_mix.html</anchorfile>
      <anchor>ad612193e28f43b03c7c833316e18742a</anchor>
      <arglist>(PhotonPacket::ScatteringInfo *scatinfo, double lambda) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZubkoDustMix</name>
    <filename>class_zubko_dust_mix.html</filename>
    <base>MultiGrainDustMix</base>
    <member kind="function">
      <type>int</type>
      <name>numGraphiteSizes</name>
      <anchorfile>class_zubko_dust_mix.html</anchorfile>
      <anchor>a0593837f361fc444355f2d83fa5c6fe3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPAHSizes</name>
      <anchorfile>class_zubko_dust_mix.html</anchorfile>
      <anchor>a900534cad64dd194951a058985e8de15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSilicateSizes</name>
      <anchorfile>class_zubko_dust_mix.html</anchorfile>
      <anchor>a31c65f57116c752b54fe319d0bd18b34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ZubkoDustMix</name>
      <anchorfile>class_zubko_dust_mix.html</anchorfile>
      <anchor>a3ac0cfe121be23c026866576ac084eed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSelfBefore</name>
      <anchorfile>class_zubko_dust_mix.html</anchorfile>
      <anchor>ac4df5b5997b567f8355110b1136981ce</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZubkoGraphiteGrainSizeDistribution</name>
    <filename>class_zubko_graphite_grain_size_distribution.html</filename>
    <base>GrainSizeDistribution</base>
    <member kind="function">
      <type></type>
      <name>ZubkoGraphiteGrainSizeDistribution</name>
      <anchorfile>class_zubko_graphite_grain_size_distribution.html</anchorfile>
      <anchor>a175f451c9f94ce98090643dbe5ed84c2</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>amax</name>
      <anchorfile>class_zubko_graphite_grain_size_distribution.html</anchorfile>
      <anchor>abfdff2810691ec3b2b7e11df68b1bc93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>amin</name>
      <anchorfile>class_zubko_graphite_grain_size_distribution.html</anchorfile>
      <anchor>ae36b739bd23e46302f3fc9ca211adb80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnda</name>
      <anchorfile>class_zubko_graphite_grain_size_distribution.html</anchorfile>
      <anchor>aa071ab2d652d80cd6ff13cb1b3324b61</anchor>
      <arglist>(double a) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ZubkoGraphiteGrainSizeDistribution</name>
      <anchorfile>class_zubko_graphite_grain_size_distribution.html</anchorfile>
      <anchor>a650583f22b8f10842d23411e172ecb44</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZubkoPAHGrainSizeDistribution</name>
    <filename>class_zubko_p_a_h_grain_size_distribution.html</filename>
    <base>GrainSizeDistribution</base>
    <member kind="function">
      <type></type>
      <name>ZubkoPAHGrainSizeDistribution</name>
      <anchorfile>class_zubko_p_a_h_grain_size_distribution.html</anchorfile>
      <anchor>afd158ceb40a8cb1773408eafab619aad</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>amax</name>
      <anchorfile>class_zubko_p_a_h_grain_size_distribution.html</anchorfile>
      <anchor>a028594c91a640917636a47475d4d41c6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>amin</name>
      <anchorfile>class_zubko_p_a_h_grain_size_distribution.html</anchorfile>
      <anchor>a8d490c10a929835e1a7fefbbe13f1c6a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnda</name>
      <anchorfile>class_zubko_p_a_h_grain_size_distribution.html</anchorfile>
      <anchor>ada4b1be688b92bc0822456b909e6e6da</anchor>
      <arglist>(double a) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ZubkoPAHGrainSizeDistribution</name>
      <anchorfile>class_zubko_p_a_h_grain_size_distribution.html</anchorfile>
      <anchor>a419d5411c392778ee39630dbe9a74ce0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZubkoSilicateGrainSizeDistribution</name>
    <filename>class_zubko_silicate_grain_size_distribution.html</filename>
    <base>GrainSizeDistribution</base>
    <member kind="function">
      <type></type>
      <name>ZubkoSilicateGrainSizeDistribution</name>
      <anchorfile>class_zubko_silicate_grain_size_distribution.html</anchorfile>
      <anchor>a4d7305f17cd0ac39373753f432736efd</anchor>
      <arglist>(SimulationItem *parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>amax</name>
      <anchorfile>class_zubko_silicate_grain_size_distribution.html</anchorfile>
      <anchor>a8a47c2e426663747f5a0a05c5bd3cb2b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>amin</name>
      <anchorfile>class_zubko_silicate_grain_size_distribution.html</anchorfile>
      <anchor>ad78980252dec409d9ed5714b6c7b6747</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnda</name>
      <anchorfile>class_zubko_silicate_grain_size_distribution.html</anchorfile>
      <anchor>a5b3aee3b99d9b7364d3337803307bfc3</anchor>
      <arglist>(double a) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ZubkoSilicateGrainSizeDistribution</name>
      <anchorfile>class_zubko_silicate_grain_size_distribution.html</anchorfile>
      <anchor>a063bdf9bdd5e7a3248020e6be0e09cf8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Constants</name>
    <filename>namespace_constants.html</filename>
    <member kind="function">
      <type>constexpr double</type>
      <name>amu</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a49453b5a7e9f06b7fed3454fff5c579d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>AU</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a8c6df1a832800669fa427c203a705350</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>c</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a766c9c153faa445235abd6f1d932ffff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>EinsteinALya</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a8c4edf60219e69f207c68cff01fae8de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>h</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a71bc2a2b31a32638abbd28a757fdec9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>k</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>aeaea38e4d196a6f3853fa713dc235bd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>lambdaIon</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a429f2ddb3a53ab81984deee890778a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>lambdaLya</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a8d029993cf1bac31a0178b36e1180570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>Lsun</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a53305fe022545901257cdca9bd160fae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>Melectron</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a02059fbb26eead158000f531a2c0bb71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>Mproton</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>ad685f99cc64c3fd8de01c387b34dac4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>Msun</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a3f211b94201e46d261fc27daeebafa8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>NA</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>ae62363e71dde3f7ad604dc00c95cb04e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>pc</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a08b9e6625f233b62a2c28161cb751503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>Qelectron</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a1a6c274fc4a9beb3c339ea51a7f40a77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sigmaThomson</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>aa721e5a8ae7ff6a7fe11ad08c88388db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>Tcmb</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a16a8490a1ba5c203fa48aeb43a2073ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>year</name>
      <anchorfile>namespace_constants.html</anchorfile>
      <anchor>a17d1d135b5f14fe8cf2e2f9f04265ff4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>LockFree</name>
    <filename>namespace_lock_free.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>namespace_lock_free.html</anchorfile>
      <anchor>aed74946c44b0bd57c8cda5c8075a5476</anchor>
      <arglist>(double &amp;target, double value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>LyaUtils</name>
    <filename>namespace_lya_utils.html</filename>
    <member kind="function">
      <type>std::pair&lt; Vec, bool &gt;</type>
      <name>sampleAtomVelocity</name>
      <anchorfile>namespace_lya_utils.html</anchorfile>
      <anchor>aa7c16341f39f9d71b9950911188b19de</anchor>
      <arglist>(double lambda, double T, double nH, Direction kin, Configuration *config, Random *random)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>section</name>
      <anchorfile>namespace_lya_utils.html</anchorfile>
      <anchor>a7a368d06340c637bda945894ca14edff</anchor>
      <arglist>(double lambda, double T)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>shiftWavelength</name>
      <anchorfile>namespace_lya_utils.html</anchorfile>
      <anchor>ae33d1b3826120222e9c1e6b197da8d28</anchor>
      <arglist>(double lambda, const Vec &amp;vatom, const Direction &amp;kin, const Direction &amp;kout)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SpecialFunctions</name>
    <filename>namespace_special_functions.html</filename>
    <member kind="function">
      <type>double</type>
      <name>bessi1</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a85f564bc6893f095d3857fc842564ab4</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bessk1</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>abd0499aa9d811751d8173bd46d9fa9ae</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a0ec821a9886c37754723153b5375b53b</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>aaaf7c2d0460204a605e30e7a434dea87</anchor>
      <arglist>(double x, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>betaRegularized</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>ad02a89a3f270a23813d0f67a6ee71610</anchor>
      <arglist>(double x, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dawson</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>ab11d7fcb996b58cb131a07b908af8266</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DebyeD</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>ac9a1a4b02acf5977b048828446511394</anchor>
      <arglist>(int n, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EllipticE</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>ab6cc4787743072a900a115331db9ae56</anchor>
      <arglist>(double k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EllipticE</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>aa12b3d0bff74e419f95f90e85c216df4</anchor>
      <arglist>(double x, double k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EllipticF</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>af9800daea9aba49fd3eb3a79af5be636</anchor>
      <arglist>(double x, double k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EllipticK</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>ab6b340da5fa169dcc1856371da8da7b4</anchor>
      <arglist>(double k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EllipticPi</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a115f3810753fd584ba6930b3cf197fdd</anchor>
      <arglist>(double nu, double k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EllipticPi</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a21407b4aa26bd0971bd0e5c1fc38494b</anchor>
      <arglist>(double x, double nu, double k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>functionX</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>ae7abe27754410c97393fc32ea39905fc</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a5267241222ad791e6985dcbc780810fa</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gexp</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a172e2b541b96a688ed0570b6a54d1081</anchor>
      <arglist>(double p, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gln</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a4dad13cea0c7e91ae24ecceb87e904bd</anchor>
      <arglist>(double p, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gln2</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>aa5be7ffd872efb68651850f0e840395d</anchor>
      <arglist>(double p, double x1, double x2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>incompleteGamma</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>adc90d98162eea111f2fc2ba4afb35dd4</anchor>
      <arglist>(double a, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LambertW</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a0ccffbc599bbfc26056a58b39a392177</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LambertW1</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>ac64c2953c12a97b610d02122f8db0c96</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lngamma</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>af5b6eb13d63a2dbda51845e9bff7a406</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnmean</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>abecd90da45601570de4a13e89f2a2471</anchor>
      <arglist>(double x1, double x2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnmean</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a8d583d7a36e2bdd256ad943fa3c1c156</anchor>
      <arglist>(double x1, double x2, double lnx1, double lnx2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rc</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a46ad0bac8b179d71ee65b208ba3d099f</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rd</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a0c66f2bc5e32ee6f1ff19ef05275009e</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rf</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a1b32bfb54ac14802eef602d1b33e0270</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rj</name>
      <anchorfile>namespace_special_functions.html</anchorfile>
      <anchor>a5720f1e57fc3f62dc23545c8568e0465</anchor>
      <arglist>(double x, double y, double z, double p)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>StoredTable_Impl</name>
    <filename>namespace_stored_table___impl.html</filename>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>namespace_stored_table___impl.html</anchorfile>
      <anchor>a7b8966ad5c86f86180d9e47e54d86345</anchor>
      <arglist>(string filePath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>namespace_stored_table___impl.html</anchorfile>
      <anchor>a19c3f5f2555b695e8db84f40efcf2296</anchor>
      <arglist>(size_t numAxes, const SimulationItem *item, string filename, bool resource, string axes, string quantity, string &amp;filePath, const double **axBeg, const double **qtyBeg, size_t *axLen, size_t *qtyStep, bool *axLog, bool *qtyLog)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>VoigtProfile</name>
    <filename>namespace_voigt_profile.html</filename>
    <member kind="function">
      <type>double</type>
      <name>sample</name>
      <anchorfile>namespace_voigt_profile.html</anchorfile>
      <anchor>ad36e7bbc996510441f6868c4449ba1a2</anchor>
      <arglist>(double a, double x, Random *random)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>namespace_voigt_profile.html</anchorfile>
      <anchor>a54f9286c3ddf9603158bfaf1a366e8a7</anchor>
      <arglist>(double a, double x)</arglist>
    </member>
  </compound>
</tagfile>
