/**

\page UserCmdLine Using PTS from the command line

\section UserCmdLineScripts Command scripts

The Python scripts residing in the \c do sub-directory (if any) of each PTS package are intended to be invoked from the
command line, exposing (part of) the package's functionality for interactive use in a terminal session. The machinery
provided in the top-level \c do package (i.e. the \c do directory at the top level) enables executing any of these
scripts from the command line without having to specify its exact location. Furthermore, a command script can define
positional and/or optional arguments, which can then be provided on the command line. For more information on
developing a command script, see the pts.do.command module.

To learn more about the various command scripts available in \c PTS, refer to:
  - \ref UserCmdLineInvoking below
  - \ref UserAdminCmds, including a command to list all available commands
  - \ref UserVisualCmds
  - the \c SKIRT/PTS <a href="../version9/_tutorials.html">Tutorials</a>
  - the reference documentation for the commands in the various packages:
    - pts.admin.do
    - pts.band.do
    - pts.storedtable.do
    - pts.test.do
    - pts.visual.do


\section UserCmdLineInvoking Invoking command scripts

\note To enable the \c PTS command script machinery in a Terminal session, the PYTHONPATH environment variable must
have been properly defined and an appropriate alias for "pts" must have been declared. This is usually accomplished in
the login shell script, and should have been setup during the installation of \c PTS. For more information, refer to
\ref InstallPTSalias in the installation guide.

The syntax for invoking a \c PTS command script from the command line is:

    pts packagename/scriptname argument1 argument2 ...

The first argument on the command line (after "pts") must specify the package and script names separated by a forward
slash. The remaining command line arguments are passed to the script.

Several shortcuts are allowed for the package and script names, as long as these shortcuts do not result in any
ambiguities. The package name can be omitted, and if the script name contains underscores, each of the segments between
the underscores can be used instead of the full script name. Also, any name can be shortened to an initial subset of
the name.

For example, the command script \c try_do.py resides in the \c do subdirectory of the \c admin package This script
accepts a single string as a positional argument. Assuming that none of the other command scripts match the same
shortcut, this script can be accessed by any of the following commands:

    pts admin/try_do me
    pts ad/tr me
    pts tr me
    pts do me

All command scripts support the \c --help option. For example:

    $ pts try --help
    usage: pts [-h] [--aString <str>] [--aFloat <float>] [--anInteger <int>]
               admin/try_do aFixedString

    admin/try_do: try the PTS command mechanism

    positional arguments:
      admin/try_do       packagename/scriptname
      aFixedString       first and only positional argument

    optional arguments:
      -h, --help         show this help message and exit
      --aString <str>    optional string argument (default: PTS is great)
      --aFloat <float>   optional float argument (default: 3.14)
      --anInteger <int>  optional integer argument (default: 7)

This means that the \c try_do.py command script accepts three optional, non-positional arguments in addition to the
single positional string argument. For demonstration purposes, the optional arguments each have a different data type:
string, floating point number, and integer number. To pass a string that may contain whitespace or other special
characters, use quotes. For example:

    $ pts try "you and me" --aFloat 8.3 --anInteger 17
    Starting admin/try_do...
    Command line arguments are:
      Fixed string:    you and me
      Optional string: PTS is great
      Float number:    8.3
      Integer number:  17
    Finished admin/try_do...

*/
