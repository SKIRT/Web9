/**

\page UserScripts Using PTS from regular Python scripts

The functionality of \c PTS is fully available as a set of regular Python packages that can be imported into external
Python code. This allows developing custom visualization scripts or even fully automated pipelines without having to
start from scratch.

This page introduces the basic concepts of how to use \c PTS from regular Python code by studying a basic example
program (\ref UserScriptsProgram is listed at the end of the page). The program assumes that a \c SKIRT configuration
file named "galaxy_template.ski" has been placed in the current directory, and that this ski file describes a
panchromatic simulation of a spiral galaxy model including a single instrument and some specific types of probes.

For more information on each of the subjects introduced, refer to the \c PTS reference documentation.


\section UserScriptsImport Importing PTS packages

\note To allow importing \c PTS packages into external Python code, the PYTHONPATH environment variable must have been
properly defined. This is usually accomplished in the login shell script, and should have been setup during the
installation of \c PTS. For more information, refer to \ref InstallPTSalias in the installation guide.

\code{.py}
import logging
import pts.simulation as sm
import pts.utils as ut
import pts.visual as vis
import pts.do
pts.do.initializePTS()
\endcode

At the start of the script:
- Import the \c PTS packages that will be used; there is a shorthand convention for most packages, as shown above, and
  as presented in \ref DevStyleImport in the \c PTS developer guide.
- Initialize the \c PTS libraries by calling pts.do.initializePTS(); this also configures the standard logging package
  to include a time stamp in each message.
- Usually it is meaningful to import the standard \em logging package as well, so that your program can emit messages
  with the same format as the \c PTS log messages.


\section UserScriptsSki Modifying SKIRT configuration files

\code{.py}
skifile = sm.SkiFile("galaxy_template.ski")
skifile.setNumPrimaryPackets(1e7)
skifile.saveTo("galaxy.ski")
logging.info("Saved galaxy.ski")
\endcode

This section of the code loads the ski file template that was previously prepared, modifies the number of photon
packets being launced in each phase, and saves the updated ski file under a new name. The
pts.simulation.skifile.SkiFile class offers many more functions to obtain information from and/or update the contents
of \c SKIRT configuration files.


\section UserScriptsExec Performing SKIRT simulations

\code{.py}
logging.info("Executing galaxy.ski")
skirt = sm.Skirt()
simulation = skirt.execute("galaxy.ski", console='brief')
\endcode

This section of the code employs the pts.simulation.skirt.Skirt class to actually perform the \c SKIRT simulation. The
constructor of this class attempts to locate the \c SKIRT executable in some default location, which can be overridden
using the \em path argument.

The pts.simulation.skirt.Skirt.execute() function offers various arguments (not used here) to specify the location of
the \c SKIRT input/output files and to control parallelization. The \em console argument is given the value 'brief' to
limit the number of \c SKIRT log messages written to the console to the most important one; in any case all messages
are still being written to the \c SKIRT log file as usual.

The execute() function returns an object of type pts.simulation.simulation.Simulation which can be used to access the
results of the \c SKIRT simulation (the results reside on disk; the simulation objects merely remembers where they
are).

\code{.py}
simulation = sm.createSimulation(prefix="galaxy")
\endcode

While invoking \c SKIRT directly from Python is very useful in automated workflows, there are many situations where
this might be impracticle or even impossible (e.g. because running the simulation and analyzing its results is not
being done on the same computer). In cases where the simulation has already been performed, the line above creates a
simulation object corresponding to its result. The pts.simulation.simulation.createSimulation() function takes an extra
argument to specify the location if needed.


\section UserScriptsVisual Producing built-in visualizations

\code{.py}
micron = sm.unit("micron")
vis.plotSeds(simulation, minWavelength=0.1 * micron, maxWavelength=1000 * micron,
             decades=4, figSize=(7, 4.5), outFileName="galaxy_sed.pdf")
\endcode

The built-in visualizations offered from the command line (see \ref UserVisualCmds) are obviously also available as
regular functions, often offering more flexibility through extra arguments. The code section above calls on the
pts.visual.plotcurves.plotSeds() function to plot the spectrum observed by the simulation. Note that all quantities in
\c PTS have astropy units attached. In the above example, the wavelengths are specified im micron.

The plotSeds() function automatically plots the indvidual components contributing to the total flux because there is
only a single instrument in the simulation. Here is the resulting plot:

\image html UserSpectrumComps.png

For more information on other visualization options, refer to the reference doumentation of the pts.visual package.


\section UserScriptsFits Loading FITS files

\code{.py}
totalfluxpath = simulation.instruments()[0].outFilePaths(fileType="total.fits")[0]
datacube = sm.loadFits(totalfluxpath)
x,y,wavelengths = sm.getFitsAxes(totalfluxpath)
\endcode

The first line in this code section obtains the absolute path of the total flux data cube generated by the first
instrument in the simulation. In this particular case, we could easily have hardcoded the name, but the generic method
is more instructive. A simulation object can asked for a list of instrument objects, which in turn can be asked for a
list of output file paths.

The second line loads the data cube, and the third line loads the three corresponding axes. Note that both the
pts.simulation.fits.loadFits() and pts.simulation.fits.getFitsAxes() functions return astropy quantities with units
attached. See [Units and Quantities]( http://docs.astropy.org/en/stable/units/) for more information on the
astropy.units package.

\code{.py}
frame = datacube[:,:,20]
wavelength = wavelengths[20]
logging.info("Observed frame has {} by {} pixels".format(*frame.shape))
logging.info("Maximum surface brightness at {} is {}".format(wavelength, frame.max()))
\endcode

This code section picks an arbitrary wavelength (with index 20 in the wavelength grid established for the instrument in
the ski file) and outputs the maximum surface brightness at that wavelength:

    Observed frame has 500 by 200 pixels
    Maximum surface brightness at 0.2010861071 micron is 3.8903441429138184 MJy / sr

Note that surface brightness units are automatically included by the astropy units machinery. The number formatting
could be improved, but that is not the subject of this user guide.

\section UserScriptsColumns Loading text column files

\code{.py}
for probe in simulation.probes():
    if "CellProperties" in probe.type():
        filepath = probe.outFilePaths()[0]
        volume, density = sm.loadColumns(filepath, "volume,dust mass density")
        mass = volume*density
    if "DustTemperaturePerCell" in probe.type():
        filepath = probe.outFilePaths()[0]
        temperature, = sm.loadColumns(filepath, "dust temperature")
Tavg = (mass*temperature).sum() / mass.sum()
\endcode

This code section assumes that the simulation configuration includes a SpatialCellPropertiesProbe instance and a
DustTemperaturePerCellProbe instance. The for loop iterates over all probes and selects the appropriate ones.

The pts.simulation.text.loadColumns() function loads specific columns of a text column file, using the structured
header information included by \c SKIRT. The columns to be loaded can be specified as a comma-separated list of header
descriptions corresponding to those in the file header. Again, the function returns astropy quantities with appropriate
units attached.

In the example above, the cell volumes and dust mass densities written by the SpatialCellPropertiesProbe are combined
with the cell temperatures written by the DustTemperaturePerCellProbe to obtain the mass-weighted average dust
temperature.

\code{.py}
logging.info("Maximum dust temperature is {}".format(temperature.max()))
logging.info("Maximum cell dust mass is {}".format(mass.max()))
logging.info("Mass-weighted average dust temperature is {}".format(Tavg))
\endcode

This code section simply outputs the calculated results, again automatically including units:

    Maximum dust temperature is 35.0168546 K
    Maximum cell dust mass is 190269.7794784552 solMass
    Mass-weighted average dust temperature is 28.123396640480095 K


\section UserScriptsProgram The complete program

Here is the complete Python program:

\code{.py}
# import and initialize
import logging
import pts.simulation as sm
import pts.utils as ut
import pts.visual as vis
import pts.do
pts.do.initializePTS()

# adjust the ski file
skifile = sm.SkiFile("galaxy_template.ski")
skifile.setNumPrimaryPackets(1e7)
skifile.saveTo("galaxy.ski")
logging.info("Saved galaxy.ski")

# perform the simulation
logging.info("Executing galaxy.ski")
skirt = sm.Skirt()
simulation = skirt.execute("galaxy.ski", console='brief')

# if the simulation has already been performed, use this instead
#simulation = sm.createSimulation(prefix="galaxy")

# plot the SED
micron = sm.unit("micron")
vis.plotSeds(simulation, minWavelength=0.1 * micron, maxWavelength=1000 * micron,
             decades=4, figSize=(7, 4.5), outFileName="galaxy_sed.pdf")

# determine the maximum surface brightness at a certain wavelength
totalfluxpath = simulation.instruments()[0].outFilePaths(fileType="total.fits")[0]
datacube = sm.loadFits(totalfluxpath)
x,y,wavelengths = sm.getFitsAxes(totalfluxpath)

frame = datacube[:,:,20]
wavelength = wavelengths[20]
logging.info("Observed frame has {} by {} pixels".format(*frame.shape))
logging.info("Maximum surface brightness at {} is {}".format(wavelength, frame.max()))

# determine the mass-weighted average dust temperature
for probe in simulation.probes():
    if "CellProperties" in probe.type():
        filepath = probe.outFilePaths()[0]
        volume, density = sm.loadColumns(filepath, "volume,dust mass density")
        mass = volume*density
    if "DustTemperaturePerCell" in probe.type():
        filepath = probe.outFilePaths()[0]
        temperature, = sm.loadColumns(filepath, "dust temperature")
Tavg = (mass*temperature).sum() / mass.sum()

logging.info("Maximum dust temperature is {}".format(temperature.max()))
logging.info("Maximum cell dust mass is {}".format(mass.max()))
logging.info("Mass-weighted average dust temperature is {}".format(Tavg))
\endcode

And here is the complete output generated by the program:

    06/06/2019 10:40:42.492   Saved galaxy.ski
    06/06/2019 10:40:42.492   Executing galaxy.ski
    06/06/2019 10:40:42.718   Welcome to SKIRT v9.0 (git 06da006 built on 06/06/2019 at 09:09:09)
    06/06/2019 10:40:42.719   Running on obiwan.ugent.be for pcamps
    06/06/2019 10:40:42.719   Constructing a simulation from ski file '/Users/pcamps/SKIRT/run/galaxy.ski'...
    06/06/2019 10:40:46.250 - Finished setup in 3.5 s.
    06/06/2019 10:40:46.285 - Finished setup output in 0.0 s.
    06/06/2019 10:41:08.694 - Finished primary emission in 22.4 s.
    06/06/2019 10:41:27.788 - Finished secondary emission in 19.1 s.
    06/06/2019 10:41:27.788 - Finished the run in 41.5 s.
    06/06/2019 10:41:29.502 - Finished final output in 1.7 s.
    06/06/2019 10:41:29.502 - Finished simulation galaxy using 8 threads and a single process in 46.8 s.
    06/06/2019 10:41:29.570   Available memory: 16 GB -- Peak memory usage: 1.34 GB (8.4%)
    06/06/2019 10:41:30.198   Created /Users/pcamps/SKIRT/run/galaxy_sed.pdf
    06/06/2019 10:41:30.341   Observed frame has 500 by 200 pixels
    06/06/2019 10:41:30.342   Maximum surface brightness at 0.2010861071 micron is 3.8903441429138184 MJy / sr
    06/06/2019 10:41:30.393   Maximum dust temperature is 35.0168546 K
    06/06/2019 10:41:30.393   Maximum cell dust mass is 190269.7794784552 solMass
    06/06/2019 10:41:30.393   Mass-weighted average dust temperature is 28.123396640480095 K

*/
