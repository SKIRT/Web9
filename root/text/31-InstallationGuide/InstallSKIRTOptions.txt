/**

\page InstallSKIRTOptions Use the SKIRT build options (all platforms)

This topic contains the following sections:
- \ref InstallSKIRTOptionsIntro
- \ref InstallSKIRTOptionsList

For instructions on how to configure build options, see one of the following:
- \ref InstallSKIRTUnixBuild
- \ref InstallSKIRTWindowsBuild
- \ref InstallSKIRTQtBuild

\section InstallSKIRTOptionsIntro Introduction to build options

The SKIRT build process is driven by the CMake utility, which supports many operating systems and
offers a flexible system to adjust a build to local requirements and circumstances. To this end, CMake manages
a set of "variables" that control the build process. In the context of the SKIRT code, we recognize
three categories of CMake variables:

- Primary build options to include additional programs or to enable extra capabilities (the "out-of-the-box" SKIRT
  code configuration builds just the SKIRT command-line program without external dependencies). The variable
  names for these options start with "BUILD_".
- Secondary build options for which CMake usually finds the appropriate values, but which can be adjusted by the
  user if needed. For example, there is a build option to specify the path to the C++ compiler used for the code.
- Advanced variables which are almost never to be touched by a user, and which are displayed by CMake only upon
  special request.

The table in the following section includes the primary and secondary build options relevant for building the SKIRT
code. If the need should ever arise for adjusting an advanced variable, your favorite web search engine will
hopefully guide you to the answer.


\section InstallSKIRTOptionsList Alphabetical list of build options

<TABLE>
<TR><TH>Name</TH>  <TH>Default</TH>  <TH>Relevance</TH>  <TH>Description</TH></TR>
<TR><TD>BUILD_DOX_STYLE</TD>   <TD>OFF</TD> <TD></TD>
        <TD>If ON, build the documentation streamliner \c doxstyle (for developers,
            see \ref DevCodingStyleFormat)</TD></TR>
<TR><TD>BUILD_MAKE_UP</TD>   <TD>OFF</TD> <TD></TD>
        <TD>If ON, build the \c MakeUp desktop utility, see \ref UserMakeUp</TD></TR>
<TR><TD>BUILD_SKIRT</TD>   <TD>ON</TD> <TD></TD>
        <TD>If ON, build the SKIRT command line program, see \ref UserGuide</TD></TR>
<TR><TD>BUILD_SMILE_SHAPES</TD>   <TD>OFF</TD> <TD></TD>
        <TD>If ON, build the SMILE \c shapes example (for developers, see \ref DevSmileCompShapes)</TD></TR>
<TR><TD>BUILD_SMILE_TOOL</TD>   <TD>OFF</TD> <TD></TD>
        <TD>If ON, build the \c smiletool command-line utility (for developers and advanced users,
        see \ref DevSmileCompTool)</TD></TR>
<TR><TD>BUILD_WITH_MPI</TD>   <TD>OFF</TD> <TD></TD>
        <TD>If ON, use the message-passing interface (MPI) to enable multi-processing in SKIRT,
        see \ref InstallMPI</TD></TR>
<TR><TD>CMAKE_BUILD_TYPE</TD>   <TD>Release</TD> <TD></TD>
        <TD>The type of build, usually Release or Debug.</TD></TR>
<TR><TD>CMAKE_CXX_COMPILER</TD>   <TD>\em auto (*)</TD> <TD></TD>
        <TD>The path to the C++ compiler used for the code</TD></TR>
<TR><TD>CMAKE_C_COMPILER</TD>   <TD>\em auto (*)</TD> <TD></TD>
        <TD>The path to the "plain" C compiler used for the code</TD></TR>
<TR><TD>CMAKE_INSTALL_PREFIX</TD>   <TD>\em auto</TD> <TD></TD>
        <TD>This variable is not used for the SKIRT code</TD></TR>
<TR><TD>GIT_EXECUTABLE</TD>   <TD>\em auto (*)</TD> <TD></TD>
        <TD>The path to the executable for the \c git command line tool</TD></TR>
<TR><TD>MPI_CXX_COMPILER</TD>   <TD>\em auto (*)</TD> <TD>BUILD_WITH_MPI</TD>
        <TD>The path to the C++ compiler used for compiling files that refer to MPI headers</TD></TR>
<TR><TD>MPI_CXX_INCLUDE_PATH</TD>   <TD>\em auto (*)</TD> <TD>BUILD_WITH_MPI</TD>
        <TD>The path to the include directory(ies) for the MPI headers</TD></TR>
<TR><TD>MPI_CXX_LIBRARIES</TD>   <TD>\em auto (*)</TD> <TD>BUILD_WITH_MPI</TD>
        <TD>The path to the library directory(ies) for the MPI libraries</TD></TR>
<TR><TD>Qt5Core_DIR</TD>   <TD>\em auto (*)</TD> <TD>BUILD_MAKE_UP</TD>
        <TD>The path to the directory for the Qt5Core module</TD></TR>
<TR><TD>Qt5Gui_DIR</TD>   <TD>\em auto (*)</TD> <TD>BUILD_MAKE_UP</TD>
        <TD>The path to the directory for the Qt5Gui module</TD></TR>
<TR><TD>Qt5Widgets_DIR</TD>   <TD>\em auto (*)</TD> <TD>BUILD_MAKE_UP</TD>
        <TD>The path to the directory for the Qt5Widgets module</TD></TR>
</TABLE>

(*) \em auto means that CMake usually finds the appropriate path without user intervention. In case CMake fails
(e.g. the proposed path is empty, contains a string such as "NOTFOUND", or points to the wrong executable or library),
you can manually override the value of the variable with the correct path.

*/
