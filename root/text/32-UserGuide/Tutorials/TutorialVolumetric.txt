/**

\page TutorialVolumetric Volumetric data and 3D plots

In this tutorial you will explore options for extracting three-dimensional (3D) information from a simulated SKIRT
model. You will use the output of a simple spiral galaxy simulation to produce volume- or mass-weighted temperature
histograms and fully 3D temperature maps.

\section TutorialVolumetricPre Getting ready

This tutorial assumes that you have completed the introductory SKIRT tutorials \ref TutorialBasicsMono and \ref
TutorialBasicsPan, and that you have reviewed the topics on \ref UserVisualize and \ref UserProbes, or that you have
otherwise acquired the working knowledge introduced there. At the very least, before starting this tutorial, you should
have installed the SKIRT code, and preferably also PTS and a FITS file viewer such as DS9 (see \ref InstallationGuide).

To avoid spending time creating yet another SKIRT parameter file from scratch, this tutorial offers a \em ski file for
download to serve as an initial configuration. Download the file \c TutorialVolumetricSpiral.ski using the link
provided in the table below and put it into your local working directory.

<TABLE>
<TR><TH>Initial SKIRT parameter file</TH>
  <TD><a href="https://sciences.ugent.be/skirtextdat/SKIRTC/Tutorials/TutorialVolumetricSpiral.ski">TutorialVolumetricSpiral.ski</a>
  </TD>
</TABLE>

\section TutorialVolumetricIntro Introduction

SKIRT simulations usually produce output through both instruments and probes. Instruments mimic the observation of
radiation as projected on a plane. The output is therefore limited to two dimensions by definition. In contrast, probes
can peek inside the simulated model and provide information on various physical quantities, such as the medium density
or temperature. Because a probe has access to the full model, the output can take various forms, including arbitrary
planar cuts or projections. Interestingly, a probe can also be configured to output information for each cell in the
simulation's spatial grid, providing 3D data on the model. That is the topic of this tutorial.

There is an important caveat, however. The techniques discussed here only apply to quantities that are discretized on
the internal spatial grid used for the radiative transfer simulations. Essentially, this includes all medium
properties, whether derived (resampled) from the input model (e.g., density, velocity) or calculated in the simulation
(e.g., radiation field, dust temperature). However, it does \em not include the properties of the primary sources
(e.g., luminosity density), because these are never discretized on the internal spatial grid. Instead, the emitted
photon packets are sampled directly from the original (possibly imported) definition of the primary sources.


\section TutorialVolumetricModel The simulation model

Rename the downloaded SKIRT parameter file to a shorter name of your liking ending with the ".ski" filename extension,
for example \c volume.ski. Open the \em ski file in a text editor and examine its contents. You should recognize the
following configuration elements (not in this order):

 - a panchromatic simulation including dust emission, with wavelengths ranging from UV to sub-millimeter
    - the primary sources and the radiation field wavelength grid cover 0.09 to 100 micron
    - the dust emission wavelength grid covers 1 to 2000 micron
    - the instruments cover the full wavelength range from 0.09 to 2000 micron
 - a spatial geometry with four components:
    - a flattened SÃ©rsic bulge consisting of evolved stars (3500 K)
    - a thicker exponential disk consisting of evolved stars (3500 K), with spiral arm structure
    - a thinner exponential disk consisting of young stars (10000 K), with spiral arm structure
    - an exponential dust disk with spiral arm structure (the arms in the young stellar disk and the dust disk trail
      those in the evolved stellar population by varying the phase zero-points)
 - the material mix \c ThemisDustMix with support for stochastically heated dust grains in the dust emission calculation
 - an adaptive octree grid
 - two SED instruments at face-on and edge-on inclination, respectively
 - a fairly extensive list of probes
    - the standard convergence info and cuts probes, which allow a quick sanity check of the model
    - a temperature probe with the default cuts form, which produces temperature cuts in the same planes as the
      standard density cuts generated by the convergence cuts probe
    - a density probe and a temperature probe configured with the "per cell" form, which output the respective
      quantities for each cell in the spatial grid
    - the specialty "spatial cell properties" probe, which outputs basic information on each cell in the spatial grid,
      including the coordinates of the cell center and the cell volume, crucial for the purposes of this tutorial.

Run the \c volume.ski \em ski file with SKIRT. If SKIRT immediately produces a fatal error while constructing the
simulation, this probably means that the \em ski file needs upgrading; see \ref UserUpgradeSki.

Note the construction of the octree grid during setup. The total number of cells should be slightly over half a
million; the precise number depends on random sampling effects. Because the simulation includes dust emission and we
aim for a fairly well-resolved temperature distribution, the run time is a bit longer than usual for a tutorial.

After the simulation completes, open the convergence info file \c volume_cnv_convergence.dat in a text editor and
verify the statistics. The total dust mass should be accurately captured by the grid, with a discrepancy much smaller
than 1 per cent. The optical depth along the coordinate axes may show discrepancies of up to about 5 per cent. These
apparent inaccuracies are mostly a result of an implementation limitation in the spiral arm decorator: the
redistribution of the dust mass from the disk into the stellar arms is not properly accounted for in the listed input
optical depth.

Now use PTS to produce some standard plots and verify that the model behaves as expected. Because this is not the focus
of this tutorial, the plots below are reproduced with limited resolution.

\verbatim
pts plot_convergence .
\endverbatim

\image html TutorialVolumetricConvergenceCuts.png

\verbatim
pts plot_temperature .
\endverbatim

\image html TutorialVolumetricTemperatureCuts.png

\verbatim
pts plot_seds .
\endverbatim

\image html TutorialVolumetricSEDs.png


\section TutorialVolumetricHistograms Volumetric histograms

It is instructive to inspect the header information in the column text files produced by the "per cell" probes:

\verbatim
$ head -5 volume_prp_cellprops.dat
# column 1: spatial cell index (1)
# column 2: x coordinate of cell center (pc)
# column 3: y coordinate of cell center (pc)
# column 4: z coordinate of cell center (pc)
# column 5: cell volume (pc3)
\endverbatim

\verbatim
$ head -3 volume_tmp_dust_T.dat
# Indicative temperature per spatial cell
# column 1: spatial cell index (1)
# column 2: indicative temperature (K)
\endverbatim

The "spatial cell properties" probe outputs columns with the coordinates of the cell center and the volume for each
cell, plus some additional columns that are not of interest for this tutorial (but could be for other purposes). The
temperature probe configured with the "per cell" form simply outputs the indicative dust temperature for each cell.
Combining the information in both files allows obtaining 3D volumetric information.

The first column in each file lists an index that identifies the spatial cell represented by this row. In the current
implementation of the probes, there is always a row for each cell and the rows are representing the cells in the same
order. As a result, there is no need for explicit synchronization through the cell index.

You can now use Python to load and analyze these data. The code snippets shown below depend on at least some of the
previous snippets and thus should be entered sequentially. To work through the tutorial, you can copy each new code
section into a regular Python script and run the partially complete program from the start. Alternatively, you can copy
the code sections into a Python notebook so that you can run each section separately.

## Importing packages

\code{.py}
import numpy as np
import matplotlib.pyplot as plt
\endcode

At the start, import the packages used for handling the data and for plotting.

XXX



<b><i>Congratulations, you made it to the end of this tutorial!</i></b>

*/
