/**

\page UserSpatialGrids Spatial grids

\section SpatialGridsModel Spatial characteristics of the simulated model

In a SKIRT simulation, the spatial distributions of the model are defined as part of the SourceSystem (for the
radiation sources) and the MediumSystem (for the transfer medium). The distributions may be specified through one or
more of the built-in geometries (Geometry) or it may be imported from a snapshot generated by a hydrodynamical
simulation.

In all cases, the spatial characteristics of the model are internally described in a three-dimensional, right-handed
Cartesian coordinate system, with some provisions for keeping track of specific spherical or cylindrical symmetries
where appropriate. In many cases the model domain is centered on the origin of the coordinate system, but this is not a
requirement. In fact, facilities such as the OffsetGeometryDecorator class allow easily defining off-center structures.

A model is considered to be spherically or cylindrically symmetric if all sources and media components show the
corresponding symmetry. By definition, a spherically symmetric model is centered on the origin, and a cylindrically
symmetric model is centered on the vertical coordinate axis.


\section SpatialGridsGrids Spatial grids

A SKIRT simulation employs an instance of the SpatialGrid class to spatially discretize the transfer medium of the
model. Properties such as the material density and the calculated radiation field are considered to be uniform within
each cell of the grid. It is thus necessary to provide a sufficiently fine grid in the relevant areas of the model. On
the other hand, simulation runtime and memory requirements scale with the number of cells, so it is often necessary to
minimize the number of cells in less relevant areas of the model.

SKIRT offers a range of spatial grid options to help accomplish this balance. The following diagram shows the key
classes in the SpatialGrid class hierarchy (connections starting with a triangle denote inheritance).

\dot
digraph SpatialGridhierarchy {
    rankdir=BT;
    node [shape=rect, fontname=Helvetica, fontsize=10];
    edge [arrowhead=empty];

    SpatialGrid [label="SpatialGrid" URL="\ref SpatialGrid"];
      SphereSpatialGrid [label="SphereSpatialGrid" URL="\ref SphereSpatialGrid"];
        Sphere1DSpatialGrid [label="Sphere1DSpatialGrid" URL="\ref Sphere1DSpatialGrid" color=blue];
        Sphere2DSpatialGrid [label="Sphere2DSpatialGrid" URL="\ref Sphere2DSpatialGrid" color=blue];
      CylinderSpatialGrid [label="CylinderSpatialGrid" URL="\ref CylinderSpatialGrid"];
        Cylinder2DSpatialGrid [label="Cylinder2DSpatialGrid" URL="\ref Cylinder2DSpatialGrid" color=blue];
      BoxSpatialGrid [label="BoxSpatialGrid" URL="\ref BoxSpatialGrid"];
        CartesianSpatialGrid [label="CartesianSpatialGrid" URL="\ref CartesianSpatialGrid" color=blue];
        PolicyTreeSpatialGrid [label="PolicyTreeSpatialGrid" URL="\ref PolicyTreeSpatialGrid"];
        VoronoiMeshSpatialGrid [label="VoronoiMeshSpatialGrid" URL="\ref VoronoiMeshSpatialGrid"];

    SphereSpatialGrid -> SpatialGrid;
      Sphere1DSpatialGrid -> SphereSpatialGrid;
      Sphere2DSpatialGrid -> SphereSpatialGrid;
    CylinderSpatialGrid -> SpatialGrid;
      Cylinder2DSpatialGrid -> CylinderSpatialGrid;
    BoxSpatialGrid -> SpatialGrid;
      CartesianSpatialGrid -> BoxSpatialGrid;
      PolicyTreeSpatialGrid -> BoxSpatialGrid;
      VoronoiMeshSpatialGrid -> BoxSpatialGrid;
}
\enddot

The SphereSpatialGrid subclasses are defined in spherical coordinates and their configuration space is a sphere
centered on the origin. Likewise, the CylinderSpatialGrid subclasses are defined in cylindrical coordinates and their
configuration space is a cylinder centered on the vertical coordinate axes. The BoxSpatialGrid subclasses are defined
in Cartesian coordinate and their configuration space is a cuboid lined up with the coordinate axes (but not
necessarily centered on the origin).

The Sphere1DSpatialGrid class provides spatial grids in which the grid cells are concentric shells. It can be used only
when the model is spherically symmetric.

The Sphere2DSpatialGrid class provides axisymmetric spatial grids based on spherical coordinates. The grid is defined
in the meridional \f$(r,\theta)\f$ plane and rotated around the vertical coordinate axis. The Cylinder2DSpatialGrid
class provides axisymmetric spatial grids based on cylindrical coordinates. The grid is defined in the meridional
\f$(R,Z)\f$ plane and rotated around the vertical coordinate axis. These grids can be used only when the model is
cylindrically (or spherically) symmetric.

The CartesianSpatialGrid class provides three-dimensional spatial grids based on a regular cartesian grid. Each cell is
a cuboid lined up with the coordinate axes, although cells do not necessarily all have the same size or form factor.
The PolicyTreeSpatialGrid class offers a spatial grid in which the cubdoidal domain is recursively divided into two or
eight subcells until the resulting cells meet some predefined local criteria (e.g. contain less than a given fraction
of the total material mass). This allows placing many small cells in relevant regions and fewer larger cells in other
regions. The VoronoiMeshSpatialGrid class uses a Voronoi tessellation to discretize the spatial domain; each cell is a
convex polyhedron. The BoxSpatialGrid subclasses can be used regardless of any symmetries in the model.

The four classes indicated in the diagram with a blue border implement spatial grids that need an instance of a Mesh
subclass to define the position of the cell borders in each dimension, as described in the next section.


\section SpatialGridsMeshes Meshes

In SKIRT, an instance of a Mesh subclass characterizes a one-dimensional mesh over the unit interval \f$[0,1]\f$. A
mesh is essentially a partition of this interval into \f$N\f$ bins defined by an ordered sequence of \f$N+1\f$ mesh
points \f${ti}\f$, with \f$t_0=0\f$ and \f$t_\mathrm{N}=1\f$. The different Mesh subclasses illustrated in the
following diagram define various mesh point distributions (connections starting with a triangle denote inheritance).

\dot
digraph meshhierarchy {
    rankdir=BT;
    node [shape=rect, fontname=Helvetica, fontsize=10];
    edge [arrowhead=empty];

    Mesh [label="Mesh" URL="\ref Mesh"];
      MoveableMesh [label="MoveableMesh" URL="\ref MoveableMesh"];
        LinMesh [label="LinMesh" URL="\ref LinMesh"];
        PowMesh [label="PowMesh" URL="\ref PowMesh"];
        SymPowMesh [label="SymPowMesh" URL="\ref SymPowMesh"];
      AnchoredMesh [label="AnchoredMesh" URL="\ref AnchoredMesh"];
        LogMesh [label="LogMesh" URL="\ref LogMesh"];

      MoveableMesh -> Mesh;
        LinMesh -> MoveableMesh;
        PowMesh -> MoveableMesh;
        SymPowMesh -> MoveableMesh;
      AnchoredMesh -> Mesh;
        LogMesh -> AnchoredMesh;
}
\enddot

The LinMesh class represents meshes with a linear distribution of the mesh points. The PowMesh class represents meshes
with a power-law distribution of the mesh points. The bin sizes form a geometric series, i.e. each bin is a constant
factor larger than the previous one. The distribution is characterized by a single parameter, the bin width ratio
between the last and the first bin. The SymPowMesh class represents meshes with a symmetric power-law distribution of
the mesh points. The bin sizes form a geometric series starting from the innermost bin and moving outwards
symmetrically. If the number of bins is odd, there is one innermost bin; if it is even, there are two equal-size
innermost bins. The LogMesh class represents meshes with a logarithmic distribution of the mesh points. The first bin
covers the interval \f$[0,t_\mathrm{c}]\f$ and the widths of the remaining bins are distributed logarithmically over
the interval \f$[t_\mathrm{c},1]\f$, where \f$t_\mathrm{c}\f$ is a user-configurable parameter.

The object holding (and using) a Mesh instance is responsible for applying a linear transform from the unit interval
\f$[0,1]\f$ on which the mesh is defined to the desired interval. A MoveableMesh may be scaled and shifted to an
arbitrary interval \f$[x_\mathrm{min},x_\mathrm{max}]\f$. An AnchoredMesh should not be shifted, i.e. it can only be
scaled to a interval \f$[0,x_\mathrm{max}]\f$ anchored at the origin. This is appropriate, for example, for logarithmic
distributions where the first bin has special meaning.

The radial dimensions of a spatial grid accept any type of Mesh, including AnchoredMesh and MoveableMesh subclasses,
while the cartesian dimensions of a spatial grid require a MoveableMesh subclass (because an offset may need to be
applied to the grid, in addition to a scale).

Not shown in the diagram above are the FileMesh and ListMesh classes, which allow the user to configure any desired set
of custom mesh points.

*/
