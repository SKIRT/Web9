/**

\page UserImportSnap Importing snapshots [TO DO]

This topic provides an overview of SKIRT's capabilities for importing sources and media from snapshots produced by
hydrodynamical simulations. The discussion is organized as follows:

- \ref UserImportSnapSims
- \ref UserImportSnapMech
- \ref UserImportSnapMedia
- \ref UserImportSnapSources


\section UserImportSnapSims Hydrodynamical simulations

Computer programs that simulate the time-evolution of astrophysical systems produce increasingly realistic numerical
models. The scale of the models varies substantially between these simulations (e.g., stellar system, star forming
region, galaxy, cosmological box), as does the set of included physics (e.g., dark and baryonic matter, gravity,
hydrodynamics, magnetic fields, star formation and stellar feedback, chemical evolution, radiative energy transfer,
dust formation and destruction). Regardless, we refer to these programs as hydrodynamical simulation codes.

Hydrodynamical simulations usually output a series of \em snapshots, describing the state of the simulated model at a
particular time in its evolution, including the spatial distribution and other relevant properties of the dynamical
components, such as for example the stars and the interstellar medium in a galaxy.

Because of the nonlocal and nonlinear behavior of radiation transport, predicting the observable properties of these
hydrodynamical models requires a full, three-dimensional radiative transfer simulation in all but the most trivial
cases. Assuming that the radiation crossing times are much shorter than the dynamical time scales, the radiative
transfer simulation can be performed as a \em post-processing step based solely on the information contained in a
particular snapshot. The post-processing procedure extracts the spatial distribution of the radiation sources and the
obscuring medium, plus the corresponding properties, from the hydrodynamical snapshot data, and then performs a
radiative transfer simulation on the resulting setup.

Hydrodynamical simulation codes historically employ one of two schemes: a Lagrangian formulation based on moving
particles (smoothed particle hydrodynamics or SPH) or a Eulerian approach based on a non-moving spatial grid, often an
adaptive grid with multiple refinement levels (AMR). Some more recent codes introduce a new scheme that employs a
moving mesh based on a Voronoi tessellation of the spatial domain. This new scheme is claimed to combine the best
features of SPH and the traditional Eulerian approach, and it is becoming increasingly popular. Other codes use a
meshless approach based on a set of discretization locations reminiscent of Voronoi generator sites.

Most codes represent the collisionless components (dark matter, stars) as particles handled by an N-body solver, even
if the hydrodynamical solver for the collisional components (gas, dust) is mesh-based.


\section UserImportSnapMech Snapshot import mechanisms

The relevant snapshot data must be provided for import into SKIRT using one of the supported column text file formats.
In other words, an external procedure (usually a Python script) is needed to extract the appropriate information from
the native snapshot data and output the result as a column text file. While this seems restrictive, it is almost never
an issue in practice. In most cases, one needs to perform some additional processing anyway, such as locating the
proper data files, performing a coordinate transformation, limiting the imported data to a given aperture, calculating
indirectly derived properties, etc. Furthermore, the alternative would be to implement a variety of data formats and
point SKIRT to the relevant data through a potentially very complex configuration mechanism that would never be as
flexible as the Python language.

In all cases, the columns in the text file must be in the order prescribed by the SKIRT component controlling import of
the file (see \ref UserImportSnapMedia and \ref UserImportSnapSources below). The values in each column can be provided
either in the default units prescribed by that SKIRT component, or in the units defined through header lines in the
data file being imported (see the TextInFile class). In the latter case, any of the supported units corresponding to
the imported quantity can be used (see \ref UserUnits).

\note To facilitate working with large data volumes, SKIRT supports the binary "stored columns" file format as an
alternative to column text files. See the TextInFile and StoredColumns classes, the pts.storedtable.io module,
and the pts.storedtable.do.convert_text_to_stored_columns command script.

The heart of the SKIRT snapshot import mechanism is implemented by the classes in the following hierarchy.

\dot
digraph snapshothierarchy {
    rankdir=BT;
    node [shape=rect, fontname=Helvetica, fontsize=10];
    edge [arrowhead=empty];

    Snapshot [label="Snapshot" URL="\ref Snapshot"];
      ParticleSnapshot [label="ParticleSnapshot" URL="\ref ParticleSnapshot"];
      AdaptiveMeshSnapshot [label="AdaptiveMeshSnapshot" URL="\ref AdaptiveMeshSnapshot"];
      CellSnapshot [label="CellSnapshot" URL="\ref CellSnapshot"];
      VoronoiMeshSnapshot [label="VoronoiMeshSnapshot" URL="\ref VoronoiMeshSnapshot"];

    ParticleSnapshot -> Snapshot;
    AdaptiveMeshSnapshot -> Snapshot;
    CellSnapshot -> Snapshot;
    VoronoiMeshSnapshot -> Snapshot;
}
\enddot

The Snapshot subclasses support four paradigms for describing the spatial geometry of an imported source or medium
component:

- ParticleSnapshot: each row in the input file represents a particle, listing its position and smoothing length plus
  the component-specific properties. This is suitable for SPH or N-body particle representations.

- AdaptiveMeshSnapshot: the input file has lines defining the subdivision structure of the mesh, plus a row for each
  leaf cell with its component-specific properties. This is suitable for hierarchical Cartesian grids, including octree
  grids and adaptive mesh refinement (AMR) grids. The rows must be in a prescribed order called Morton order.

- CellSnapshot: each row in the input file represents a cuboidal cell, listing the coordinates of its lower-left and
  upper-right corners plus the component-specific properties. This is suitable for any Cartesian grid and provides a
  (somewhat less efficient) fallback in case the rows of a hierarchical grid cannot be easily obtained in Morton order.

- VoronoiMeshSnapshot: the input file has a row for each generating site, listing its position plus the
  component-specific properties. This is suitable for Voronoi-mesh based snapshots and can be used to approximate
  meshless approaches.

It is perfectly possible to mix and match these options in the same simulation. For example, it is quite common to
import radiation sources using particles and medium densities using a mesh-based grid.

The Snapshot classes are \em not exposed to the user through the SKIRT parameter file. Instead, they are invoked under
the hood by the various components that \em are user-configured. Three distinct, parallel class hierarchies make use of
the Snapshot classes, as summarized in the table below.

| %Source | %Medium | %Geometry | Uses |
| --- | --- | --- | --- |
| ImportedSource | ImportedMedium | ImportedGeometry | Snapshot |
| &nbsp;&nbsp;ParticleSource | &nbsp;&nbsp;ParticleMedium | &nbsp;&nbsp;ParticleGeometry | &nbsp;&nbsp;ParticleSnapshot |
| &nbsp;&nbsp;AdaptiveMeshSource | &nbsp;&nbsp;AdaptiveMeshMedium | &nbsp;&nbsp;AdaptiveMeshGeometry | &nbsp;&nbsp;AdaptiveMeshSnapshot |
| &nbsp;&nbsp;CellSource | &nbsp;&nbsp;CellMedium | &nbsp;&nbsp;CellGeometry | &nbsp;&nbsp;CellSnapshot |
| &nbsp;&nbsp;VoronoiMeshSource | &nbsp;&nbsp;VoronoiMeshMedium | &nbsp;&nbsp;VoronoiMeshGeometry | &nbsp;&nbsp;VoronoiMeshSnapshot |

Each of these class hierarchies implements the appropriate layer of functionality on top of the Snapshot classes. For
example, sources can launch photo packets, media can quickly find the material density at a given location, and
geometries offer a density distribution normalized to unity. The latter can be used for importing either source or
medium components and may be useful in some specific cases.


\section UserImportSnapMedia Importing media

## Overview

Any nontrivial SKIRT simulation includes one or more medium components describing the transfer medium in the model (see
the Medium class and its subclasses). Each medium component defines (a) the spatial density distribution of the medium
and (b) the relevant material properties of the medium at each location.

We first examine the most common situation where a medium component is assigned material properties that do not vary
across the spatial domain (although different medium components may be assigned different material properties). In this
case, SKIRT offers three distinct ways to define a component's medium density distribution:

- An imported snapshot fully defines the medium density distribution including the total mass, either directly or using
a simple formula, for example to derive a dust density from a gas density. With this option, the medium component is
configured using one of the ImportedMedium subclasses. These classes can import velocity and magnetic field information
for each particle or cell in the imported snapshot.

- An imported snapshot defines the medium density distribution normalized to unity, either directly or using a simple
formula, and the total mass is specified separately in the parameter file. With this option, the medium component is
configured using the GeometricMedium class and one of the ImportedGeometry subclasses. These classes cannot import
spatially varying velocity or magnetic field information.

- The medium density distribution is defined by configuring a built-in geometry (subclasses of the Geometry class).
This option can be useful to combine medium distributions imported from a snapshot with built-in, semi-analytical
distributions.

In any case, each medium component must be assigned a specific material mixture, i.e. one of the subclasses of the
MaterialMix class, which defines the optical and calorimetric properties of the medium, considered to be constant
across the spatial domain.

On the other hand, for some simulations it is desired to associate spatially variable material properties with a medium
component. For example, the snapshot may define a specific dust grain material or a different dust grain size
distribution for each cell or particle. This advanced feature is supported only when configuring one of the
ImportedMedium subclasses (i.e. the first option in the list above). For more information and examples, refer to the
second part of the tutorial \ref TutorialCustomDust.


## Particle media

The ParticleMedium class expects a text file with a single line for each particle. The first four columns specify the
\f$x\f$, \f$y\f$ and \f$z\f$ coordinates and the smoothing length \f$h\f$ for each particle. The subsequent columns
specify the medium mass \f$M\f$, and optionally the metallicity \f$Z\f$ and temperature \f$T\f$ depending on the
configured import options.

XXXX

The total medium density at an arbitrary position is obtained through \f[ \rho(\mathbf{r}) = \sum_{j=1}^N M_j \,
W(|\mathbf{r}-\mathbf{r}_j|,h_j) \f] where \f$M_j\f$ indicates the mass contribution for each particle. This mass
contribution is calculated from the values for the particle in the input file, depending on the material type and on
the configured import options.

Explain kernel.

For compatibility with previous SKIRT versions, ...

For dust media, a basic heuristic is provided mostly for compatibility with previous SKIRT versions.
The formula assumes that the mass column in the input file specifi
calculate the dust mass corresponding to the gas mass in the input data, assuming that the amount of dust is
proportional to the metal fraction in the gas, except in areas where the gas is too hot to form dust. In other words,
dropping the particle index, we have \f[ M_\mathrm{dust} = \begin{cases} f_\mathrm{dust}\,Z\,M_\mathrm{gas} &
\mathrm{if}\; T<T_\mathrm{max} \\ 0 & \mathrm{otherwise} \end{cases} \f] where \f$M_\mathrm{gas}\f$, \f$Z\f$, and
\f$T\f$ are the gas mass, metallicity, and temperature given by the gas particle's properties in the snapshot, and
\f$f_\mathrm{dust}\f$ and \f$T_\mathrm{max}\f$ are constant parameters specified when configuring SKIRT.


For gas and electrons, this  mass contribution usually directly
corresponds to the value  specified for the particle in the input file. For dust media, the particle's mass contribution
can optionally be derived using extra values as follows.


The ParticleMedium class allows configuring one of several (spherically symmetric) smoothing kernels,
including the frequently-used cubic spline kernel (the CubicSplineSmoothingKernel class) and a scaled Gaussian
smoothing kernel (the ScaledGaussianSmoothingKernel class). Corresponding to the kernels used in SPH simulations, these
kernels have a finite support so that only a relatively small number of terms in the sum above have a non-zero
contribution. SKIRT uses this property to accelerate the calculation of the medium density at a given spatial
position even for a potentially large number of smoothed particles. Essentially, the procedure involves placing an
appropriate grid over the spatial domain and constructing a list of overlapping smoothed particles for each cell in
that grid. For more information, see the ParticleSnapshot and SmoothedParticleGrid classes.

The ParticleMedium class can also be configured to take into account the Doppler shift caused by the velocity of the
medium relative to the model coordinate system when interacting with photon packets. If this option is enabled, the
input text file must provide three additional columns specifying the \f$v_\mathrm{x}\f$, \f$v_\mathrm{y}\f$ and
\f$v_\mathrm{z}\f$ components of the particle's velocity.



Alternatively, the configuration can include a GeometricMedium with a ParticleGeometry. The expected text file has the
same format as described above (without support for velocities). However, the ParticleGeometry class normalizes the
total mass of the density distribution to unity, which means that we need to supply the actual total mass through one
of the standard normalization mechanisms offered by the GeometricMedium class.




## Adaptive mesh media

Determining the medium density at an arbitrary position in a mesh-based distribution comes down to identifying the cell
that contains that position and returning the density associated with this cell. For a hierarchical grid this entails a
simple search that starts at the root node and recursively descends into the child node that happens to contain the
given position until a leaf node has been reached. With the cuboidal cells in a Cartesian adaptive mesh this is rather
straightforward.

In the case of a Voronoi mesh, however, the cell identification is not as simple. Due to the nature of Voronoi
tessellations, locating the appropriate cell is essentially a nearest neighbor search. Rather than looping over all
possible cells (or equivalently, all generating sites), SKIRT implements a dual level search grid to accelerate the
procedure. For more information, see the VoronoiMeshSnapshot class.

## Cell media

## Voronoi mesh media

The file formats expected by the AdaptiveMeshMedium and VoronoiMeshMedium classes are very similar to those described
for radiation sources respectively in \ref HydroSourcesAmrSnapshot and \ref HydroSourcesVoroLoadsnap. The properties
determining the %SED for radiation sources are in this case replaced by the properties defining the medium mass
contributions and optionally the velocity components for each cell as described in \ref HydroMediaSphLoadsnap for
particles.

Alternatively, we can configure an AdaptiveMeshGeometry or VoronoiMeshGeometry in a GeometricMedium. These classes
normalize the total mass of the density distribution to unity, so that we need to supply the actual total mass
through one of the standard normalization mechanisms offered by the GeometricMedium class.

To support various use cases, all of these classes offer a \em massType option with four possible values, affecting
the interpretation of the imported value in the first column:
 - Mass (integrated mass density): specifies the total mass in the cell; appropriate for materials such as dust.
 - MassDensity (mass density): value is multiplied by the cell volume to obtain the integrated mass in the cell.
 - Number (integrated number density): specifies the number of atoms or electrons in the cell; appropriate for gas.
 - NumberDensity (number density): value is multiplied by the cell volume to obtain the integrated number in the cell.


## Configuring the spatial grid

Finally, a spatial grid must be properly configured to provide adequate spatial resolution in areas with high medium
densities or steep density gradients. When importing a hydrodynamical simulation snapshot, the best option is to select
an adaptive grid, such as an octree grid (PolicyTreeSpatialGrid) or a Voronoi grid (VoronoiMeshSpatialGrid). To help
evaluate and configure the quality of a spatial grid, it is instructive to review the convergence information and the
density cuts along the coordinate planes generated by SKIRT upon request. For more information and examples, see the
tutorial \ref TutorialGridsTreeVoro).

For mesh-based hydrodynamical snapshots, SKIRT offers the option to discretize the spatial domain for the radiative
transfer simulation itself using the imported grid (see the AdaptiveMeshSpatialGrid VoronoiMeshSpatialGrid classes). In
this case, rather than constructing a spatial grid using some configured scheme based on sampling the density in the
imported distribution, SKIRT directly adopts the grid on which the snapshot has been defined.

While this seems a logical thing to do, it is not always the best choice. The resolution requirements for the radiative
transfer treatment may differ from those for the hydrodynamical simulation. We might not need the same overall
resolution, and fine-grained cells may be needed in different areas of the domain. Also, sometimes the radiative
transfer spatial grid can be made smaller than the full snapshot domain, cutting off the outer areas that do not
contain significant amounts of material anyway. And finally, SKIRT's octree spatial grid (the PolicyTreeSpatialGrid
class) is highly optimized for tracing photon packets, so the actual photon shooting simulation phase might be a lot
faster.



\section UserImportSnapSources Importing sources

## Overview

A SKIRT simulation always includes one or more components describing the radiation sources in the model (see the
SourceSystem and Source classes). Each source component defines (a) the spatial density distribution of the sources and
(b) the spectral energy distribution (%SED) at each location. In the context of post-processing hydrodynamical
simulations, there are three distinct ways of accomplishing this:

- The imported snapshot defines the spatial density distribution and provides additional properties for each smoothed
particle or grid cell from which an appropriate %SED can be determined. For this purpose, SKIRT includes several
parameterized %SED families. For example, the Bruzual-Charlot family (the BruzualCharlotSEDFamily class) represents
young and evolved stellar populations. The Mappings III %SED family (the MappingsSEDFamily class) represents
star-forming regions. New families can be added with minimal programming effort, provided the data for the %SED
templates is available in tabulated form.

- The imported snapshot defines just the spatial density distribution, and a particular %SED (constant throughout the
spatial domain) is configured from the %SED components built into SKIRT (subclasses of the SED class).

- The radiation sources are completely defined within SKIRT by configuring a built-in geometry (subclasses of the
Geometry class) and %SED (subclasses of the SED class). In case a hydrodynamical simulation does not include any
sources, this option can be used to complete the model by adding, for example, a central source to a dust disk, or
background radiation to the dust in a molecular cloud.

One can even combine these options by using multiple source components, for example, for adding an active galactic
nucleus to a spiral galaxy snapshot.

## Particle sources

A particle snapshot consists of a set of smoothed particles (or rather anchor points in a co-moving grid), each
characterized by a suite of properties. Formally, the spatial luminosity distribution in a particle snapshot is defined
by a list of \f$N\f$ particles and an assumed smoothing kernel \f$W(r,h)\f$, with each smoothed particle characterized
by a position \f$\mathbf{r}_j\f$, a smoothing length \f$h_j\f$, and a luminosity contribution \f$L_j\f$. The total
luminosity density at an arbitrary position \f$\mathbf{r}\f$ is then given by \f[ \Sigma(\mathbf{r}) = \sum_{j=1}^N L_j
\, W(|\mathbf{r}-\mathbf{r}_j|,h_j) \f]

The ParticleSource class allows configuring one of several (spherically symmetric) smoothing kernels, including the
frequently-used cubic spline kernel (the CubicSplineSmoothingKernel class) and a scaled Gaussian smoothing kernel (the
ScaledGaussianSmoothingKernel class). If needed, implementing a new smoothing kernel should be fairly straightforward.

For launching photon packets, SKIRT needs to generate random positions sampled from the radiation source's density
distribution. This is rather straightforward thanks to the composition method. The first step is the choice of a random
particle, based on a discrete distribution where each particle is weighted by its relative luminosity contribution. The
second step is generating a random position according to the luminosity distribution of the chosen particle, using the
configured smoothing kernel.

### Spatial distribution and SED from snapshot

We first consider the case where both the spatial distribution and the %SED at each location are determined from the
SPH snapshot. The ParticleSource class expects a text file with a single line for each particle. The first four columns
specify the \f$x\f$, \f$y\f$ and \f$z\f$ coordinates and the smoothing length \f$h\f$ for the particle. The number and
interpretation of the subsequent columns depends on the %SED family configured for this ParticleSource instance. For
example, for the Bruzual-Charlot %SED family (BruzualCharlotSEDFamily), the remaining three columns provide the
properties of the stellar population represented by the particle. The first extra column specifies the initial mass of
the stellar population, i.e. the particle's mass \f$M_\mathrm{init}\f$ at the time it was born. The second extra column
specifies the metallicity \f$Z\f$ of the stellar population, and the third extra column represents the age \f$t\f$ of
the stellar population.

The ParticleSource class can also be configured to take into account the Doppler shift caused by the velocity of the
radiation sources relative to the model coordinate system. If this option is enabled, the input text file must provide
three additional columns (after the smoothing length and before the additional properties for the %SED family),
specifying the \f$v_\mathrm{x}\f$, \f$v_\mathrm{y}\f$ and \f$v_\mathrm{z}\f$ components of the particle's velocity.
Given this velocity \f$\mathbf{v}\f$, the redshift \f$z\f$ experienced by a photon packet launched from the particle in
direction \f$\mathbf{k}\f$ (given as a unit vector) is determined by \f[ z = -\frac{\mathbf{v}\cdot\mathbf{k}}{c} \f]
where \f$c\f$ is the speed of light in vacuum. As a function of the rest wavelength \f$\lambda_0\f$, the redshifted
wavelength \f$\lambda_z\f$ is given by \f$\lambda_z=(1+z)\,\lambda_0\f$. Since the redshift value depends on the angle
between the particle and photon packet trajectories, the emission is no longer isotropic.

The default units for these quantities can be overridden by including columns header info in the file as described in
the TextInFile class header. For example, here is an input file describing just a single source particle placed at the
origin of the model coordinate system:

    # Star particle for testing SED family
    # Column 1: position x (pc)
    # Column 2: position y (pc)
    # Column 3: position z (pc)
    # Column 4: smoothing length (pc)
    # Column 5: mass (Msun)
    # Column 6: metallicity (1)
    # Column 7: age (Gyr)
    0 0 0 1   10  0.04  5

### Spatial distribution from snapshot with built-in SED

If the hydrodynamical simulation does not track the relevant properties for defining the local emission spectrum, we
can still import the spatial luminosity distribution from the snapshot and assign a built-in %SED that is constant
across the spatial domain. In this case, we use the GeometricSource class, and we configure it with an instance of the
ParticleGeometry class to import the snapshot. Similar to the ParticleSource class described earlier, the
ParticleGeometry class expects a text file with a single line for each particle. The first four columns specify the
\f$x\f$, \f$y\f$ and \f$z\f$ coordinates and the smoothing length \f$h\f$ for the particle. The fifth column specifies
the luminosity contribution of this particle, in arbitrary units since the ParticleGeometry class normalizes the total
luminosity to unity. Because of this normalization, we need to separately supply the actual luminosity of the source
through one of the regular options offered by the GeometricSource class.

## Adaptive mesh sources

Simulations with an a adaptive mesh paradigm use a hierarchical grid that is refined to a variable level depending on
the resolution requirements in various regions of the model. While the resolution requirements and thus the grid may
change as the system evolves, each particular snapshot corresponds to a unique and well-defined hierarchical grid.
Thus, an adaptive mesh snapshot includes some description of the structure of the hierarchical grid, implicitly or
explicitly defining the spatial extent of each grid cell, and for each cell the values of a suite of physical
properties.

While it is possible to use this technique with spherical or cylindrical coordinate systems, perhaps to benefit from
certain quasi-symmetries in the model, SKIRT only supports adaptive mesh snapshots using Cartesian coordinates. In a
Cartesian hierarchical grid, the cuboidal spatial domain is recursively subdivided into smaller cuboids according to
some scheme until the desired resolution in each region is reached.

### Snapshot data format

The AdaptiveMeshSource class expects a text file in a format that describes the topological structure of the Cartesian
hierarchical grid and lists the relevant physical properties in each cell. The size of the spatial domain must be
defined separately in the SKIRT configuration file, i.e. this information is not part of the imported data.

The hierarchical grid structure is organized into a tree. Each tree node represents a cuboidal portion of the domain,
called its \em extent. The \em root node's extent is the complete domain. A \em nonleaf node distributes its extent
over its child nodes using a regular linear grid. The number of subdivisions is defined separately for each node and
can differ for each spatial dimension. An octree, for example, would subdivide each nonleaf node into
\f$2\times2\times2\f$ child nodes. Typical AMR schemes have much larger subdivision counts that sometimes vary within
the grid; for example, the root node may be subdivided differently. A \em leaf node represents a cell that is not
subdivided any further and that holds a data value for each field; the field values are considered to be constant over
the leaf node's extent. Collectively the leaf nodes form a partition of the domain, i.e. their extents cover the
complete domain without overlapping one another.

The leaf nodes or cells in this three-dimensional data structure can be arranged in a linear sequence using so-called
\em Morton \em ordering. This ordering is obtained by performing a depth-first traversal of the tree, where each
nonleaf node visits its children in the order x-first, then y, then z. The process is illustrated in the following
figure for a two-dimensional structure. The root node is subdivided into \f$4\times3\f$ subnodes; some of the nodes
near the center are subdivided into \f$2\times2\f$ subnodes, and two of the cells in the upper row are subdivided into
\f$1\times2\f$ subnodes. The solid line connects the leaf nodes in Morton order, starting at the lower left node with
Morton index 0 and performing a depth-first traversal with each nonleaf node visiting its children in the order first x
(horizontal) and then y (vertical).

\image html HydroMortonGrid.png

The overall makeup of the snapshot text file reflects this structure and ordering. Below is a text representation of
the 2D grid shown in the above figure. Because SKIRT deals with 3D grids, we've added a third dimension that is
never subdivided. The lines starting with an exclamation mark indicate a subdivided node, e.g., the root node is
subdivided in \f$4\times3\times1\f$ cells. The other lines specify the field values for a particular cell. In this
example, the first field value specifies the serial number or \em Morton \em index of the cell, and the second value
specifies the cell's "density" reflected by the gray level in the above figure. In an actual snapshot, these
illustrative values would be replaced by the relevant physical quantities.

\verbatim
# Snapshot text data file
! 4 3 1
0 0.4
1 0.4
2 0.4
3 0.4
4 0.4
! 2 2 1
5 0.6
6 0.6
7 0.6
! 2 2 1
8 0.8
9 0.8
10 0.8
11 0.8
! 2 2 1
12 0.6
13 0.6
14 0.6
15 0.6
16 0.4
17 0.4
! 1 2 1
18 0.5
19 0.5
! 1 2 1
20 0.5
21 0.5
22 0.4
\endverbatim

More formally, each line in the text file describes a particular tree node (nonleaf or leaf), and the lines are given
in Morton order. Specifically, each line in the file can be of one of the following types:

- \em Comment: lines having a number sign or hash (\#) as the first non-whitespace character, lines containing only
whitespace and empty lines are ignored (and do not count in the Morton order).

- \em Nonleaf: a nonleaf line has an exclamation mark (!) as the first non-whitespace character, followed by optional
whitespace and then three whitespace-separated positive integer numbers \f$N_x,N_y,N_z\f$. These three numbers specify
the number of child nodes carried by this node in each spatial direction. The child nodes are on a regular linear grid
as described above.

- \em Leaf: a leaf node contains one or more whitespace-separated floating point numbers reflecting the physical
quantities associated with the leaf node, depending on the user configuration settings for the snapshot. The default
units for these quantities can be overridden by including columns header info in the file as described in the
TextInFile class header.

Note that there is no need to include the cell positions in the lines for the leaf nodes because the geometry follows
from the Morton order.

### Spatial distribution and SED from snapshot

As before, we first consider the case where both the spatial distribution and the %SED at each location are determined
from the snapshot. The AdaptiveMeshSource class expects a snapshot data file in the format described in the previous
section, supplemented with the extent of the spatial domain in each direction (specified separately as part of the
configuration), because that information is not stored in the file.

As with other imported sources (see \ref HydroSourcesSphSnapsed), the AdaptiveMeshSource class allows configuring an
%SED family from which a specific template is selected for each leaf node. To this end, each leaf-node line in the
import file specifies the parameters for the configured %SED family, possibly preceded by the bulk velocity components.

Given this information, SKIRT calculates the luminosity contribution of each leaf node or cell. This is used to
determine the probability that a given cell will be selected as the launch site for a new photon packet. Generating a
random launch position from a uniform distribution within the selected cuboidal cell is of course trivial.

### Spatial distribution from snapshot with built-in SED

Similar to the procedure described for SPH snapshots in \ref HydroSourcesSphBuiltsed, we can import the spatial
luminosity distribution from a mesh-based snapshot and assign a built-in %SED that is constant across the spatial
domain. In this case, we configure a GeometricSource with an AdaptiveMeshGeometry to import the snapshot, separately
specifying the extent of the spatial domain as before. The values in the import file now specify the luminosity
contribution for each cell.

The  AdaptiveMeshGeometry class offers various options for compatibility with medium density distributions (see \ref
HydroMediaMeshLoadsnap). In the context of source luminosities, the \em massType option is the only relevant one:
 - for an "integrated mass" type, the value in the import file indicates the luminosity contribution of the cell;
 - for an "average density" type, the value in the import file is multiplied by the volume of the cell to determine
   the cell's luminosity contribution.

In both cases the units of the specified values are irrelevant because the AdaptiveMeshGeometry class normalizes the
total luminosity to unity. Because of this normalization, we need to separately supply the actual luminosity of the
source through one of the regular options offered by the GeometricSource class.

## Voronoi mesh sources

Due to the nature of a Voronoi tessellation, the geometry of the grid is completely defined by the positions of the
generating sites. It is hence not necessary for a snapshot to store all the vertices and edges of each of the cells.
Similar to our approach for other snapshot types, SKIRT reads the properties for a list of Voronoi cells from a text
file in a simple format. SKIRT constructs the Voronoi grid from the positions of the generating sites, and assigns
the corresponding physical values to each cell, assuming that the values are constant across the cell's extent.


The procedures for loading a spatial and/or spectral distribution from a Voronoi-tessellation-based snapshot into
SKIRT are very similar to what was described for the other snapshot types in \ref HydroSourcesSph and \ref
HydroSourcesAmr.

The VoronoiMeshSource class expects a snapshot data file in a straightforward text column format, containing one line
per cell. The first three columns provide the \f$x\f$, \f$y\f$, and \f$z\f$ coordinates of the generating site for the
cell. The subsequent columns specify the relevant physical quantities for determining the %SED assigned to the cell
depending on the configured %SED family.

The VoronoiMeshGeometry class, when configured as part of a GeometricSource, imports just the spatial luminosity
distribution from a Voronoi-based snapshot, allowing to separately assign a built-in %SED that is constant across the
spatial domain. The file format is similar as described above. The luminosity contribution of each Voronoi cell is now
given by the corresponding value in the import file, possibly multiplied by the volume of the cell as described in \ref
HydroSourcesAmrBuiltsed. Again, because the VoronoiMeshGeometry class normalizes the total luminosity to unity, we need
to separately supply the actual luminosity of the source through one of the standard normalization options.



*/
